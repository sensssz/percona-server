/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 24 "/home/jiamin/percona-server/sql/sql_yacc.yy"

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    MY_ATTRIBUTE ((__unused__))
  #endif
</pre>
  This usage of MY_ATTRIBUTE is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef MY_ATTRIBUTE
#define MY_ATTRIBUTE(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      ((tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_GTID_NEXT_LIST
       || tmp->var == Sys_gtid_next_list_ptr
#endif
       ) ||
       Sys_gtid_purged_ptr == tmp->var))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_cur_instr_trig_field_items.link_in_list(trg_fld,
                                                &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}



/* Line 371 of yacc.c  */
#line 1020 "/home/jiamin/percona-server/build/5.6-debug/sql/sql_yacc.cc"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_HOME_JIAMIN_PERCONA_SERVER_BUILD_5_6_DEBUG_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_HOME_JIAMIN_PERCONA_SERVER_BUILD_5_6_DEBUG_SQL_SQL_YACC_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     ARCHIVED_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHANGED_PAGE_BITMAPS_SYM = 314,
     CHARSET = 315,
     CHAR_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     CLUSTERING_SYM = 324,
     COALESCE = 325,
     CODE_SYM = 326,
     COLLATE_SYM = 327,
     COLLATION_SYM = 328,
     COLUMNS = 329,
     COLUMN_SYM = 330,
     COLUMN_FORMAT_SYM = 331,
     COLUMN_NAME_SYM = 332,
     COMMENT_SYM = 333,
     COMMITTED_SYM = 334,
     COMMIT_SYM = 335,
     COMPACT_SYM = 336,
     COMPLETION_SYM = 337,
     COMPRESSED_SYM = 338,
     COMPRESSION_DICTIONARY_SYM = 339,
     CONCURRENT = 340,
     CONDITION_SYM = 341,
     CONNECTION_SYM = 342,
     CONSISTENT_SYM = 343,
     CONSTRAINT = 344,
     CONSTRAINT_CATALOG_SYM = 345,
     CONSTRAINT_NAME_SYM = 346,
     CONSTRAINT_SCHEMA_SYM = 347,
     CONTAINS_SYM = 348,
     CONTEXT_SYM = 349,
     CONTINUE_SYM = 350,
     CONVERT_SYM = 351,
     COUNT_SYM = 352,
     CPU_SYM = 353,
     CREATE = 354,
     CROSS = 355,
     CUBE_SYM = 356,
     CURDATE = 357,
     CURRENT_SYM = 358,
     CURRENT_USER = 359,
     CURSOR_SYM = 360,
     CURSOR_NAME_SYM = 361,
     CURTIME = 362,
     DATABASE = 363,
     DATABASES = 364,
     DATAFILE_SYM = 365,
     DATA_SYM = 366,
     DATETIME = 367,
     DATE_ADD_INTERVAL = 368,
     DATE_SUB_INTERVAL = 369,
     DATE_SYM = 370,
     DAY_HOUR_SYM = 371,
     DAY_MICROSECOND_SYM = 372,
     DAY_MINUTE_SYM = 373,
     DAY_SECOND_SYM = 374,
     DAY_SYM = 375,
     DEALLOCATE_SYM = 376,
     DECIMAL_NUM = 377,
     DECIMAL_SYM = 378,
     DECLARE_SYM = 379,
     DEFAULT = 380,
     DEFAULT_AUTH_SYM = 381,
     DEFINER_SYM = 382,
     DELAYED_SYM = 383,
     DELAY_KEY_WRITE_SYM = 384,
     DELETE_SYM = 385,
     DESC = 386,
     DESCRIBE = 387,
     DES_KEY_FILE = 388,
     DETERMINISTIC_SYM = 389,
     DIAGNOSTICS_SYM = 390,
     DIRECTORY_SYM = 391,
     DISABLE_SYM = 392,
     DISCARD = 393,
     DISK_SYM = 394,
     DISTINCT = 395,
     DIV_SYM = 396,
     DOUBLE_SYM = 397,
     DO_SYM = 398,
     DROP = 399,
     DUAL_SYM = 400,
     DUMPFILE = 401,
     DUPLICATE_SYM = 402,
     DYNAMIC_SYM = 403,
     EACH_SYM = 404,
     ELSE = 405,
     ELSEIF_SYM = 406,
     ENABLE_SYM = 407,
     ENCLOSED = 408,
     END = 409,
     ENDS_SYM = 410,
     END_OF_INPUT = 411,
     ENGINES_SYM = 412,
     ENGINE_SYM = 413,
     ENUM = 414,
     EQ = 415,
     EQUAL_SYM = 416,
     ERROR_SYM = 417,
     ERRORS = 418,
     ESCAPED = 419,
     ESCAPE_SYM = 420,
     EVENTS_SYM = 421,
     EVENT_SYM = 422,
     EVERY_SYM = 423,
     EXCHANGE_SYM = 424,
     EXECUTE_SYM = 425,
     EXISTS = 426,
     EXIT_SYM = 427,
     EXPANSION_SYM = 428,
     EXPIRE_SYM = 429,
     EXPORT_SYM = 430,
     EXTENDED_SYM = 431,
     EXTENT_SIZE_SYM = 432,
     EXTRACT_SYM = 433,
     FALSE_SYM = 434,
     FAST_SYM = 435,
     FAULTS_SYM = 436,
     FETCH_SYM = 437,
     FILE_SYM = 438,
     FIRST_SYM = 439,
     FIXED_SYM = 440,
     FLOAT_NUM = 441,
     FLOAT_SYM = 442,
     FLUSH_SYM = 443,
     FORCE_SYM = 444,
     FOREIGN = 445,
     FOR_SYM = 446,
     FORMAT_SYM = 447,
     FOUND_SYM = 448,
     FROM = 449,
     FULL = 450,
     FULLTEXT_SYM = 451,
     FUNCTION_SYM = 452,
     GE = 453,
     GENERAL = 454,
     GEOMETRYCOLLECTION = 455,
     GEOMETRY_SYM = 456,
     GET_FORMAT = 457,
     GET_SYM = 458,
     GLOBAL_SYM = 459,
     GRANT = 460,
     GRANTS = 461,
     GROUP_SYM = 462,
     GROUP_CONCAT_SYM = 463,
     GT_SYM = 464,
     HANDLER_SYM = 465,
     HASH_SYM = 466,
     HAVING = 467,
     HELP_SYM = 468,
     HEX_NUM = 469,
     HIGH_PRIORITY = 470,
     HOST_SYM = 471,
     HOSTS_SYM = 472,
     HOUR_MICROSECOND_SYM = 473,
     HOUR_MINUTE_SYM = 474,
     HOUR_SECOND_SYM = 475,
     HOUR_SYM = 476,
     IDENT = 477,
     IDENTIFIED_SYM = 478,
     IDENT_QUOTED = 479,
     IF = 480,
     IGNORE_SYM = 481,
     IGNORE_SERVER_IDS_SYM = 482,
     IMPORT = 483,
     INDEXES = 484,
     INDEX_SYM = 485,
     INDEX_STATS_SYM = 486,
     INFILE = 487,
     INITIAL_SIZE_SYM = 488,
     INNER_SYM = 489,
     INOUT_SYM = 490,
     INSENSITIVE_SYM = 491,
     INSERT = 492,
     INSERT_METHOD = 493,
     INSTALL_SYM = 494,
     INTERVAL_SYM = 495,
     INTO = 496,
     INT_SYM = 497,
     INVOKER_SYM = 498,
     IN_SYM = 499,
     IO_AFTER_GTIDS = 500,
     IO_BEFORE_GTIDS = 501,
     IO_SYM = 502,
     IPC_SYM = 503,
     IS = 504,
     ISOLATION = 505,
     ISSUER_SYM = 506,
     ITERATE_SYM = 507,
     JOIN_SYM = 508,
     KEYS = 509,
     KEY_BLOCK_SIZE = 510,
     KEY_SYM = 511,
     KILL_SYM = 512,
     LANGUAGE_SYM = 513,
     LAST_SYM = 514,
     LE = 515,
     LEADING = 516,
     LEAVES = 517,
     LEAVE_SYM = 518,
     LEFT = 519,
     LESS_SYM = 520,
     LEVEL_SYM = 521,
     LEX_HOSTNAME = 522,
     LIKE = 523,
     LIMIT = 524,
     LINEAR_SYM = 525,
     LINES = 526,
     LINESTRING = 527,
     LIST_SYM = 528,
     LOAD = 529,
     LOCAL_SYM = 530,
     LOCATOR_SYM = 531,
     LOCKS_SYM = 532,
     LOCK_SYM = 533,
     LOGFILE_SYM = 534,
     LOGS_SYM = 535,
     LONGBLOB = 536,
     LONGTEXT = 537,
     LONG_NUM = 538,
     LONG_SYM = 539,
     LOOP_SYM = 540,
     LOW_PRIORITY = 541,
     LT = 542,
     MASTER_AUTO_POSITION_SYM = 543,
     MASTER_BIND_SYM = 544,
     MASTER_CONNECT_RETRY_SYM = 545,
     MASTER_DELAY_SYM = 546,
     MASTER_HOST_SYM = 547,
     MASTER_LOG_FILE_SYM = 548,
     MASTER_LOG_POS_SYM = 549,
     MASTER_PASSWORD_SYM = 550,
     MASTER_PORT_SYM = 551,
     MASTER_RETRY_COUNT_SYM = 552,
     MASTER_SERVER_ID_SYM = 553,
     MASTER_SSL_CAPATH_SYM = 554,
     MASTER_SSL_CA_SYM = 555,
     MASTER_SSL_CERT_SYM = 556,
     MASTER_SSL_CIPHER_SYM = 557,
     MASTER_SSL_CRL_SYM = 558,
     MASTER_SSL_CRLPATH_SYM = 559,
     MASTER_SSL_KEY_SYM = 560,
     MASTER_SSL_SYM = 561,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 562,
     MASTER_SYM = 563,
     MASTER_USER_SYM = 564,
     MASTER_HEARTBEAT_PERIOD_SYM = 565,
     MATCH = 566,
     MAX_CONNECTIONS_PER_HOUR = 567,
     MAX_QUERIES_PER_HOUR = 568,
     MAX_ROWS = 569,
     MAX_SIZE_SYM = 570,
     MAX_SYM = 571,
     MAX_UPDATES_PER_HOUR = 572,
     MAX_USER_CONNECTIONS_SYM = 573,
     MAX_VALUE_SYM = 574,
     MEDIUMBLOB = 575,
     MEDIUMINT = 576,
     MEDIUMTEXT = 577,
     MEDIUM_SYM = 578,
     MEMORY_SYM = 579,
     MERGE_SYM = 580,
     MESSAGE_TEXT_SYM = 581,
     MICROSECOND_SYM = 582,
     MIGRATE_SYM = 583,
     MINUTE_MICROSECOND_SYM = 584,
     MINUTE_SECOND_SYM = 585,
     MINUTE_SYM = 586,
     MIN_ROWS = 587,
     MIN_SYM = 588,
     MODE_SYM = 589,
     MODIFIES_SYM = 590,
     MODIFY_SYM = 591,
     MOD_SYM = 592,
     MONTH_SYM = 593,
     MULTILINESTRING = 594,
     MULTIPOINT = 595,
     MULTIPOLYGON = 596,
     MUTEX_SYM = 597,
     MYSQL_ERRNO_SYM = 598,
     NAMES_SYM = 599,
     NAME_SYM = 600,
     NATIONAL_SYM = 601,
     NATURAL = 602,
     NCHAR_STRING = 603,
     NCHAR_SYM = 604,
     NDBCLUSTER_SYM = 605,
     NE = 606,
     NEG = 607,
     NEW_SYM = 608,
     NEXT_SYM = 609,
     NODEGROUP_SYM = 610,
     NONE_SYM = 611,
     NOT2_SYM = 612,
     NOT_SYM = 613,
     NOW_SYM = 614,
     NO_SYM = 615,
     NO_WAIT_SYM = 616,
     NO_WRITE_TO_BINLOG = 617,
     NULL_SYM = 618,
     NUM = 619,
     NUMBER_SYM = 620,
     NUMERIC_SYM = 621,
     NVARCHAR_SYM = 622,
     OFFSET_SYM = 623,
     OLD_PASSWORD = 624,
     ON = 625,
     ONE_SYM = 626,
     ONLY_SYM = 627,
     OPEN_SYM = 628,
     OPTIMIZE = 629,
     OPTIONS_SYM = 630,
     OPTION = 631,
     OPTIONALLY = 632,
     OR2_SYM = 633,
     ORDER_SYM = 634,
     OR_OR_SYM = 635,
     OR_SYM = 636,
     OUTER = 637,
     OUTFILE = 638,
     OUT_SYM = 639,
     OWNER_SYM = 640,
     PACK_KEYS_SYM = 641,
     PAGE_SYM = 642,
     PARAM_MARKER = 643,
     PARSER_SYM = 644,
     PARTIAL = 645,
     PARTITION_SYM = 646,
     PARTITIONS_SYM = 647,
     PARTITIONING_SYM = 648,
     PASSWORD = 649,
     PHASE_SYM = 650,
     PLUGIN_DIR_SYM = 651,
     PLUGIN_SYM = 652,
     PLUGINS_SYM = 653,
     POINT_SYM = 654,
     POLYGON = 655,
     PORT_SYM = 656,
     POSITION_SYM = 657,
     PRECISION = 658,
     PREPARE_SYM = 659,
     PRESERVE_SYM = 660,
     PREV_SYM = 661,
     PRIMARY_SYM = 662,
     PRIVILEGES = 663,
     PROCEDURE_SYM = 664,
     PROCESS = 665,
     PROCESSLIST_SYM = 666,
     PROFILE_SYM = 667,
     PROFILES_SYM = 668,
     PROXY_SYM = 669,
     PURGE = 670,
     QUARTER_SYM = 671,
     QUERY_SYM = 672,
     QUICK = 673,
     RANGE_SYM = 674,
     READS_SYM = 675,
     READ_ONLY_SYM = 676,
     READ_SYM = 677,
     READ_WRITE_SYM = 678,
     REAL = 679,
     REBUILD_SYM = 680,
     RECOVER_SYM = 681,
     REDOFILE_SYM = 682,
     REDO_BUFFER_SIZE_SYM = 683,
     REDUNDANT_SYM = 684,
     REFERENCES = 685,
     REGEXP = 686,
     RELAY = 687,
     RELAYLOG_SYM = 688,
     RELAY_LOG_FILE_SYM = 689,
     RELAY_LOG_POS_SYM = 690,
     RELAY_THREAD = 691,
     RELEASE_SYM = 692,
     RELOAD = 693,
     REMOVE_SYM = 694,
     RENAME = 695,
     REORGANIZE_SYM = 696,
     REPAIR = 697,
     REPEATABLE_SYM = 698,
     REPEAT_SYM = 699,
     REPLACE = 700,
     REPLICATION = 701,
     REQUIRE_SYM = 702,
     RESET_SYM = 703,
     RESIGNAL_SYM = 704,
     RESOURCES = 705,
     RESTORE_SYM = 706,
     RESTRICT = 707,
     RESUME_SYM = 708,
     RETURNED_SQLSTATE_SYM = 709,
     RETURNS_SYM = 710,
     RETURN_SYM = 711,
     REVERSE_SYM = 712,
     REVOKE = 713,
     RIGHT = 714,
     ROLLBACK_SYM = 715,
     ROLLUP_SYM = 716,
     ROUTINE_SYM = 717,
     ROWS_SYM = 718,
     ROW_FORMAT_SYM = 719,
     ROW_SYM = 720,
     ROW_COUNT_SYM = 721,
     RTREE_SYM = 722,
     SAVEPOINT_SYM = 723,
     SCHEDULE_SYM = 724,
     SCHEMA_NAME_SYM = 725,
     SECOND_MICROSECOND_SYM = 726,
     SECOND_SYM = 727,
     SECURITY_SYM = 728,
     SELECT_SYM = 729,
     SENSITIVE_SYM = 730,
     SEPARATOR_SYM = 731,
     SERIALIZABLE_SYM = 732,
     SERIAL_SYM = 733,
     SESSION_SYM = 734,
     SERVER_SYM = 735,
     SERVER_OPTIONS = 736,
     SET = 737,
     SET_VAR = 738,
     SHARE_SYM = 739,
     SHIFT_LEFT = 740,
     SHIFT_RIGHT = 741,
     SHOW = 742,
     SHUTDOWN = 743,
     SIGNAL_SYM = 744,
     SIGNED_SYM = 745,
     SIMPLE_SYM = 746,
     SLAVE = 747,
     SLOW = 748,
     SMALLINT = 749,
     SNAPSHOT_SYM = 750,
     SOCKET_SYM = 751,
     SONAME_SYM = 752,
     SOUNDS_SYM = 753,
     SOURCE_SYM = 754,
     SPATIAL_SYM = 755,
     SPECIFIC_SYM = 756,
     SQLEXCEPTION_SYM = 757,
     SQLSTATE_SYM = 758,
     SQLWARNING_SYM = 759,
     SQL_AFTER_GTIDS = 760,
     SQL_AFTER_MTS_GAPS = 761,
     SQL_BEFORE_GTIDS = 762,
     SQL_BIG_RESULT = 763,
     SQL_BUFFER_RESULT = 764,
     SQL_CACHE_SYM = 765,
     SQL_CALC_FOUND_ROWS = 766,
     SQL_NO_CACHE_SYM = 767,
     SQL_SMALL_RESULT = 768,
     SQL_SYM = 769,
     SQL_THREAD = 770,
     SSL_SYM = 771,
     STARTING = 772,
     STARTS_SYM = 773,
     START_SYM = 774,
     STATEMENT_SYM = 775,
     STATS_AUTO_RECALC_SYM = 776,
     STATS_PERSISTENT_SYM = 777,
     STATS_SAMPLE_PAGES_SYM = 778,
     STATUS_SYM = 779,
     NOLOCK_SYM = 780,
     NONBLOCKING_SYM = 781,
     STDDEV_SAMP_SYM = 782,
     STD_SYM = 783,
     STOP_SYM = 784,
     STORAGE_SYM = 785,
     STRAIGHT_JOIN = 786,
     STRING_SYM = 787,
     SUBCLASS_ORIGIN_SYM = 788,
     SUBDATE_SYM = 789,
     SUBJECT_SYM = 790,
     SUBPARTITIONS_SYM = 791,
     SUBPARTITION_SYM = 792,
     SUBSTRING = 793,
     SUM_SYM = 794,
     SUPER_SYM = 795,
     SUSPEND_SYM = 796,
     SWAPS_SYM = 797,
     SWITCHES_SYM = 798,
     SYSDATE = 799,
     TABLES = 800,
     TABLESPACE = 801,
     TABLE_REF_PRIORITY = 802,
     TABLE_SYM = 803,
     TABLE_STATS_SYM = 804,
     TABLE_CHECKSUM_SYM = 805,
     TABLE_NAME_SYM = 806,
     TEMPORARY = 807,
     TEMPTABLE_SYM = 808,
     TERMINATED = 809,
     TEXT_STRING = 810,
     TEXT_SYM = 811,
     THAN_SYM = 812,
     THEN_SYM = 813,
     THREAD_STATS_SYM = 814,
     TIMESTAMP = 815,
     TIMESTAMP_ADD = 816,
     TIMESTAMP_DIFF = 817,
     TIME_SYM = 818,
     TINYBLOB = 819,
     TINYINT = 820,
     TINYTEXT = 821,
     TO_SYM = 822,
     TOKU_UNCOMPRESSED_SYM = 823,
     TOKU_ZLIB_SYM = 824,
     TOKU_SNAPPY_SYM = 825,
     TOKU_QUICKLZ_SYM = 826,
     TOKU_LZMA_SYM = 827,
     TOKU_FAST_SYM = 828,
     TOKU_SMALL_SYM = 829,
     TOKU_DEFAULT_SYM = 830,
     TRAILING = 831,
     TRANSACTION_SYM = 832,
     TRIGGERS_SYM = 833,
     TRIGGER_SYM = 834,
     TRIM = 835,
     TRUE_SYM = 836,
     TRUNCATE_SYM = 837,
     TYPES_SYM = 838,
     TYPE_SYM = 839,
     UDF_RETURNS_SYM = 840,
     ULONGLONG_NUM = 841,
     UNCOMMITTED_SYM = 842,
     UNDEFINED_SYM = 843,
     UNDERSCORE_CHARSET = 844,
     UNDOFILE_SYM = 845,
     UNDO_BUFFER_SIZE_SYM = 846,
     UNDO_SYM = 847,
     UNICODE_SYM = 848,
     UNINSTALL_SYM = 849,
     UNION_SYM = 850,
     UNIQUE_SYM = 851,
     UNKNOWN_SYM = 852,
     UNLOCK_SYM = 853,
     UNSIGNED = 854,
     UNTIL_SYM = 855,
     UPDATE_SYM = 856,
     UPGRADE_SYM = 857,
     USAGE = 858,
     USER = 859,
     USER_STATS_SYM = 860,
     USE_FRM = 861,
     USE_SYM = 862,
     USING = 863,
     UTC_DATE_SYM = 864,
     UTC_TIMESTAMP_SYM = 865,
     UTC_TIME_SYM = 866,
     VALUES = 867,
     VALUE_SYM = 868,
     VARBINARY = 869,
     VARCHAR = 870,
     VARIABLES = 871,
     VARIANCE_SYM = 872,
     VARYING = 873,
     VAR_SAMP_SYM = 874,
     VIEW_SYM = 875,
     WAIT_SYM = 876,
     WARNINGS = 877,
     WEEK_SYM = 878,
     WEIGHT_STRING_SYM = 879,
     WHEN_SYM = 880,
     WHERE = 881,
     WHILE_SYM = 882,
     WITH = 883,
     WITH_CUBE_SYM = 884,
     WITH_ROLLUP_SYM = 885,
     WORK_SYM = 886,
     WRAPPER_SYM = 887,
     WRITE_SYM = 888,
     X509_SYM = 889,
     XA_SYM = 890,
     XML_SYM = 891,
     XOR = 892,
     YEAR_MONTH_SYM = 893,
     YEAR_SYM = 894,
     ZEROFILL = 895
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define ARCHIVED_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHANGED_PAGE_BITMAPS_SYM 314
#define CHARSET 315
#define CHAR_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define CLUSTERING_SYM 324
#define COALESCE 325
#define CODE_SYM 326
#define COLLATE_SYM 327
#define COLLATION_SYM 328
#define COLUMNS 329
#define COLUMN_SYM 330
#define COLUMN_FORMAT_SYM 331
#define COLUMN_NAME_SYM 332
#define COMMENT_SYM 333
#define COMMITTED_SYM 334
#define COMMIT_SYM 335
#define COMPACT_SYM 336
#define COMPLETION_SYM 337
#define COMPRESSED_SYM 338
#define COMPRESSION_DICTIONARY_SYM 339
#define CONCURRENT 340
#define CONDITION_SYM 341
#define CONNECTION_SYM 342
#define CONSISTENT_SYM 343
#define CONSTRAINT 344
#define CONSTRAINT_CATALOG_SYM 345
#define CONSTRAINT_NAME_SYM 346
#define CONSTRAINT_SCHEMA_SYM 347
#define CONTAINS_SYM 348
#define CONTEXT_SYM 349
#define CONTINUE_SYM 350
#define CONVERT_SYM 351
#define COUNT_SYM 352
#define CPU_SYM 353
#define CREATE 354
#define CROSS 355
#define CUBE_SYM 356
#define CURDATE 357
#define CURRENT_SYM 358
#define CURRENT_USER 359
#define CURSOR_SYM 360
#define CURSOR_NAME_SYM 361
#define CURTIME 362
#define DATABASE 363
#define DATABASES 364
#define DATAFILE_SYM 365
#define DATA_SYM 366
#define DATETIME 367
#define DATE_ADD_INTERVAL 368
#define DATE_SUB_INTERVAL 369
#define DATE_SYM 370
#define DAY_HOUR_SYM 371
#define DAY_MICROSECOND_SYM 372
#define DAY_MINUTE_SYM 373
#define DAY_SECOND_SYM 374
#define DAY_SYM 375
#define DEALLOCATE_SYM 376
#define DECIMAL_NUM 377
#define DECIMAL_SYM 378
#define DECLARE_SYM 379
#define DEFAULT 380
#define DEFAULT_AUTH_SYM 381
#define DEFINER_SYM 382
#define DELAYED_SYM 383
#define DELAY_KEY_WRITE_SYM 384
#define DELETE_SYM 385
#define DESC 386
#define DESCRIBE 387
#define DES_KEY_FILE 388
#define DETERMINISTIC_SYM 389
#define DIAGNOSTICS_SYM 390
#define DIRECTORY_SYM 391
#define DISABLE_SYM 392
#define DISCARD 393
#define DISK_SYM 394
#define DISTINCT 395
#define DIV_SYM 396
#define DOUBLE_SYM 397
#define DO_SYM 398
#define DROP 399
#define DUAL_SYM 400
#define DUMPFILE 401
#define DUPLICATE_SYM 402
#define DYNAMIC_SYM 403
#define EACH_SYM 404
#define ELSE 405
#define ELSEIF_SYM 406
#define ENABLE_SYM 407
#define ENCLOSED 408
#define END 409
#define ENDS_SYM 410
#define END_OF_INPUT 411
#define ENGINES_SYM 412
#define ENGINE_SYM 413
#define ENUM 414
#define EQ 415
#define EQUAL_SYM 416
#define ERROR_SYM 417
#define ERRORS 418
#define ESCAPED 419
#define ESCAPE_SYM 420
#define EVENTS_SYM 421
#define EVENT_SYM 422
#define EVERY_SYM 423
#define EXCHANGE_SYM 424
#define EXECUTE_SYM 425
#define EXISTS 426
#define EXIT_SYM 427
#define EXPANSION_SYM 428
#define EXPIRE_SYM 429
#define EXPORT_SYM 430
#define EXTENDED_SYM 431
#define EXTENT_SIZE_SYM 432
#define EXTRACT_SYM 433
#define FALSE_SYM 434
#define FAST_SYM 435
#define FAULTS_SYM 436
#define FETCH_SYM 437
#define FILE_SYM 438
#define FIRST_SYM 439
#define FIXED_SYM 440
#define FLOAT_NUM 441
#define FLOAT_SYM 442
#define FLUSH_SYM 443
#define FORCE_SYM 444
#define FOREIGN 445
#define FOR_SYM 446
#define FORMAT_SYM 447
#define FOUND_SYM 448
#define FROM 449
#define FULL 450
#define FULLTEXT_SYM 451
#define FUNCTION_SYM 452
#define GE 453
#define GENERAL 454
#define GEOMETRYCOLLECTION 455
#define GEOMETRY_SYM 456
#define GET_FORMAT 457
#define GET_SYM 458
#define GLOBAL_SYM 459
#define GRANT 460
#define GRANTS 461
#define GROUP_SYM 462
#define GROUP_CONCAT_SYM 463
#define GT_SYM 464
#define HANDLER_SYM 465
#define HASH_SYM 466
#define HAVING 467
#define HELP_SYM 468
#define HEX_NUM 469
#define HIGH_PRIORITY 470
#define HOST_SYM 471
#define HOSTS_SYM 472
#define HOUR_MICROSECOND_SYM 473
#define HOUR_MINUTE_SYM 474
#define HOUR_SECOND_SYM 475
#define HOUR_SYM 476
#define IDENT 477
#define IDENTIFIED_SYM 478
#define IDENT_QUOTED 479
#define IF 480
#define IGNORE_SYM 481
#define IGNORE_SERVER_IDS_SYM 482
#define IMPORT 483
#define INDEXES 484
#define INDEX_SYM 485
#define INDEX_STATS_SYM 486
#define INFILE 487
#define INITIAL_SIZE_SYM 488
#define INNER_SYM 489
#define INOUT_SYM 490
#define INSENSITIVE_SYM 491
#define INSERT 492
#define INSERT_METHOD 493
#define INSTALL_SYM 494
#define INTERVAL_SYM 495
#define INTO 496
#define INT_SYM 497
#define INVOKER_SYM 498
#define IN_SYM 499
#define IO_AFTER_GTIDS 500
#define IO_BEFORE_GTIDS 501
#define IO_SYM 502
#define IPC_SYM 503
#define IS 504
#define ISOLATION 505
#define ISSUER_SYM 506
#define ITERATE_SYM 507
#define JOIN_SYM 508
#define KEYS 509
#define KEY_BLOCK_SIZE 510
#define KEY_SYM 511
#define KILL_SYM 512
#define LANGUAGE_SYM 513
#define LAST_SYM 514
#define LE 515
#define LEADING 516
#define LEAVES 517
#define LEAVE_SYM 518
#define LEFT 519
#define LESS_SYM 520
#define LEVEL_SYM 521
#define LEX_HOSTNAME 522
#define LIKE 523
#define LIMIT 524
#define LINEAR_SYM 525
#define LINES 526
#define LINESTRING 527
#define LIST_SYM 528
#define LOAD 529
#define LOCAL_SYM 530
#define LOCATOR_SYM 531
#define LOCKS_SYM 532
#define LOCK_SYM 533
#define LOGFILE_SYM 534
#define LOGS_SYM 535
#define LONGBLOB 536
#define LONGTEXT 537
#define LONG_NUM 538
#define LONG_SYM 539
#define LOOP_SYM 540
#define LOW_PRIORITY 541
#define LT 542
#define MASTER_AUTO_POSITION_SYM 543
#define MASTER_BIND_SYM 544
#define MASTER_CONNECT_RETRY_SYM 545
#define MASTER_DELAY_SYM 546
#define MASTER_HOST_SYM 547
#define MASTER_LOG_FILE_SYM 548
#define MASTER_LOG_POS_SYM 549
#define MASTER_PASSWORD_SYM 550
#define MASTER_PORT_SYM 551
#define MASTER_RETRY_COUNT_SYM 552
#define MASTER_SERVER_ID_SYM 553
#define MASTER_SSL_CAPATH_SYM 554
#define MASTER_SSL_CA_SYM 555
#define MASTER_SSL_CERT_SYM 556
#define MASTER_SSL_CIPHER_SYM 557
#define MASTER_SSL_CRL_SYM 558
#define MASTER_SSL_CRLPATH_SYM 559
#define MASTER_SSL_KEY_SYM 560
#define MASTER_SSL_SYM 561
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 562
#define MASTER_SYM 563
#define MASTER_USER_SYM 564
#define MASTER_HEARTBEAT_PERIOD_SYM 565
#define MATCH 566
#define MAX_CONNECTIONS_PER_HOUR 567
#define MAX_QUERIES_PER_HOUR 568
#define MAX_ROWS 569
#define MAX_SIZE_SYM 570
#define MAX_SYM 571
#define MAX_UPDATES_PER_HOUR 572
#define MAX_USER_CONNECTIONS_SYM 573
#define MAX_VALUE_SYM 574
#define MEDIUMBLOB 575
#define MEDIUMINT 576
#define MEDIUMTEXT 577
#define MEDIUM_SYM 578
#define MEMORY_SYM 579
#define MERGE_SYM 580
#define MESSAGE_TEXT_SYM 581
#define MICROSECOND_SYM 582
#define MIGRATE_SYM 583
#define MINUTE_MICROSECOND_SYM 584
#define MINUTE_SECOND_SYM 585
#define MINUTE_SYM 586
#define MIN_ROWS 587
#define MIN_SYM 588
#define MODE_SYM 589
#define MODIFIES_SYM 590
#define MODIFY_SYM 591
#define MOD_SYM 592
#define MONTH_SYM 593
#define MULTILINESTRING 594
#define MULTIPOINT 595
#define MULTIPOLYGON 596
#define MUTEX_SYM 597
#define MYSQL_ERRNO_SYM 598
#define NAMES_SYM 599
#define NAME_SYM 600
#define NATIONAL_SYM 601
#define NATURAL 602
#define NCHAR_STRING 603
#define NCHAR_SYM 604
#define NDBCLUSTER_SYM 605
#define NE 606
#define NEG 607
#define NEW_SYM 608
#define NEXT_SYM 609
#define NODEGROUP_SYM 610
#define NONE_SYM 611
#define NOT2_SYM 612
#define NOT_SYM 613
#define NOW_SYM 614
#define NO_SYM 615
#define NO_WAIT_SYM 616
#define NO_WRITE_TO_BINLOG 617
#define NULL_SYM 618
#define NUM 619
#define NUMBER_SYM 620
#define NUMERIC_SYM 621
#define NVARCHAR_SYM 622
#define OFFSET_SYM 623
#define OLD_PASSWORD 624
#define ON 625
#define ONE_SYM 626
#define ONLY_SYM 627
#define OPEN_SYM 628
#define OPTIMIZE 629
#define OPTIONS_SYM 630
#define OPTION 631
#define OPTIONALLY 632
#define OR2_SYM 633
#define ORDER_SYM 634
#define OR_OR_SYM 635
#define OR_SYM 636
#define OUTER 637
#define OUTFILE 638
#define OUT_SYM 639
#define OWNER_SYM 640
#define PACK_KEYS_SYM 641
#define PAGE_SYM 642
#define PARAM_MARKER 643
#define PARSER_SYM 644
#define PARTIAL 645
#define PARTITION_SYM 646
#define PARTITIONS_SYM 647
#define PARTITIONING_SYM 648
#define PASSWORD 649
#define PHASE_SYM 650
#define PLUGIN_DIR_SYM 651
#define PLUGIN_SYM 652
#define PLUGINS_SYM 653
#define POINT_SYM 654
#define POLYGON 655
#define PORT_SYM 656
#define POSITION_SYM 657
#define PRECISION 658
#define PREPARE_SYM 659
#define PRESERVE_SYM 660
#define PREV_SYM 661
#define PRIMARY_SYM 662
#define PRIVILEGES 663
#define PROCEDURE_SYM 664
#define PROCESS 665
#define PROCESSLIST_SYM 666
#define PROFILE_SYM 667
#define PROFILES_SYM 668
#define PROXY_SYM 669
#define PURGE 670
#define QUARTER_SYM 671
#define QUERY_SYM 672
#define QUICK 673
#define RANGE_SYM 674
#define READS_SYM 675
#define READ_ONLY_SYM 676
#define READ_SYM 677
#define READ_WRITE_SYM 678
#define REAL 679
#define REBUILD_SYM 680
#define RECOVER_SYM 681
#define REDOFILE_SYM 682
#define REDO_BUFFER_SIZE_SYM 683
#define REDUNDANT_SYM 684
#define REFERENCES 685
#define REGEXP 686
#define RELAY 687
#define RELAYLOG_SYM 688
#define RELAY_LOG_FILE_SYM 689
#define RELAY_LOG_POS_SYM 690
#define RELAY_THREAD 691
#define RELEASE_SYM 692
#define RELOAD 693
#define REMOVE_SYM 694
#define RENAME 695
#define REORGANIZE_SYM 696
#define REPAIR 697
#define REPEATABLE_SYM 698
#define REPEAT_SYM 699
#define REPLACE 700
#define REPLICATION 701
#define REQUIRE_SYM 702
#define RESET_SYM 703
#define RESIGNAL_SYM 704
#define RESOURCES 705
#define RESTORE_SYM 706
#define RESTRICT 707
#define RESUME_SYM 708
#define RETURNED_SQLSTATE_SYM 709
#define RETURNS_SYM 710
#define RETURN_SYM 711
#define REVERSE_SYM 712
#define REVOKE 713
#define RIGHT 714
#define ROLLBACK_SYM 715
#define ROLLUP_SYM 716
#define ROUTINE_SYM 717
#define ROWS_SYM 718
#define ROW_FORMAT_SYM 719
#define ROW_SYM 720
#define ROW_COUNT_SYM 721
#define RTREE_SYM 722
#define SAVEPOINT_SYM 723
#define SCHEDULE_SYM 724
#define SCHEMA_NAME_SYM 725
#define SECOND_MICROSECOND_SYM 726
#define SECOND_SYM 727
#define SECURITY_SYM 728
#define SELECT_SYM 729
#define SENSITIVE_SYM 730
#define SEPARATOR_SYM 731
#define SERIALIZABLE_SYM 732
#define SERIAL_SYM 733
#define SESSION_SYM 734
#define SERVER_SYM 735
#define SERVER_OPTIONS 736
#define SET 737
#define SET_VAR 738
#define SHARE_SYM 739
#define SHIFT_LEFT 740
#define SHIFT_RIGHT 741
#define SHOW 742
#define SHUTDOWN 743
#define SIGNAL_SYM 744
#define SIGNED_SYM 745
#define SIMPLE_SYM 746
#define SLAVE 747
#define SLOW 748
#define SMALLINT 749
#define SNAPSHOT_SYM 750
#define SOCKET_SYM 751
#define SONAME_SYM 752
#define SOUNDS_SYM 753
#define SOURCE_SYM 754
#define SPATIAL_SYM 755
#define SPECIFIC_SYM 756
#define SQLEXCEPTION_SYM 757
#define SQLSTATE_SYM 758
#define SQLWARNING_SYM 759
#define SQL_AFTER_GTIDS 760
#define SQL_AFTER_MTS_GAPS 761
#define SQL_BEFORE_GTIDS 762
#define SQL_BIG_RESULT 763
#define SQL_BUFFER_RESULT 764
#define SQL_CACHE_SYM 765
#define SQL_CALC_FOUND_ROWS 766
#define SQL_NO_CACHE_SYM 767
#define SQL_SMALL_RESULT 768
#define SQL_SYM 769
#define SQL_THREAD 770
#define SSL_SYM 771
#define STARTING 772
#define STARTS_SYM 773
#define START_SYM 774
#define STATEMENT_SYM 775
#define STATS_AUTO_RECALC_SYM 776
#define STATS_PERSISTENT_SYM 777
#define STATS_SAMPLE_PAGES_SYM 778
#define STATUS_SYM 779
#define NOLOCK_SYM 780
#define NONBLOCKING_SYM 781
#define STDDEV_SAMP_SYM 782
#define STD_SYM 783
#define STOP_SYM 784
#define STORAGE_SYM 785
#define STRAIGHT_JOIN 786
#define STRING_SYM 787
#define SUBCLASS_ORIGIN_SYM 788
#define SUBDATE_SYM 789
#define SUBJECT_SYM 790
#define SUBPARTITIONS_SYM 791
#define SUBPARTITION_SYM 792
#define SUBSTRING 793
#define SUM_SYM 794
#define SUPER_SYM 795
#define SUSPEND_SYM 796
#define SWAPS_SYM 797
#define SWITCHES_SYM 798
#define SYSDATE 799
#define TABLES 800
#define TABLESPACE 801
#define TABLE_REF_PRIORITY 802
#define TABLE_SYM 803
#define TABLE_STATS_SYM 804
#define TABLE_CHECKSUM_SYM 805
#define TABLE_NAME_SYM 806
#define TEMPORARY 807
#define TEMPTABLE_SYM 808
#define TERMINATED 809
#define TEXT_STRING 810
#define TEXT_SYM 811
#define THAN_SYM 812
#define THEN_SYM 813
#define THREAD_STATS_SYM 814
#define TIMESTAMP 815
#define TIMESTAMP_ADD 816
#define TIMESTAMP_DIFF 817
#define TIME_SYM 818
#define TINYBLOB 819
#define TINYINT 820
#define TINYTEXT 821
#define TO_SYM 822
#define TOKU_UNCOMPRESSED_SYM 823
#define TOKU_ZLIB_SYM 824
#define TOKU_SNAPPY_SYM 825
#define TOKU_QUICKLZ_SYM 826
#define TOKU_LZMA_SYM 827
#define TOKU_FAST_SYM 828
#define TOKU_SMALL_SYM 829
#define TOKU_DEFAULT_SYM 830
#define TRAILING 831
#define TRANSACTION_SYM 832
#define TRIGGERS_SYM 833
#define TRIGGER_SYM 834
#define TRIM 835
#define TRUE_SYM 836
#define TRUNCATE_SYM 837
#define TYPES_SYM 838
#define TYPE_SYM 839
#define UDF_RETURNS_SYM 840
#define ULONGLONG_NUM 841
#define UNCOMMITTED_SYM 842
#define UNDEFINED_SYM 843
#define UNDERSCORE_CHARSET 844
#define UNDOFILE_SYM 845
#define UNDO_BUFFER_SIZE_SYM 846
#define UNDO_SYM 847
#define UNICODE_SYM 848
#define UNINSTALL_SYM 849
#define UNION_SYM 850
#define UNIQUE_SYM 851
#define UNKNOWN_SYM 852
#define UNLOCK_SYM 853
#define UNSIGNED 854
#define UNTIL_SYM 855
#define UPDATE_SYM 856
#define UPGRADE_SYM 857
#define USAGE 858
#define USER 859
#define USER_STATS_SYM 860
#define USE_FRM 861
#define USE_SYM 862
#define USING 863
#define UTC_DATE_SYM 864
#define UTC_TIMESTAMP_SYM 865
#define UTC_TIME_SYM 866
#define VALUES 867
#define VALUE_SYM 868
#define VARBINARY 869
#define VARCHAR 870
#define VARIABLES 871
#define VARIANCE_SYM 872
#define VARYING 873
#define VAR_SAMP_SYM 874
#define VIEW_SYM 875
#define WAIT_SYM 876
#define WARNINGS 877
#define WEEK_SYM 878
#define WEIGHT_STRING_SYM 879
#define WHEN_SYM 880
#define WHERE 881
#define WHILE_SYM 882
#define WITH 883
#define WITH_CUBE_SYM 884
#define WITH_ROLLUP_SYM 885
#define WORK_SYM 886
#define WRAPPER_SYM 887
#define WRITE_SYM 888
#define X509_SYM 889
#define XA_SYM 890
#define XML_SYM 891
#define XOR 892
#define YEAR_MONTH_SYM 893
#define YEAR_SYM 894
#define ZEROFILL 895



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 968 "/home/jiamin/percona-server/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_CSTRING lex_cstr;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;


/* Line 387 of yacc.c  */
#line 2403 "/home/jiamin/percona-server/build/5.6-debug/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int MYSQLparse (void *YYPARSE_PARAM);
#else
int MYSQLparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int MYSQLparse (class THD *YYTHD);
#else
int MYSQLparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_MYSQL_HOME_JIAMIN_PERCONA_SERVER_BUILD_5_6_DEBUG_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
/* Line 390 of yacc.c  */
#line 1027 "/home/jiamin/percona-server/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

/* Line 390 of yacc.c  */
#line 2434 "/home/jiamin/percona-server/build/5.6-debug/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  627
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   57194

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  660
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  962
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2736
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4627

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   895

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   653,     2,     2,     2,   647,   642,     2,
     650,   651,   645,   644,   652,   643,   658,   646,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   659,   656,
       2,     2,     2,     2,   657,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   648,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   654,   641,   655,   649,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   129,   131,   133,   138,   140,   143,   144,
     149,   150,   153,   157,   159,   162,   163,   167,   168,   174,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   224,   228,   232,   236,   240,   244,   248,   252,
     258,   262,   264,   265,   267,   271,   273,   277,   281,   285,
     289,   290,   298,   299,   300,   315,   316,   317,   332,   333,
     334,   349,   350,   357,   358,   362,   367,   372,   376,   379,
     387,   389,   391,   402,   404,   408,   411,   414,   417,   420,
     423,   426,   429,   430,   444,   445,   452,   455,   456,   458,
     462,   464,   465,   468,   469,   472,   473,   475,   479,   484,
     485,   488,   489,   492,   494,   496,   498,   500,   502,   504,
     506,   508,   510,   512,   514,   516,   518,   519,   523,   525,
     526,   529,   530,   533,   536,   539,   542,   545,   549,   553,
     555,   557,   559,   562,   566,   570,   571,   576,   577,   581,
     582,   584,   588,   590,   591,   593,   597,   599,   600,   604,
     605,   607,   611,   613,   618,   619,   621,   623,   625,   626,
     630,   633,   637,   638,   642,   643,   649,   655,   656,   664,
     665,   672,   674,   676,   678,   682,   684,   686,   688,   692,
     693,   695,   697,   699,   701,   704,   706,   710,   712,   714,
     715,   717,   718,   721,   725,   731,   733,   735,   737,   739,
     741,   743,   745,   747,   749,   751,   753,   755,   757,   759,
     761,   765,   770,   771,   773,   775,   779,   781,   785,   789,
     791,   794,   796,   798,   800,   802,   806,   810,   812,   814,
     816,   818,   820,   822,   824,   826,   828,   830,   832,   834,
     836,   838,   842,   843,   844,   848,   850,   852,   854,   856,
     858,   860,   862,   864,   866,   868,   870,   872,   874,   875,
     881,   882,   885,   886,   890,   891,   894,   897,   900,   903,
     904,   911,   914,   915,   918,   920,   922,   926,   927,   928,
     929,   937,   938,   941,   944,   946,   948,   949,   950,   959,
     960,   967,   969,   972,   974,   977,   978,   979,   986,   987,
     988,   995,   996,   999,  1000,  1006,  1007,  1009,  1010,  1016,
    1017,  1020,  1021,  1027,  1032,  1033,  1034,  1043,  1044,  1045,
    1054,  1056,  1058,  1060,  1062,  1064,  1067,  1072,  1078,  1079,
    1084,  1089,  1094,  1098,  1102,  1105,  1108,  1109,  1112,  1114,
    1117,  1121,  1123,  1125,  1127,  1128,  1130,  1132,  1135,  1139,
    1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,  1156,  1158,
    1160,  1163,  1167,  1169,  1171,  1173,  1175,  1177,  1178,  1180,
    1182,  1185,  1189,  1191,  1193,  1195,  1197,  1199,  1201,  1203,
    1204,  1206,  1208,  1211,  1215,  1217,  1219,  1221,  1224,  1227,
    1230,  1232,  1234,  1236,  1238,  1241,  1245,  1249,  1253,  1257,
    1261,  1265,  1269,  1273,  1278,  1280,  1282,  1284,  1286,  1289,
    1293,  1296,  1301,  1307,  1308,  1314,  1315,  1316,  1322,  1323,
    1331,  1333,  1334,  1336,  1337,  1342,  1343,  1344,  1348,  1354,
    1361,  1362,  1367,  1370,  1373,  1376,  1379,  1380,  1382,  1383,
    1387,  1388,  1390,  1392,  1396,  1398,  1403,  1409,  1415,  1416,
    1419,  1420,  1421,  1429,  1430,  1441,  1443,  1447,  1449,  1451,
    1452,  1455,  1456,  1460,  1462,  1466,  1467,  1474,  1476,  1477,
    1478,  1484,  1485,  1490,  1492,  1494,  1496,  1500,  1502,  1506,
    1507,  1508,  1514,  1516,  1520,  1522,  1524,  1525,  1529,  1531,
    1535,  1536,  1541,  1543,  1544,  1546,  1549,  1551,  1555,  1560,
    1564,  1568,  1572,  1577,  1582,  1586,  1587,  1588,  1595,  1596,
    1598,  1599,  1601,  1603,  1606,  1608,  1610,  1611,  1613,  1615,
    1618,  1620,  1621,  1625,  1626,  1628,  1630,  1633,  1635,  1638,
    1642,  1646,  1650,  1654,  1658,  1662,  1666,  1670,  1674,  1678,
    1682,  1686,  1690,  1694,  1698,  1702,  1706,  1710,  1714,  1718,
    1719,  1726,  1728,  1730,  1734,  1739,  1744,  1747,  1750,  1753,
    1757,  1761,  1766,  1771,  1773,  1775,  1777,  1779,  1781,  1783,
    1785,  1787,  1789,  1791,  1793,  1795,  1797,  1799,  1801,  1803,
    1805,  1807,  1809,  1811,  1814,  1816,  1818,  1820,  1822,  1824,
    1826,  1830,  1832,  1834,  1837,  1840,  1848,  1857,  1866,  1875,
    1884,  1887,  1888,  1890,  1895,  1896,  1898,  1901,  1902,  1907,
    1911,  1915,  1919,  1921,  1924,  1926,  1928,  1932,  1935,  1939,
    1942,  1945,  1947,  1951,  1955,  1958,  1962,  1964,  1967,  1970,
    1973,  1975,  1978,  1980,  1982,  1984,  1987,  1991,  1994,  1998,
    2001,  2004,  2008,  2012,  2016,  2017,  2024,  2025,  2032,  2035,
    2037,  2039,  2041,  2043,  2045,  2047,  2049,  2051,  2053,  2055,
    2057,  2060,  2063,  2065,  2068,  2070,  2073,  2077,  2080,  2082,
    2084,  2086,  2088,  2090,  2092,  2094,  2097,  2098,  2100,  2102,
    2108,  2109,  2113,  2114,  2117,  2121,  2122,  2124,  2127,  2129,
    2131,  2133,  2135,  2139,  2143,  2147,  2151,  2152,  2154,  2155,
    2157,  2158,  2160,  2163,  2165,  2167,  2170,  2173,  2177,  2179,
    2183,  2186,  2188,  2191,  2194,  2197,  2200,  2203,  2206,  2210,
    2213,  2216,  2219,  2220,  2224,  2227,  2230,  2232,  2234,  2237,
    2239,  2241,  2243,  2245,  2247,  2248,  2251,  2253,  2255,  2257,
    2259,  2261,  2262,  2265,  2267,  2269,  2270,  2272,  2274,  2277,
    2280,  2282,  2285,  2288,  2289,  2291,  2293,  2295,  2299,  2301,
    2305,  2306,  2308,  2309,  2314,  2316,  2318,  2320,  2321,  2323,
    2326,  2328,  2330,  2333,  2335,  2339,  2343,  2345,  2347,  2348,
    2351,  2352,  2354,  2360,  2361,  2365,  2369,  2371,  2372,  2375,
    2378,  2381,  2382,  2386,  2390,  2397,  2404,  2406,  2408,  2411,
    2414,  2417,  2419,  2422,  2425,  2427,  2429,  2430,  2432,  2434,
    2436,  2438,  2439,  2441,  2443,  2445,  2447,  2450,  2453,  2455,
    2457,  2459,  2461,  2462,  2464,  2467,  2468,  2470,  2471,  2473,
    2474,  2476,  2478,  2481,  2483,  2486,  2488,  2491,  2494,  2497,
    2501,  2504,  2506,  2508,  2510,  2512,  2516,  2518,  2520,  2522,
    2527,  2530,  2532,  2537,  2538,  2540,  2541,  2544,  2546,  2550,
    2551,  2558,  2559,  2565,  2573,  2574,  2580,  2581,  2587,  2588,
    2594,  2595,  2600,  2601,  2612,  2616,  2621,  2625,  2629,  2637,
    2642,  2646,  2652,  2653,  2657,  2659,  2664,  2665,  2669,  2670,
    2673,  2674,  2676,  2677,  2680,  2683,  2686,  2689,  2691,  2693,
    2695,  2699,  2704,  2705,  2712,  2717,  2718,  2724,  2725,  2732,
    2737,  2741,  2743,  2751,  2755,  2757,  2759,  2760,  2766,  2767,
    2771,  2774,  2775,  2781,  2782,  2783,  2790,  2792,  2796,  2798,
    2800,  2804,  2807,  2811,  2814,  2819,  2820,  2827,  2828,  2829,
    2838,  2843,  2848,  2852,  2856,  2859,  2862,  2869,  2875,  2879,
    2885,  2887,  2889,  2891,  2893,  2895,  2896,  2898,  2900,  2903,
    2906,  2910,  2914,  2918,  2922,  2923,  2925,  2926,  2928,  2929,
    2931,  2933,  2934,  2937,  2939,  2940,  2942,  2944,  2946,  2947,
    2954,  2958,  2962,  2963,  2965,  2967,  2971,  2975,  2982,  2985,
    2988,  2993,  2994,  2998,  2999,  3003,  3004,  3008,  3009,  3013,
    3014,  3016,  3018,  3022,  3024,  3026,  3027,  3030,  3032,  3036,
    3040,  3044,  3046,  3047,  3053,  3054,  3056,  3058,  3059,  3066,
    3067,  3069,  3071,  3074,  3076,  3078,  3080,  3081,  3087,  3090,
    3091,  3097,  3098,  3100,  3102,  3105,  3107,  3109,  3111,  3113,
    3115,  3118,  3119,  3125,  3126,  3128,  3130,  3131,  3136,  3141,
    3145,  3151,  3153,  3157,  3161,  3162,  3169,  3171,  3173,  3175,
    3179,  3182,  3186,  3188,  3190,  3191,  3198,  3200,  3202,  3204,
    3208,  3212,  3217,  3218,  3225,  3226,  3229,  3230,  3235,  3236,
    3239,  3241,  3244,  3249,  3252,  3256,  3259,  3263,  3264,  3268,
    3269,  3270,  3277,  3280,  3282,  3284,  3287,  3290,  3299,  3304,
    3305,  3307,  3310,  3312,  3314,  3316,  3318,  3319,  3322,  3327,
    3331,  3333,  3335,  3339,  3344,  3345,  3346,  3347,  3350,  3353,
    3355,  3357,  3358,  3361,  3365,  3369,  3373,  3376,  3380,  3385,
    3389,  3394,  3398,  3403,  3405,  3409,  3414,  3418,  3422,  3429,
    3431,  3437,  3444,  3450,  3458,  3465,  3474,  3480,  3487,  3492,
    3497,  3503,  3507,  3512,  3514,  3518,  3522,  3526,  3530,  3534,
    3538,  3544,  3550,  3554,  3558,  3562,  3566,  3570,  3574,  3576,
    3578,  3580,  3582,  3584,  3586,  3588,  3590,  3592,  3594,  3596,
    3598,  3600,  3602,  3604,  3606,  3608,  3610,  3612,  3614,  3616,
    3618,  3622,  3624,  3626,  3628,  3630,  3634,  3637,  3640,  3643,
    3646,  3650,  3654,  3660,  3667,  3672,  3677,  3685,  3688,  3695,
    3701,  3708,  3715,  3720,  3725,  3731,  3736,  3743,  3746,  3751,
    3756,  3761,  3772,  3779,  3788,  3795,  3800,  3805,  3812,  3817,
    3822,  3827,  3834,  3839,  3847,  3855,  3863,  3870,  3877,  3884,
    3891,  3895,  3900,  3907,  3916,  3919,  3922,  3931,  3940,  3947,
    3954,  3956,  3963,  3970,  3979,  3988,  3995,  4004,  4011,  4014,
    4023,  4032,  4035,  4038,  4041,  4046,  4051,  4056,  4061,  4065,
    4074,  4081,  4090,  4095,  4102,  4107,  4112,  4117,  4124,  4133,
    4138,  4142,  4149,  4154,  4161,  4167,  4176,  4184,  4195,  4197,
    4204,  4209,  4214,  4219,  4224,  4229,  4236,  4241,  4242,  4248,
    4255,  4258,  4262,  4263,  4268,  4269,  4273,  4274,  4276,  4278,
    4282,  4287,  4292,  4298,  4303,  4308,  4313,  4319,  4324,  4325,
    4326,  4334,  4339,  4345,  4350,  4356,  4361,  4366,  4371,  4376,
    4381,  4387,  4388,  4397,  4398,  4402,  4406,  4408,  4413,  4414,
    4416,  4417,  4420,  4421,  4422,  4427,  4432,  4435,  4436,  4440,
    4443,  4447,  4450,  4452,  4455,  4457,  4460,  4462,  4465,  4468,
    4471,  4472,  4474,  4476,  4480,  4482,  4486,  4488,  4492,  4493,
    4495,  4496,  4499,  4504,  4510,  4512,  4514,  4516,  4518,  4523,
    4525,  4529,  4533,  4537,  4538,  4545,  4546,  4553,  4554,  4563,
    4568,  4569,  4578,  4579,  4590,  4597,  4598,  4607,  4608,  4619,
    4626,  4628,  4631,  4634,  4635,  4637,  4643,  4644,  4650,  4654,
    4660,  4663,  4664,  4665,  4673,  4675,  4676,  4677,  4684,  4685,
    4689,  4690,  4691,  4697,  4698,  4700,  4701,  4703,  4704,  4707,
    4711,  4715,  4717,  4719,  4720,  4728,  4729,  4737,  4739,  4742,
    4743,  4744,  4747,  4748,  4751,  4752,  4754,  4756,  4758,  4760,
    4764,  4766,  4770,  4772,  4774,  4776,  4778,  4780,  4782,  4784,
    4786,  4788,  4790,  4792,  4794,  4796,  4798,  4800,  4802,  4804,
    4806,  4808,  4810,  4812,  4814,  4816,  4818,  4820,  4821,  4823,
    4825,  4826,  4829,  4830,  4832,  4833,  4834,  4838,  4839,  4840,
    4844,  4847,  4848,  4849,  4854,  4859,  4862,  4863,  4865,  4867,
    4871,  4875,  4877,  4880,  4881,  4883,  4884,  4889,  4894,  4897,
    4898,  4900,  4902,  4903,  4905,  4906,  4908,  4911,  4913,  4917,
    4921,  4923,  4925,  4927,  4929,  4931,  4932,  4935,  4937,  4939,
    4941,  4943,  4945,  4947,  4949,  4951,  4953,  4955,  4957,  4959,
    4961,  4963,  4965,  4967,  4969,  4971,  4973,  4975,  4977,  4979,
    4981,  4982,  4983,  4990,  4991,  4993,  4997,  4999,  5000,  5003,
    5007,  5009,  5012,  5014,  5015,  5019,  5020,  5021,  5029,  5032,
    5034,  5035,  5039,  5040,  5048,  5049,  5050,  5059,  5064,  5071,
    5076,  5081,  5086,  5087,  5094,  5099,  5104,  5109,  5115,  5120,
    5125,  5127,  5131,  5133,  5136,  5138,  5142,  5144,  5145,  5148,
    5149,  5151,  5152,  5154,  5156,  5159,  5163,  5165,  5167,  5168,
    5169,  5178,  5179,  5180,  5187,  5188,  5190,  5192,  5194,  5196,
    5198,  5201,  5203,  5205,  5207,  5211,  5216,  5217,  5221,  5225,
    5227,  5230,  5233,  5234,  5238,  5239,  5245,  5249,  5251,  5255,
    5257,  5261,  5263,  5265,  5266,  5268,  5269,  5274,  5275,  5277,
    5281,  5283,  5285,  5287,  5288,  5289,  5296,  5297,  5298,  5310,
    5314,  5316,  5320,  5324,  5326,  5330,  5331,  5333,  5334,  5339,
    5340,  5348,  5349,  5355,  5356,  5363,  5365,  5369,  5372,  5377,
    5378,  5381,  5382,  5385,  5387,  5389,  5391,  5392,  5397,  5398,
    5400,  5401,  5403,  5405,  5409,  5411,  5413,  5416,  5419,  5422,
    5424,  5426,  5428,  5430,  5431,  5435,  5436,  5440,  5443,  5448,
    5453,  5457,  5462,  5467,  5469,  5473,  5477,  5484,  5487,  5490,
    5491,  5498,  5499,  5506,  5512,  5515,  5517,  5523,  5529,  5532,
    5535,  5537,  5542,  5546,  5549,  5553,  5556,  5559,  5561,  5565,
    5570,  5574,  5578,  5581,  5584,  5588,  5592,  5595,  5598,  5601,
    5604,  5607,  5611,  5615,  5619,  5623,  5627,  5631,  5635,  5639,
    5641,  5643,  5645,  5647,  5649,  5650,  5652,  5653,  5656,  5657,
    5659,  5661,  5663,  5664,  5667,  5668,  5671,  5672,  5675,  5678,
    5679,  5684,  5685,  5690,  5692,  5694,  5696,  5698,  5700,  5702,
    5704,  5705,  5707,  5709,  5713,  5714,  5716,  5718,  5719,  5724,
    5725,  5726,  5732,  5734,  5735,  5739,  5740,  5744,  5748,  5750,
    5753,  5756,  5759,  5762,  5765,  5768,  5771,  5773,  5775,  5777,
    5779,  5781,  5783,  5785,  5787,  5789,  5791,  5793,  5795,  5796,
    5798,  5799,  5803,  5807,  5809,  5810,  5814,  5816,  5819,  5821,
    5822,  5824,  5825,  5829,  5833,  5837,  5841,  5844,  5847,  5850,
    5853,  5857,  5858,  5860,  5862,  5865,  5866,  5867,  5868,  5869,
    5892,  5894,  5896,  5897,  5899,  5900,  5902,  5904,  5905,  5907,
    5909,  5910,  5913,  5916,  5918,  5922,  5927,  5931,  5935,  5936,
    5939,  5942,  5944,  5948,  5952,  5953,  5958,  5959,  5963,  5965,
    5967,  5968,  5972,  5975,  5979,  5981,  5983,  5986,  5987,  5990,
    5994,  5996,  6002,  6004,  6006,  6009,  6012,  6014,  6016,  6018,
    6020,  6022,  6025,  6028,  6030,  6032,  6034,  6036,  6038,  6040,
    6042,  6044,  6047,  6050,  6052,  6054,  6056,  6058,  6060,  6063,
    6066,  6069,  6071,  6073,  6077,  6083,  6085,  6087,  6089,  6091,
    6093,  6097,  6102,  6108,  6110,  6116,  6120,  6123,  6125,  6129,
    6132,  6135,  6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,
    6156,  6158,  6160,  6162,  6164,  6166,  6168,  6170,  6174,  6177,
    6179,  6181,  6183,  6185,  6187,  6189,  6191,  6193,  6195,  6197,
    6199,  6201,  6203,  6205,  6207,  6209,  6211,  6213,  6215,  6217,
    6219,  6221,  6223,  6225,  6227,  6229,  6231,  6233,  6235,  6237,
    6239,  6241,  6243,  6245,  6247,  6249,  6251,  6253,  6255,  6257,
    6259,  6261,  6263,  6265,  6267,  6269,  6271,  6273,  6275,  6277,
    6279,  6281,  6283,  6285,  6287,  6289,  6291,  6293,  6295,  6297,
    6299,  6301,  6303,  6305,  6307,  6309,  6311,  6313,  6315,  6317,
    6319,  6321,  6323,  6325,  6327,  6329,  6331,  6333,  6335,  6337,
    6339,  6341,  6343,  6345,  6347,  6349,  6351,  6353,  6355,  6357,
    6359,  6361,  6363,  6365,  6367,  6369,  6371,  6373,  6375,  6377,
    6379,  6381,  6383,  6385,  6387,  6389,  6391,  6393,  6395,  6397,
    6399,  6401,  6403,  6405,  6407,  6409,  6411,  6413,  6415,  6417,
    6419,  6421,  6423,  6425,  6427,  6429,  6431,  6433,  6435,  6437,
    6439,  6441,  6443,  6445,  6447,  6449,  6451,  6453,  6455,  6457,
    6459,  6461,  6463,  6465,  6467,  6469,  6471,  6473,  6475,  6477,
    6479,  6481,  6483,  6485,  6487,  6489,  6491,  6493,  6495,  6497,
    6499,  6501,  6503,  6505,  6507,  6509,  6511,  6513,  6515,  6517,
    6519,  6521,  6523,  6525,  6527,  6529,  6531,  6533,  6535,  6537,
    6539,  6541,  6543,  6545,  6547,  6549,  6551,  6553,  6555,  6557,
    6559,  6561,  6563,  6565,  6567,  6569,  6571,  6573,  6575,  6577,
    6579,  6581,  6583,  6585,  6587,  6589,  6591,  6593,  6595,  6597,
    6599,  6601,  6603,  6605,  6607,  6609,  6611,  6613,  6615,  6617,
    6619,  6621,  6623,  6625,  6627,  6629,  6631,  6633,  6635,  6637,
    6639,  6641,  6643,  6645,  6647,  6649,  6651,  6653,  6655,  6657,
    6659,  6661,  6663,  6665,  6667,  6669,  6671,  6673,  6675,  6677,
    6679,  6681,  6683,  6685,  6687,  6689,  6691,  6693,  6695,  6697,
    6699,  6701,  6703,  6705,  6707,  6709,  6711,  6713,  6715,  6717,
    6719,  6721,  6723,  6725,  6727,  6729,  6731,  6733,  6735,  6737,
    6739,  6741,  6743,  6745,  6747,  6749,  6751,  6753,  6755,  6757,
    6759,  6761,  6763,  6765,  6767,  6769,  6771,  6773,  6775,  6777,
    6779,  6781,  6783,  6785,  6787,  6789,  6791,  6793,  6795,  6797,
    6799,  6801,  6803,  6805,  6807,  6809,  6811,  6813,  6815,  6817,
    6819,  6821,  6823,  6825,  6827,  6829,  6831,  6833,  6835,  6837,
    6839,  6841,  6843,  6845,  6847,  6849,  6851,  6853,  6855,  6857,
    6859,  6861,  6863,  6865,  6867,  6869,  6871,  6873,  6875,  6877,
    6879,  6881,  6883,  6885,  6887,  6889,  6891,  6893,  6895,  6897,
    6899,  6901,  6903,  6905,  6907,  6909,  6911,  6913,  6914,  6918,
    6919,  6926,  6928,  6932,  6933,  6937,  6938,  6942,  6943,  6947,
    6948,  6952,  6955,  6956,  6959,  6960,  6963,  6964,  6969,  6970,
    6974,  6976,  6978,  6980,  6982,  6983,  6985,  6987,  6989,  6990,
    6993,  6996,  6999,  7003,  7004,  7009,  7014,  7021,  7024,  7028,
    7032,  7036,  7042,  7044,  7048,  7052,  7054,  7056,  7060,  7064,
    7066,  7070,  7073,  7076,  7079,  7082,  7085,  7087,  7089,  7094,
    7099,  7101,  7103,  7105,  7107,  7109,  7112,  7116,  7120,  7121,
    7125,  7127,  7129,  7131,  7135,  7139,  7141,  7143,  7146,  7149,
    7152,  7154,  7156,  7161,  7165,  7166,  7174,  7176,  7179,  7181,
    7183,  7185,  7187,  7189,  7191,  7192,  7198,  7200,  7202,  7204,
    7206,  7208,  7209,  7214,  7221,  7228,  7235,  7243,  7249,  7250,
    7255,  7264,  7273,  7282,  7289,  7290,  7292,  7294,  7297,  7298,
    7300,  7302,  7306,  7307,  7311,  7312,  7316,  7317,  7321,  7322,
    7326,  7328,  7330,  7332,  7334,  7336,  7338,  7340,  7342,  7344,
    7346,  7348,  7351,  7354,  7356,  7360,  7363,  7366,  7369,  7372,
    7375,  7378,  7381,  7384,  7386,  7388,  7391,  7392,  7394,  7398,
    7400,  7403,  7406,  7409,  7411,  7415,  7419,  7421,  7423,  7427,
    7429,  7433,  7438,  7444,  7449,  7456,  7458,  7459,  7463,  7467,
    7469,  7471,  7472,  7475,  7478,  7481,  7484,  7485,  7488,  7489,
    7493,  7496,  7498,  7501,  7504,  7507,  7510,  7513,  7514,  7518,
    7519,  7521,  7522,  7526,  7529,  7530,  7532,  7535,  7536,  7538,
    7543,  7548,  7554,  7557,  7561,  7562,  7564,  7565,  7570,  7571,
    7573,  7575,  7576,  7578,  7579,  7582,  7585,  7587,  7588,  7590,
    7592,  7595,  7599,  7602,  7603,  7610,  7614,  7615,  7616,  7617,
    7619,  7622,  7624,  7626,  7628,  7630,  7632,  7634,  7636,  7638,
    7640,  7643,  7646,  7650,  7652,  7654,  7656,  7658,  7660,  7662,
    7664,  7666,  7668,  7670,  7672,  7674,  7676,  7677,  7681,  7683,
    7686,  7688,  7691,  7695,  7699,  7703,  7704,  7708,  7712,  7713,
    7721,  7722,  7726,  7728,  7732,  7733,  7737,  7738,  7742,  7747,
    7749,  7753,  7754,  7758,  7759,  7763,  7768,  7773,  7774,  7775,
    7776,  7793,  7802,  7810,  7811,  7812,  7813,  7814,  7815,  7831,
    7832,  7833,  7834,  7835,  7848,  7853,  7858,  7862,  7867,  7871,
    7874,  7876,  7880,  7886,  7888,  7890,  7891,  7893,  7895,  7896,
    7899,  7900,  7901,  7905,  7906,  7909,  7915
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     661,     0,    -1,   156,    -1,    -1,   664,   662,   656,   663,
      -1,   664,   156,    -1,    -1,   156,    -1,   665,    -1,  1546,
      -1,  1042,    -1,  1108,    -1,  1110,    -1,   718,    -1,   677,
      -1,  1111,    -1,  1100,    -1,  1552,    -1,   684,    -1,   666,
      -1,  1355,    -1,  1387,    -1,  1302,    -1,  1304,    -1,   670,
      -1,  1394,    -1,   753,    -1,  1519,    -1,  1509,    -1,   675,
      -1,  1319,    -1,  1620,    -1,  1415,    -1,  1418,    -1,  1500,
      -1,  1116,    -1,  1124,    -1,   872,    -1,  1131,    -1,   668,
      -1,  1410,    -1,  1555,    -1,  1119,    -1,  1103,    -1,  1322,
      -1,  1404,    -1,   752,    -1,  1516,    -1,  1553,    -1,  1554,
      -1,  1143,    -1,  1470,    -1,   745,    -1,  1373,    -1,  1084,
      -1,  1086,    -1,  1366,    -1,  1621,    -1,  1507,    -1,  1347,
      -1,  1417,    -1,  1612,    -1,   667,   404,  1464,    -1,   121,
      -1,   144,    -1,   404,  1464,   194,   669,    -1,  1461,    -1,
     657,  1466,    -1,    -1,   170,  1464,   671,   672,    -1,    -1,
     608,   673,    -1,   673,   652,   674,    -1,   674,    -1,   657,
    1466,    -1,    -1,   213,   676,  1466,    -1,    -1,    57,   308,
     567,   678,   679,    -1,   680,    -1,   679,   652,   680,    -1,
     292,   160,  1460,    -1,   289,   160,  1460,    -1,   309,   160,
    1460,    -1,   295,   160,  1460,    -1,   296,   160,  1283,    -1,
     290,   160,  1283,    -1,   297,   160,  1283,    -1,   291,   160,
    1283,    -1,   306,   160,  1283,    -1,   300,   160,  1460,    -1,
     299,   160,  1460,    -1,   301,   160,  1460,    -1,   302,   160,
    1460,    -1,   305,   160,  1460,    -1,   307,   160,  1283,    -1,
     303,   160,  1460,    -1,   304,   160,  1460,    -1,   310,   160,
    1447,    -1,   227,   160,   650,   681,   651,    -1,   288,   160,
    1283,    -1,   683,    -1,    -1,   682,    -1,   681,   652,   682,
      -1,  1283,    -1,   293,   160,  1460,    -1,   294,   160,  1285,
      -1,   434,   160,  1460,    -1,   435,   160,  1283,    -1,    -1,
      99,   924,   548,   927,  1456,   685,   861,    -1,    -1,    -1,
      99,  1016,   230,  1464,  1024,   370,  1456,   686,   650,  1037,
     651,  1025,   687,  1076,    -1,    -1,    -1,    99,  1021,   230,
    1464,  1023,   370,  1456,   688,   650,  1037,   651,  1026,   689,
    1076,    -1,    -1,    -1,    99,  1022,   230,  1464,  1023,   370,
    1456,   690,   650,  1037,   651,  1027,   691,  1076,    -1,    -1,
      99,   108,   927,  1464,   692,   921,    -1,    -1,    99,   693,
    1574,    -1,    99,   604,   711,  1536,    -1,    99,   279,   207,
     825,    -1,    99,   546,   822,    -1,    99,   695,    -1,    99,
      84,   927,  1464,   650,   694,   651,    -1,  1442,    -1,  1191,
      -1,   480,  1466,   190,   111,   632,  1466,   375,   650,   696,
     651,    -1,   697,    -1,   696,   652,   697,    -1,   604,  1461,
      -1,   216,  1461,    -1,   108,  1461,    -1,   385,  1461,    -1,
     394,  1461,    -1,   496,  1461,    -1,   401,  1283,    -1,    -1,
    1160,   167,   927,   712,   699,   370,   469,   700,   705,   702,
     707,   143,   708,    -1,    -1,   168,  1164,  1255,   701,   703,
     704,    -1,    24,  1164,    -1,    -1,   152,    -1,   137,   370,
     492,    -1,   137,    -1,    -1,   518,  1164,    -1,    -1,   155,
    1164,    -1,    -1,   706,    -1,   370,    82,   405,    -1,   370,
      82,   358,   405,    -1,    -1,    78,  1461,    -1,    -1,   709,
     710,    -1,   770,    -1,   772,    -1,   768,    -1,   789,    -1,
     807,    -1,   809,    -1,   804,    -1,   774,    -1,   776,    -1,
     777,    -1,   778,    -1,   779,    -1,   781,    -1,    -1,  1464,
     658,  1464,    -1,  1464,    -1,    -1,   713,   715,    -1,    -1,
     714,   716,    -1,    78,  1461,    -1,   258,   514,    -1,   360,
     514,    -1,    93,   514,    -1,   420,   514,   111,    -1,   335,
     514,   111,    -1,   717,    -1,   715,    -1,   134,    -1,  1170,
     134,    -1,   514,   473,   127,    -1,   514,   473,   243,    -1,
      -1,    50,   712,   719,   720,    -1,    -1,   650,   721,   651,
      -1,    -1,   722,    -1,   722,   652,  1164,    -1,  1164,    -1,
      -1,   724,    -1,   724,   652,   726,    -1,   726,    -1,    -1,
    1464,   725,   976,    -1,    -1,   728,    -1,   728,   652,   729,
      -1,   729,    -1,   730,   725,  1464,   976,    -1,    -1,   244,
      -1,   384,    -1,   235,    -1,    -1,   731,   767,   656,    -1,
     767,   656,    -1,   732,   767,   656,    -1,    -1,   733,   734,
     656,    -1,    -1,   124,   764,   735,   976,   765,    -1,   124,
    1464,    86,   191,   741,    -1,    -1,   124,   738,   210,   191,
     736,   739,   767,    -1,    -1,   124,  1464,   105,   191,   737,
    1143,    -1,   172,    -1,    95,    -1,   740,    -1,   739,   652,
     740,    -1,   744,    -1,  1283,    -1,   742,    -1,   503,   743,
    1462,    -1,    -1,   613,    -1,   741,    -1,  1464,    -1,   504,
      -1,  1170,   193,    -1,   502,    -1,   489,   746,   748,    -1,
    1464,    -1,   742,    -1,    -1,   746,    -1,    -1,   482,   749,
      -1,   751,   160,   750,    -1,   749,   652,   751,   160,   750,
      -1,  1446,    -1,  1191,    -1,  1452,    -1,    65,    -1,   533,
      -1,    90,    -1,    92,    -1,    91,    -1,    55,    -1,   470,
      -1,   551,    -1,    77,    -1,   106,    -1,   326,    -1,   343,
      -1,   449,   747,   748,    -1,   203,   754,   135,   755,    -1,
      -1,   103,    -1,   756,    -1,    86,   760,   761,    -1,   757,
      -1,   756,   652,   757,    -1,   758,   160,   759,    -1,  1464,
      -1,   657,  1466,    -1,   365,    -1,   466,    -1,   750,    -1,
     762,    -1,   761,   652,   762,    -1,   758,   160,   763,    -1,
      65,    -1,   533,    -1,    90,    -1,    92,    -1,    91,    -1,
      55,    -1,   470,    -1,   551,    -1,    77,    -1,   106,    -1,
     326,    -1,   343,    -1,   454,    -1,  1464,    -1,   764,   652,
    1464,    -1,    -1,    -1,   125,   766,  1164,    -1,   770,    -1,
     772,    -1,   768,    -1,   789,    -1,   807,    -1,   809,    -1,
     804,    -1,   774,    -1,   776,    -1,   777,    -1,   778,    -1,
     779,    -1,   781,    -1,    -1,   225,   769,   784,   154,   225,
      -1,    -1,   771,   665,    -1,    -1,   456,   773,  1164,    -1,
      -1,   775,   813,    -1,   263,  1465,    -1,   252,  1465,    -1,
     373,  1464,    -1,    -1,   182,   782,  1464,   241,   780,   783,
      -1,    68,  1464,    -1,    -1,   354,   194,    -1,   194,    -1,
    1464,    -1,   783,   652,  1464,    -1,    -1,    -1,    -1,   785,
    1164,   786,   558,   732,   787,   788,    -1,    -1,   151,   784,
      -1,   150,   732,    -1,   790,    -1,   793,    -1,    -1,    -1,
      53,   791,  1164,   792,   795,   803,   154,    53,    -1,    -1,
      53,   794,   796,   803,   154,    53,    -1,   797,    -1,   795,
     797,    -1,   800,    -1,   796,   800,    -1,    -1,    -1,   625,
     798,  1164,   799,   558,   732,    -1,    -1,    -1,   625,   801,
    1164,   802,   558,   732,    -1,    -1,   150,   732,    -1,    -1,
    1465,   659,   805,   813,   806,    -1,    -1,  1465,    -1,    -1,
    1465,   659,   808,   811,   806,    -1,    -1,   810,   811,    -1,
      -1,    31,   812,   733,   731,   154,    -1,   285,   732,   154,
     285,    -1,    -1,    -1,   627,   814,  1164,   815,   143,   732,
     154,   627,    -1,    -1,    -1,   444,   732,   600,   816,  1164,
     817,   154,   444,    -1,    30,    -1,     8,    -1,   237,    -1,
     601,    -1,   130,    -1,   847,   849,    -1,   847,    57,   844,
     828,    -1,   847,     6,   844,   823,   832,    -1,    -1,   607,
     279,   207,  1464,    -1,   847,     6,   844,   835,    -1,   847,
     144,   844,   835,    -1,   848,   827,   838,    -1,   848,   827,
     841,    -1,     6,   845,    -1,     6,   846,    -1,    -1,   829,
     830,    -1,   831,    -1,   830,   831,    -1,   830,   652,   831,
      -1,   850,    -1,   851,    -1,   852,    -1,    -1,   833,    -1,
     834,    -1,   833,   834,    -1,   833,   652,   834,    -1,   850,
      -1,   851,    -1,   852,    -1,   853,    -1,   856,    -1,   858,
      -1,   859,    -1,   857,    -1,    -1,   836,    -1,   837,    -1,
     836,   837,    -1,   836,   652,   837,    -1,   850,    -1,   851,
      -1,   852,    -1,   858,    -1,   859,    -1,    -1,   839,    -1,
     840,    -1,   839,   840,    -1,   839,   652,   840,    -1,   850,
      -1,   854,    -1,   855,    -1,   856,    -1,   858,    -1,   859,
      -1,   857,    -1,    -1,   842,    -1,   843,    -1,   842,   843,
      -1,   842,   652,   843,    -1,   850,    -1,   858,    -1,   859,
      -1,   110,  1461,    -1,   590,  1461,    -1,   427,  1461,    -1,
    1464,    -1,  1464,    -1,   421,    -1,   423,    -1,   358,     4,
      -1,   233,  1339,   860,    -1,    25,  1339,   860,    -1,   315,
    1339,   860,    -1,   177,  1339,   860,    -1,   591,  1339,   860,
      -1,   428,  1339,   860,    -1,   355,  1339,  1284,    -1,    78,
    1339,  1461,    -1,  1380,   158,  1339,   935,    -1,   621,    -1,
     361,    -1,  1286,    -1,  1459,    -1,   650,   862,    -1,   928,
     867,   864,    -1,   268,  1456,    -1,   650,   268,  1456,   651,
      -1,   941,   651,   928,   867,   864,    -1,    -1,   867,   917,
     651,   863,  1559,    -1,    -1,    -1,  1426,   920,   917,   865,
    1556,    -1,    -1,  1426,   920,   650,   917,   651,   866,  1559,
      -1,   868,    -1,    -1,   869,    -1,    -1,   391,   871,   870,
     874,    -1,    -1,    -1,   391,   873,   874,    -1,    47,   875,
     885,   886,   893,    -1,   877,   256,   878,   650,   879,   651,
      -1,    -1,   877,   211,   876,   883,    -1,   419,   883,    -1,
     419,   882,    -1,   273,   883,    -1,   273,   882,    -1,    -1,
     270,    -1,    -1,    11,   160,  1284,    -1,    -1,   880,    -1,
     881,    -1,   880,   652,   881,    -1,  1464,    -1,    74,   650,
     879,   651,    -1,   650,  1160,   891,  1161,   651,    -1,   650,
    1160,   891,  1161,   651,    -1,    -1,   392,  1284,    -1,    -1,
      -1,   537,    47,   877,   211,   884,   887,   892,    -1,    -1,
     537,    47,   877,   256,   878,   650,   889,   651,   888,   892,
      -1,   890,    -1,   889,   652,   890,    -1,  1464,    -1,  1167,
      -1,    -1,   536,  1284,    -1,    -1,   650,   894,   651,    -1,
     895,    -1,   894,   652,   895,    -1,    -1,   391,   896,   897,
     898,   914,   909,    -1,  1464,    -1,    -1,    -1,   612,   265,
     557,   899,   901,    -1,    -1,   612,   244,   900,   902,    -1,
     319,    -1,   904,    -1,   904,    -1,   650,   903,   651,    -1,
     904,    -1,   903,   652,   904,    -1,    -1,    -1,   650,   905,
     907,   906,   651,    -1,   908,    -1,   907,   652,   908,    -1,
     319,    -1,  1167,    -1,    -1,   650,   910,   651,    -1,   911,
      -1,   910,   652,   911,    -1,    -1,   537,   912,   913,   914,
      -1,  1466,    -1,    -1,   915,    -1,   915,   916,    -1,   916,
      -1,   546,  1339,  1466,    -1,  1380,   158,  1339,   935,    -1,
     355,  1339,  1284,    -1,   314,  1339,  1286,    -1,   332,  1339,
    1286,    -1,   111,   136,  1339,  1461,    -1,   230,   136,  1339,
    1461,    -1,    78,  1339,  1461,    -1,    -1,    -1,   474,   918,
    1154,  1158,   919,   939,    -1,    -1,    20,    -1,    -1,   922,
      -1,   923,    -1,   922,   923,    -1,   934,    -1,   933,    -1,
      -1,   925,    -1,   926,    -1,   926,   925,    -1,   552,    -1,
      -1,   225,  1170,   171,    -1,    -1,   930,    -1,   931,    -1,
     931,   929,    -1,   931,    -1,   931,   930,    -1,   931,   652,
     930,    -1,   158,  1339,   935,    -1,   314,  1339,  1285,    -1,
     332,  1339,  1285,    -1,    27,  1339,  1283,    -1,   394,  1339,
    1461,    -1,    78,  1339,  1461,    -1,    26,  1339,  1285,    -1,
     386,  1339,  1283,    -1,   386,  1339,   125,    -1,   521,  1339,
    1283,    -1,   521,  1339,   125,    -1,   522,  1339,  1283,    -1,
     522,  1339,   125,    -1,   523,  1339,  1283,    -1,   523,  1339,
     125,    -1,    62,  1339,  1283,    -1,   550,  1339,  1283,    -1,
     129,  1339,  1283,    -1,   464,  1339,   937,    -1,    -1,   595,
    1339,   932,   650,  1403,   651,    -1,   933,    -1,   934,    -1,
     238,  1339,   938,    -1,   111,   136,  1339,  1461,    -1,   230,
     136,  1339,  1461,    -1,   546,  1464,    -1,   530,   139,    -1,
     530,   324,    -1,    87,  1339,  1461,    -1,   255,  1339,  1283,
      -1,   988,   979,  1339,   981,    -1,   988,    72,  1339,   987,
      -1,  1466,    -1,  1466,    -1,   125,    -1,   185,    -1,   148,
      -1,    83,    -1,   429,    -1,    81,    -1,   568,    -1,   569,
      -1,   570,    -1,   571,    -1,   572,    -1,   573,    -1,   574,
      -1,   575,    -1,   360,    -1,   184,    -1,   259,    -1,  1278,
      -1,  1153,  1157,    -1,   532,    -1,   424,    -1,   123,    -1,
     242,    -1,   942,    -1,   943,    -1,   942,   652,   943,    -1,
     944,    -1,   945,    -1,   950,   946,    -1,   950,  1005,    -1,
    1011,  1039,  1024,   650,  1037,   651,  1025,    -1,  1021,  1014,
    1039,  1023,   650,  1037,   651,  1026,    -1,  1022,  1014,  1039,
    1023,   650,  1037,   651,  1027,    -1,   948,  1012,  1039,  1024,
     650,  1037,   651,  1025,    -1,   948,   190,   256,  1039,   650,
    1037,   651,  1005,    -1,   948,   947,    -1,    -1,   947,    -1,
      63,   650,  1164,   651,    -1,    -1,   949,    -1,    89,  1039,
      -1,    -1,  1455,   951,   952,   972,    -1,   960,   970,   966,
      -1,   961,   971,   966,    -1,   187,   962,   966,    -1,    39,
      -1,    39,   969,    -1,    44,    -1,    43,    -1,   956,   969,
     991,    -1,   956,   991,    -1,   957,   969,   992,    -1,   957,
     992,    -1,    34,   969,    -1,    34,    -1,   958,   969,   991,
      -1,   959,   969,   992,    -1,   614,   969,    -1,   639,   970,
     966,    -1,   115,    -1,   563,   964,    -1,   560,   964,    -1,
     112,   964,    -1,   564,    -1,    41,   970,    -1,   955,    -1,
     320,    -1,   281,    -1,   284,   614,    -1,   284,   958,   991,
      -1,   566,   991,    -1,   556,   970,   991,    -1,   322,   991,
      -1,   282,   991,    -1,   123,   962,   966,    -1,   366,   962,
     966,    -1,   185,   962,   966,    -1,    -1,   159,   953,   650,
    1041,   651,   991,    -1,    -1,   482,   954,   650,  1041,   651,
     991,    -1,   284,   991,    -1,   478,    -1,   201,    -1,   200,
      -1,   399,    -1,   340,    -1,   272,    -1,   339,    -1,   400,
      -1,   341,    -1,    61,    -1,   349,    -1,   346,    61,    -1,
     956,   618,    -1,   615,    -1,   346,   615,    -1,   367,    -1,
     349,   615,    -1,   346,    61,   618,    -1,   349,   618,    -1,
     242,    -1,   565,    -1,   494,    -1,   321,    -1,    33,    -1,
     424,    -1,   142,    -1,   142,   403,    -1,    -1,   969,    -1,
     963,    -1,   650,   364,   652,   364,   651,    -1,    -1,   650,
     364,   651,    -1,    -1,   650,   651,    -1,   650,   364,   651,
      -1,    -1,   967,    -1,   967,   968,    -1,   968,    -1,   490,
      -1,   599,    -1,   640,    -1,   650,   283,   651,    -1,   650,
     586,   651,    -1,   650,   122,   651,    -1,   650,   364,   651,
      -1,    -1,   969,    -1,    -1,   963,    -1,    -1,   973,    -1,
     973,   974,    -1,   974,    -1,   363,    -1,  1170,   363,    -1,
     125,   978,    -1,   370,   601,   977,    -1,    26,    -1,   478,
     125,   613,    -1,  1004,   256,    -1,  1017,    -1,  1017,   256,
      -1,    78,  1461,    -1,    72,   985,    -1,    76,   125,    -1,
      76,   185,    -1,    76,   148,    -1,    76,    83,   975,    -1,
     530,   125,    -1,   530,   139,    -1,   530,   324,    -1,    -1,
     628,    84,  1464,    -1,   952,   986,    -1,   359,   965,    -1,
     977,    -1,  1445,    -1,    61,   482,    -1,    60,    -1,  1466,
      -1,    34,    -1,   980,    -1,   125,    -1,    -1,   979,   981,
      -1,  1466,    -1,    34,    -1,   983,    -1,   125,    -1,  1466,
      -1,    -1,    72,   987,    -1,   985,    -1,   125,    -1,    -1,
     125,    -1,    22,    -1,    34,    22,    -1,    22,    34,    -1,
     593,    -1,   593,    34,    -1,    34,   593,    -1,    -1,   989,
      -1,   990,    -1,    48,    -1,   979,   980,   992,    -1,    34,
      -1,    34,   979,   980,    -1,    -1,    34,    -1,    -1,   650,
    1284,   994,   651,    -1,    21,    -1,   131,    -1,   457,    -1,
      -1,   995,    -1,   995,   996,    -1,   996,    -1,  1284,    -1,
     998,   997,    -1,   999,    -1,  1000,   652,   999,    -1,   998,
     643,   998,    -1,  1000,    -1,  1001,    -1,    -1,   266,  1002,
      -1,    -1,   407,    -1,   430,  1456,  1006,  1008,  1009,    -1,
      -1,   650,  1007,   651,    -1,  1007,   652,  1464,    -1,  1464,
      -1,    -1,   311,   195,    -1,   311,   390,    -1,   311,   491,
      -1,    -1,   370,   601,  1010,    -1,   370,   130,  1010,    -1,
     370,   601,  1010,   370,   130,  1010,    -1,   370,   130,  1010,
     370,   601,  1010,    -1,   452,    -1,    51,    -1,   482,   363,
      -1,   360,     5,    -1,   482,   125,    -1,  1013,    -1,   407,
     256,    -1,  1017,  1014,    -1,   256,    -1,   230,    -1,    -1,
    1013,    -1,   254,    -1,   230,    -1,   229,    -1,    -1,  1017,
      -1,  1020,    -1,  1018,    -1,  1019,    -1,  1019,  1020,    -1,
    1020,  1019,    -1,   596,    -1,    69,    -1,   196,    -1,   500,
      -1,    -1,  1023,    -1,  1023,  1031,    -1,    -1,  1028,    -1,
      -1,  1030,    -1,    -1,  1029,    -1,  1033,    -1,  1028,  1033,
      -1,  1034,    -1,  1029,  1034,    -1,  1035,    -1,  1030,  1035,
      -1,   608,  1036,    -1,   584,  1036,    -1,   255,  1339,  1283,
      -1,    78,  1461,    -1,  1032,    -1,  1031,    -1,  1032,    -1,
    1032,    -1,   628,   389,  1459,    -1,    46,    -1,   467,    -1,
     211,    -1,  1037,   652,  1038,  1276,    -1,  1038,  1276,    -1,
    1464,    -1,  1464,   650,   364,   651,    -1,    -1,  1455,    -1,
      -1,   658,  1464,    -1,  1443,    -1,  1041,   652,  1443,    -1,
      -1,    13,  1080,   548,  1456,  1043,  1055,    -1,    -1,    13,
     108,  1054,  1044,   922,    -1,    13,   108,  1464,   602,   111,
     136,   345,    -1,    -1,    13,   409,   712,  1045,   713,    -1,
      -1,    13,   197,   712,  1046,   713,    -1,    -1,    13,  1582,
    1577,  1047,  1584,    -1,    -1,    13,  1577,  1048,  1584,    -1,
      -1,    13,  1577,   167,   712,  1049,  1051,  1052,   702,   707,
    1053,    -1,    13,   546,   824,    -1,    13,   279,   207,   826,
      -1,    13,   546,   821,    -1,    13,   546,   820,    -1,    13,
     480,  1466,   375,   650,   696,   651,    -1,    13,   604,   711,
    1050,    -1,  1467,   394,   174,    -1,  1050,   652,  1467,   394,
     174,    -1,    -1,   370,   469,   700,    -1,   706,    -1,   370,
     469,   700,   706,    -1,    -1,   440,   567,   712,    -1,    -1,
     143,   708,    -1,    -1,  1464,    -1,    -1,   138,   546,    -1,
     228,   546,    -1,  1070,   868,    -1,  1070,  1059,    -1,  1059,
      -1,   869,    -1,  1061,    -1,   144,   391,  1068,    -1,   425,
     391,  1118,  1060,    -1,    -1,   374,   391,  1118,  1060,  1056,
    1118,    -1,    15,   391,  1118,  1060,    -1,    -1,    63,   391,
    1060,  1057,  1113,    -1,    -1,   442,   391,  1118,  1060,  1058,
    1105,    -1,    70,   391,  1118,  1284,    -1,   582,   391,  1060,
      -1,  1064,    -1,   169,   391,  1069,   628,   548,  1456,   871,
      -1,   439,   393,   871,    -1,    12,    -1,  1068,    -1,    -1,
       6,   391,  1118,  1062,  1063,    -1,    -1,   650,   894,   651,
      -1,   392,  1284,    -1,    -1,   441,   391,  1118,  1065,  1066,
      -1,    -1,    -1,  1068,  1067,   241,   650,   894,   651,    -1,
    1069,    -1,  1068,   652,  1069,    -1,  1464,    -1,  1072,    -1,
    1070,   652,  1072,    -1,     6,  1079,    -1,  1071,   944,  1082,
      -1,     6,   945,    -1,  1071,   650,   941,   651,    -1,    -1,
      57,  1079,  1455,  1073,   950,  1082,    -1,    -1,    -1,   336,
    1079,  1455,  1074,   952,   972,  1075,  1082,    -1,   144,  1079,
    1455,  1081,    -1,   144,   190,   256,  1455,    -1,   144,   407,
     256,    -1,   144,  1013,  1455,    -1,   137,   254,    -1,   152,
     254,    -1,    13,  1079,  1455,   482,   125,  1445,    -1,    13,
    1079,  1455,   144,   125,    -1,   440,  1083,  1456,    -1,    96,
     567,   979,   981,   986,    -1,   929,    -1,   189,    -1,  1269,
      -1,  1077,    -1,  1078,    -1,    -1,  1078,    -1,  1077,    -1,
    1078,  1077,    -1,  1077,  1078,    -1,    11,  1339,   125,    -1,
      11,  1339,  1464,    -1,   278,  1339,   125,    -1,   278,  1339,
    1464,    -1,    -1,    75,    -1,    -1,   226,    -1,    -1,   452,
      -1,    51,    -1,    -1,     8,  1464,    -1,   184,    -1,    -1,
     567,    -1,   160,    -1,    20,    -1,    -1,   519,   492,  1095,
    1085,  1098,  1090,    -1,   529,   492,  1095,    -1,   519,   577,
    1087,    -1,    -1,  1088,    -1,  1089,    -1,  1088,   652,  1089,
      -1,   628,    88,   495,    -1,   628,    88,   495,   194,   479,
    1164,    -1,   422,   372,    -1,   422,   633,    -1,  1091,  1092,
    1093,  1094,    -1,    -1,   604,   160,  1461,    -1,    -1,   394,
     160,  1461,    -1,    -1,   126,   160,  1461,    -1,    -1,   396,
     160,  1461,    -1,    -1,  1096,    -1,  1097,    -1,  1096,   652,
    1097,    -1,   515,    -1,   436,    -1,    -1,   600,  1099,    -1,
     683,    -1,  1099,   652,   683,    -1,   507,   160,  1461,    -1,
     505,   160,  1461,    -1,   506,    -1,    -1,    62,  1503,  1101,
    1309,  1102,    -1,    -1,   418,    -1,   176,    -1,    -1,   442,
    1118,  1503,  1104,  1309,  1105,    -1,    -1,  1106,    -1,  1107,
      -1,  1107,  1106,    -1,   418,    -1,   176,    -1,   606,    -1,
      -1,    15,  1118,  1503,  1109,  1309,    -1,    35,  1461,    -1,
      -1,    63,  1503,  1112,  1309,  1113,    -1,    -1,  1114,    -1,
    1115,    -1,  1115,  1114,    -1,   418,    -1,   180,    -1,   323,
      -1,   176,    -1,    58,    -1,   191,   602,    -1,    -1,   374,
    1118,  1503,  1117,  1309,    -1,    -1,   362,    -1,   275,    -1,
      -1,   440,  1503,  1120,  1122,    -1,   440,   604,   711,  1121,
      -1,  1467,   567,  1467,    -1,  1121,   652,  1467,   567,  1467,
      -1,  1123,    -1,  1122,   652,  1123,    -1,  1456,   567,  1456,
      -1,    -1,    49,   230,  1125,  1126,   244,  1130,    -1,  1127,
      -1,  1129,    -1,  1128,    -1,  1127,   652,  1128,    -1,  1456,
    1139,    -1,  1456,  1137,  1139,    -1,  1464,    -1,   125,    -1,
      -1,   274,   230,   241,    49,  1132,  1133,    -1,  1136,    -1,
    1134,    -1,  1135,    -1,  1134,   652,  1135,    -1,  1456,  1139,
    1142,    -1,  1456,  1137,  1139,  1142,    -1,    -1,   391,   871,
    1138,   650,  1060,   651,    -1,    -1,  1140,  1141,    -1,    -1,
    1013,   650,  1251,   651,    -1,    -1,   226,   262,    -1,  1144,
      -1,   474,  1147,    -1,   650,  1145,   651,  1559,    -1,   474,
    1149,    -1,   650,  1145,   651,    -1,   474,  1230,    -1,   650,
    1146,   651,    -1,    -1,  1149,  1148,  1556,    -1,    -1,    -1,
    1150,  1154,  1158,  1151,  1152,  1157,    -1,  1272,  1278,    -1,
    1297,    -1,  1153,    -1,  1297,  1153,    -1,  1153,  1297,    -1,
     194,  1210,  1261,  1266,  1263,  1272,  1278,  1289,    -1,   194,
     145,  1261,  1278,    -1,    -1,  1155,    -1,  1155,  1156,    -1,
    1156,    -1,  1573,    -1,   512,    -1,   510,    -1,    -1,   191,
     601,    -1,   278,   244,   484,   334,    -1,  1158,   652,  1159,
      -1,  1159,    -1,   645,    -1,  1160,  1450,  1161,    -1,  1160,
    1164,  1161,  1162,    -1,    -1,    -1,    -1,    20,  1464,    -1,
      20,  1461,    -1,  1464,    -1,  1461,    -1,    -1,   650,   651,
      -1,  1164,  1168,  1164,    -1,  1164,   637,  1164,    -1,  1164,
    1169,  1164,    -1,   358,  1164,    -1,  1165,   249,   581,    -1,
    1165,   249,  1170,   581,    -1,  1165,   249,   179,    -1,  1165,
     249,  1170,   179,    -1,  1165,   249,   597,    -1,  1165,   249,
    1170,   597,    -1,  1165,    -1,  1165,   249,   363,    -1,  1165,
     249,  1170,   363,    -1,  1165,   161,  1166,    -1,  1165,  1172,
    1166,    -1,  1165,  1172,  1173,   650,  1568,   651,    -1,  1166,
      -1,  1167,   244,   650,  1568,   651,    -1,  1167,  1170,   244,
     650,  1568,   651,    -1,  1167,   244,   650,  1164,   651,    -1,
    1167,   244,   650,  1164,   652,  1203,   651,    -1,  1167,  1170,
     244,   650,  1164,   651,    -1,  1167,  1170,   244,   650,  1164,
     652,  1203,   651,    -1,  1167,    32,  1167,    17,  1166,    -1,
    1167,  1170,    32,  1167,    17,  1166,    -1,  1167,   498,   268,
    1167,    -1,  1167,   268,  1174,  1265,    -1,  1167,  1170,   268,
    1174,  1265,    -1,  1167,   431,  1167,    -1,  1167,  1170,   431,
    1167,    -1,  1167,    -1,  1167,   641,  1167,    -1,  1167,   642,
    1167,    -1,  1167,   485,  1167,    -1,  1167,   486,  1167,    -1,
    1167,   644,  1167,    -1,  1167,   643,  1167,    -1,  1167,   644,
     240,  1164,  1255,    -1,  1167,   643,   240,  1164,  1255,    -1,
    1167,   645,  1167,    -1,  1167,   646,  1167,    -1,  1167,   647,
    1167,    -1,  1167,   141,  1167,    -1,  1167,   337,  1167,    -1,
    1167,   648,  1167,    -1,  1174,    -1,   381,    -1,   378,    -1,
      17,    -1,    16,    -1,   358,    -1,   357,    -1,   653,    -1,
     357,    -1,   160,    -1,   198,    -1,   209,    -1,   260,    -1,
     287,    -1,   351,    -1,    12,    -1,    18,    -1,  1452,    -1,
    1175,    -1,  1176,    -1,  1179,    -1,  1177,    -1,  1174,    72,
    1466,    -1,  1446,    -1,  1444,    -1,  1191,    -1,  1187,    -1,
    1174,   380,  1174,    -1,   644,  1174,    -1,   643,  1174,    -1,
     649,  1174,    -1,  1171,  1174,    -1,   650,  1568,   651,    -1,
     650,  1164,   651,    -1,   650,  1164,   652,  1203,   651,    -1,
     465,   650,  1164,   652,  1203,   651,    -1,   171,   650,  1568,
     651,    -1,   654,  1464,  1164,   655,    -1,   311,  1204,     9,
     650,  1167,  1181,   651,    -1,    34,  1174,    -1,    54,   650,
    1164,    20,  1201,   651,    -1,    53,  1206,  1208,  1207,   154,
      -1,    96,   650,  1164,   652,  1201,   651,    -1,    96,   650,
    1164,   608,   980,   651,    -1,   125,   650,  1452,   651,    -1,
     612,   650,  1453,   651,    -1,   240,  1164,  1255,   644,  1164,
      -1,    61,   650,  1203,   651,    -1,    61,   650,  1203,   608,
     980,   651,    -1,   104,  1163,    -1,   115,   650,  1164,   651,
      -1,   120,   650,  1164,   651,    -1,   221,   650,  1164,   651,
      -1,   237,   650,  1164,   652,  1164,   652,  1164,   652,  1164,
     651,    -1,   240,   650,  1164,   652,  1164,   651,    -1,   240,
     650,  1164,   652,  1164,   652,  1203,   651,    -1,   264,   650,
    1164,   652,  1164,   651,    -1,   331,   650,  1164,   651,    -1,
     338,   650,  1164,   651,    -1,   459,   650,  1164,   652,  1164,
     651,    -1,   472,   650,  1164,   651,    -1,   563,   650,  1164,
     651,    -1,   560,   650,  1164,   651,    -1,   560,   650,  1164,
     652,  1164,   651,    -1,   580,   650,  1164,   651,    -1,   580,
     650,   261,  1164,   194,  1164,   651,    -1,   580,   650,   576,
    1164,   194,  1164,   651,    -1,   580,   650,    45,  1164,   194,
    1164,   651,    -1,   580,   650,   261,   194,  1164,   651,    -1,
     580,   650,   576,   194,  1164,   651,    -1,   580,   650,    45,
     194,  1164,   651,    -1,   580,   650,  1164,   194,  1164,   651,
      -1,   604,   650,   651,    -1,   639,   650,  1164,   651,    -1,
       7,   650,  1164,   652,  1164,   651,    -1,     7,   650,  1164,
     652,   240,  1164,  1255,   651,    -1,   102,  1163,    -1,   107,
     965,    -1,   113,   650,  1164,   652,   240,  1164,  1255,   651,
      -1,   114,   650,  1164,   652,   240,  1164,  1255,   651,    -1,
     178,   650,  1255,   194,  1164,   651,    -1,   202,   650,  1257,
     652,  1164,   651,    -1,   977,    -1,   402,   650,  1167,   244,
    1164,   651,    -1,   534,   650,  1164,   652,  1164,   651,    -1,
     534,   650,  1164,   652,   240,  1164,  1255,   651,    -1,   538,
     650,  1164,   652,  1164,   652,  1164,   651,    -1,   538,   650,
    1164,   652,  1164,   651,    -1,   538,   650,  1164,   194,  1164,
     191,  1164,   651,    -1,   538,   650,  1164,   194,  1164,   651,
      -1,   544,   965,    -1,   561,   650,  1256,   652,  1164,   652,
    1164,   651,    -1,   562,   650,  1256,   652,  1164,   652,  1164,
     651,    -1,   609,  1163,    -1,   611,   965,    -1,   610,   965,
      -1,    22,   650,  1164,   651,    -1,    60,   650,  1164,   651,
      -1,    70,   650,  1203,   651,    -1,    73,   650,  1164,   651,
      -1,   108,   650,   651,    -1,   225,   650,  1164,   652,  1164,
     652,  1164,   651,    -1,   192,   650,  1164,   652,  1164,   651,
      -1,   192,   650,  1164,   652,  1164,   652,  1164,   651,    -1,
     327,   650,  1164,   651,    -1,   337,   650,  1164,   652,  1164,
     651,    -1,   369,   650,  1164,   651,    -1,   394,   650,  1164,
     651,    -1,   416,   650,  1164,   651,    -1,   444,   650,  1164,
     652,  1164,   651,    -1,   445,   650,  1164,   652,  1164,   652,
    1164,   651,    -1,   457,   650,  1164,   651,    -1,   466,   650,
     651,    -1,   582,   650,  1164,   652,  1164,   651,    -1,   623,
     650,  1164,   651,    -1,   623,   650,  1164,   652,  1164,   651,
      -1,   624,   650,  1164,  1003,   651,    -1,   624,   650,  1164,
      20,    61,   993,  1003,   651,    -1,   624,   650,  1164,    20,
      34,   993,   651,    -1,   624,   650,  1164,   652,  1283,   652,
    1283,   652,  1283,   651,    -1,  1178,    -1,    93,   650,  1164,
     652,  1164,   651,    -1,   200,   650,  1203,   651,    -1,   272,
     650,  1203,   651,    -1,   339,   650,  1203,   651,    -1,   340,
     650,  1203,   651,    -1,   341,   650,  1203,   651,    -1,   399,
     650,  1164,   652,  1164,   651,    -1,   400,   650,  1203,   651,
      -1,    -1,  1459,   650,  1180,  1184,   651,    -1,  1464,   658,
    1464,   650,  1202,   651,    -1,  1182,  1183,    -1,   244,    43,
     334,    -1,    -1,   244,   347,   258,   334,    -1,    -1,   628,
     417,   173,    -1,    -1,  1185,    -1,  1186,    -1,  1185,   652,
    1186,    -1,  1160,  1164,  1161,  1162,    -1,    28,   650,  1199,
     651,    -1,    28,   650,   140,  1199,   651,    -1,    37,   650,
    1199,   651,    -1,    38,   650,  1199,   651,    -1,    40,   650,
    1199,   651,    -1,    97,   650,  1260,   645,   651,    -1,    97,
     650,  1199,   651,    -1,    -1,    -1,    97,   650,   140,  1188,
    1203,  1189,   651,    -1,   333,   650,  1199,   651,    -1,   333,
     650,   140,  1199,   651,    -1,   316,   650,  1199,   651,    -1,
     316,   650,   140,  1199,   651,    -1,   528,   650,  1199,   651,
      -1,   617,   650,  1199,   651,    -1,   527,   650,  1199,   651,
      -1,   619,   650,  1199,   651,    -1,   539,   650,  1199,   651,
      -1,   539,   650,   140,  1199,   651,    -1,    -1,   208,   650,
    1194,  1190,  1203,  1196,  1195,   651,    -1,    -1,   657,  1192,
    1193,    -1,  1466,   483,  1164,    -1,  1466,    -1,   657,  1488,
    1466,  1040,    -1,    -1,   140,    -1,    -1,   476,  1443,    -1,
      -1,    -1,   379,    47,  1197,  1198,    -1,  1198,   652,  1451,
    1276,    -1,  1451,  1276,    -1,    -1,  1260,  1200,  1164,    -1,
      34,   970,    -1,    61,   970,   991,    -1,   349,   970,    -1,
     490,    -1,   490,   242,    -1,   599,    -1,   599,   242,    -1,
     115,    -1,   563,   964,    -1,   112,   964,    -1,   123,   962,
      -1,    -1,  1203,    -1,  1164,    -1,  1203,   652,  1164,    -1,
    1205,    -1,   650,  1205,   651,    -1,  1452,    -1,  1205,   652,
    1452,    -1,    -1,  1164,    -1,    -1,   150,  1164,    -1,   625,
    1164,   558,  1164,    -1,  1208,   625,  1164,   558,  1164,    -1,
    1224,    -1,  1213,    -1,  1212,    -1,  1209,    -1,   654,  1464,
    1209,   655,    -1,  1211,    -1,  1212,   652,  1211,    -1,  1209,
    1221,  1209,    -1,  1209,   531,  1224,    -1,    -1,  1209,  1221,
    1209,   370,  1214,  1164,    -1,    -1,  1209,   531,  1224,   370,
    1215,  1164,    -1,    -1,  1209,  1221,  1209,   608,  1216,   650,
    1254,   651,    -1,  1209,   347,   253,  1224,    -1,    -1,  1209,
     264,  1240,   253,  1209,   370,  1217,  1164,    -1,    -1,  1209,
     264,  1240,   253,  1224,  1218,   608,   650,  1254,   651,    -1,
    1209,   347,   264,  1240,   253,  1224,    -1,    -1,  1209,   459,
    1240,   253,  1209,   370,  1219,  1164,    -1,    -1,  1209,   459,
    1240,   253,  1224,  1220,   608,   650,  1254,   651,    -1,  1209,
     347,   459,  1240,   253,  1224,    -1,   253,    -1,   234,   253,
      -1,   100,   253,    -1,    -1,  1223,    -1,   391,   650,  1254,
     651,   871,    -1,    -1,  1225,  1456,  1222,  1259,  1249,    -1,
    1239,  1238,  1235,    -1,   650,  1238,  1226,   651,  1259,    -1,
    1233,  1560,    -1,    -1,    -1,  1226,   595,  1564,  1227,  1565,
    1228,  1560,    -1,  1230,    -1,    -1,    -1,  1231,  1571,  1158,
    1232,   939,  1157,    -1,    -1,  1238,  1234,  1212,    -1,    -1,
      -1,  1236,  1154,  1158,  1237,   939,    -1,    -1,   474,    -1,
      -1,   382,    -1,    -1,   191,   253,    -1,   191,   379,    47,
      -1,   191,   207,    47,    -1,   189,    -1,   226,    -1,    -1,
    1242,  1013,  1241,  1244,   650,  1253,   651,    -1,    -1,   607,
    1013,  1241,  1245,   650,  1251,   651,    -1,  1243,    -1,  1246,
    1243,    -1,    -1,    -1,  1248,  1246,    -1,    -1,  1250,  1247,
      -1,    -1,  1253,    -1,  1464,    -1,   407,    -1,  1252,    -1,
    1253,   652,  1252,    -1,  1464,    -1,  1254,   652,  1464,    -1,
    1256,    -1,   116,    -1,   117,    -1,   118,    -1,   119,    -1,
     218,    -1,   219,    -1,   220,    -1,   329,    -1,   330,    -1,
     471,    -1,   638,    -1,   120,    -1,   623,    -1,   221,    -1,
     331,    -1,   338,    -1,   416,    -1,   472,    -1,   327,    -1,
     639,    -1,   115,    -1,   563,    -1,   560,    -1,   112,    -1,
      -1,    20,    -1,   160,    -1,    -1,  1258,  1464,    -1,    -1,
      12,    -1,    -1,    -1,   626,  1262,  1164,    -1,    -1,    -1,
     212,  1264,  1164,    -1,   165,  1174,    -1,    -1,    -1,   207,
      47,  1267,  1268,    -1,  1267,   652,  1451,  1276,    -1,  1451,
    1276,    -1,    -1,   629,    -1,   630,    -1,   379,    47,  1270,
      -1,  1270,   652,  1271,    -1,  1271,    -1,  1453,  1276,    -1,
      -1,  1273,    -1,    -1,   379,    47,  1274,  1275,    -1,  1275,
     652,  1451,  1276,    -1,  1451,  1276,    -1,    -1,    21,    -1,
     131,    -1,    -1,  1279,    -1,    -1,  1279,    -1,   269,  1280,
      -1,  1281,    -1,  1281,   652,  1281,    -1,  1281,   368,  1281,
      -1,  1464,    -1,  1444,    -1,   586,    -1,   283,    -1,   364,
      -1,    -1,   269,  1281,    -1,   364,    -1,   214,    -1,   283,
      -1,   586,    -1,   122,    -1,   186,    -1,   364,    -1,   214,
      -1,   283,    -1,   586,    -1,  1287,    -1,   364,    -1,   586,
      -1,   283,    -1,   122,    -1,   186,    -1,   364,    -1,   586,
      -1,   283,    -1,  1287,    -1,  1288,    -1,   122,    -1,   186,
      -1,    -1,    -1,   409,    14,  1290,   650,  1291,   651,    -1,
      -1,  1292,    -1,  1292,   652,  1292,    -1,   364,    -1,    -1,
    1294,  1295,    -1,  1295,   652,  1296,    -1,  1296,    -1,   657,
    1466,    -1,  1466,    -1,    -1,   241,  1298,  1299,    -1,    -1,
      -1,   383,  1463,  1300,   982,  1301,  1427,  1430,    -1,   146,
    1463,    -1,  1293,    -1,    -1,   143,  1303,  1203,    -1,    -1,
     144,  1315,  1503,  1314,  1305,  1309,  1081,    -1,    -1,    -1,
     144,   230,  1464,   370,  1456,  1306,  1307,  1076,    -1,   144,
     108,  1314,  1464,    -1,   144,   197,  1314,  1464,   658,  1464,
      -1,   144,   197,  1314,  1464,    -1,   144,   409,  1314,   712,
      -1,   144,   604,   711,  1535,    -1,    -1,   144,   620,  1314,
    1308,  1309,  1081,    -1,   144,   167,  1314,   712,    -1,   144,
     579,  1314,   712,    -1,   144,   546,   847,  1316,    -1,   144,
     279,   207,   848,  1316,    -1,   144,   480,  1314,  1466,    -1,
     144,    84,  1314,  1464,    -1,  1310,    -1,  1309,   652,  1310,
      -1,  1456,    -1,  1456,  1222,    -1,  1313,    -1,  1312,   652,
    1313,    -1,  1457,    -1,    -1,   225,   171,    -1,    -1,   552,
      -1,    -1,  1317,    -1,  1318,    -1,  1317,  1318,    -1,  1316,
     652,  1318,    -1,   858,    -1,   859,    -1,    -1,    -1,   237,
    1320,  1325,  1080,  1327,  1321,  1329,  1345,    -1,    -1,    -1,
     445,  1323,  1326,  1327,  1324,  1329,    -1,    -1,   286,    -1,
     128,    -1,   215,    -1,  1354,    -1,   128,    -1,   241,  1328,
      -1,  1328,    -1,  1311,    -1,  1332,    -1,   650,   651,  1332,
      -1,   650,  1331,   651,  1332,    -1,    -1,   482,  1330,  1336,
      -1,  1331,   652,  1449,    -1,  1449,    -1,   612,  1335,    -1,
     613,  1335,    -1,    -1,   917,  1333,  1556,    -1,    -1,   650,
     917,   651,  1334,  1559,    -1,  1335,   652,  1340,    -1,  1340,
      -1,  1336,   652,  1337,    -1,  1337,    -1,  1453,  1338,  1344,
      -1,   160,    -1,   483,    -1,    -1,  1338,    -1,    -1,   650,
    1341,  1342,   651,    -1,    -1,  1343,    -1,  1343,   652,  1344,
      -1,  1344,    -1,  1164,    -1,   125,    -1,    -1,    -1,   370,
     147,  1346,   256,   601,  1352,    -1,    -1,    -1,   601,  1348,
    1354,  1080,  1210,   482,  1350,  1349,  1261,  1272,  1282,    -1,
    1350,   652,  1351,    -1,  1351,    -1,  1453,  1338,  1344,    -1,
    1352,   652,  1353,    -1,  1353,    -1,  1453,  1338,  1344,    -1,
      -1,   286,    -1,    -1,   130,  1356,  1364,  1357,    -1,    -1,
     194,  1456,  1222,  1358,  1261,  1272,  1282,    -1,    -1,  1361,
    1359,   194,  1210,  1261,    -1,    -1,   194,  1312,  1360,   608,
    1210,  1261,    -1,  1362,    -1,  1361,   652,  1362,    -1,  1464,
    1363,    -1,  1464,   658,  1464,  1363,    -1,    -1,   658,   645,
      -1,    -1,  1365,  1364,    -1,   418,    -1,   286,    -1,   226,
      -1,    -1,   582,  1368,  1367,  1310,    -1,    -1,   548,    -1,
      -1,  1370,    -1,  1371,    -1,  1370,   652,  1371,    -1,    98,
      -1,   324,    -1,    42,   247,    -1,    94,   543,    -1,   387,
     181,    -1,   248,    -1,   542,    -1,   499,    -1,    12,    -1,
      -1,   191,   417,   364,    -1,    -1,   487,  1374,  1375,    -1,
     109,  1386,    -1,  1382,   545,  1381,  1386,    -1,  1382,   578,
    1381,  1386,    -1,   166,  1381,  1386,    -1,   548,   524,  1381,
    1386,    -1,   373,   545,  1381,  1386,    -1,   398,    -1,   158,
     936,  1378,    -1,   158,    12,  1378,    -1,  1382,    74,  1383,
    1456,  1381,  1386,    -1,  1379,   280,    -1,   492,   217,    -1,
      -1,    35,   166,  1384,  1385,  1376,  1277,    -1,    -1,   433,
     166,  1384,  1385,  1377,  1277,    -1,  1015,  1383,  1456,  1381,
    1261,    -1,  1380,   157,    -1,   408,    -1,    97,   650,   645,
     651,   622,    -1,    97,   650,   645,   651,   163,    -1,   622,
    1277,    -1,   163,  1277,    -1,   413,    -1,   412,  1369,  1372,
    1277,    -1,  1487,   524,  1386,    -1,  1382,   411,    -1,  1487,
     616,  1386,    -1,   979,  1386,    -1,    73,  1386,    -1,   206,
      -1,   206,   191,  1467,    -1,    99,   108,   927,  1464,    -1,
      99,   548,  1456,    -1,    99,   620,  1456,    -1,   308,   524,
      -1,   492,   524,    -1,   492,   524,   525,    -1,   492,   524,
     526,    -1,    67,  1386,    -1,   605,  1386,    -1,   559,  1386,
      -1,   549,  1386,    -1,   231,  1386,    -1,    99,   409,   712,
      -1,    99,   197,   712,    -1,    99,   579,   712,    -1,   409,
     524,  1386,    -1,   197,   524,  1386,    -1,   409,    71,   712,
      -1,   197,    71,   712,    -1,    99,   167,   712,    -1,   524,
      -1,   342,    -1,   280,    -1,   308,    -1,    34,    -1,    -1,
     530,    -1,    -1,  1383,  1464,    -1,    -1,   195,    -1,   194,
      -1,   244,    -1,    -1,   244,  1461,    -1,    -1,   194,  1285,
      -1,    -1,   268,  1461,    -1,   626,  1164,    -1,    -1,  1391,
    1456,  1388,  1393,    -1,    -1,  1391,  1392,  1389,  1390,    -1,
    1143,    -1,  1319,    -1,  1322,    -1,  1347,    -1,  1355,    -1,
     131,    -1,   132,    -1,    -1,   176,    -1,   392,    -1,   192,
     160,  1466,    -1,    -1,  1443,    -1,  1464,    -1,    -1,   188,
    1118,  1395,  1396,    -1,    -1,    -1,  1503,  1397,  1403,  1398,
    1399,    -1,  1401,    -1,    -1,   628,   422,   278,    -1,    -1,
     191,  1400,   175,    -1,  1401,   652,  1402,    -1,  1402,    -1,
     162,   280,    -1,   158,   280,    -1,   199,   280,    -1,   493,
     280,    -1,    34,   280,    -1,   432,   280,    -1,   417,    49,
      -1,   217,    -1,   408,    -1,   280,    -1,   524,    -1,    67,
      -1,   605,    -1,   559,    -1,   549,    -1,   231,    -1,   133,
      -1,   450,    -1,    59,    -1,    -1,  1309,    -1,    -1,   448,
    1405,  1406,    -1,  1406,   652,  1407,    -1,  1407,    -1,    -1,
     492,  1408,  1409,    -1,   308,    -1,   417,    49,    -1,    59,
      -1,    -1,    12,    -1,    -1,   415,  1411,  1412,    -1,  1379,
     280,  1413,    -1,    59,    30,  1286,    -1,    19,   280,  1414,
      -1,   567,  1461,    -1,    30,  1164,    -1,   567,  1461,    -1,
      30,  1164,    -1,   257,  1416,  1164,    -1,    -1,    87,    -1,
     417,    -1,   607,  1464,    -1,    -1,    -1,    -1,    -1,   274,
    1423,  1419,  1425,  1424,   232,  1463,  1420,  1426,   241,   548,
    1456,  1222,  1421,   982,  1422,  1433,  1427,  1430,  1434,  1436,
    1439,    -1,   111,    -1,   636,    -1,    -1,   275,    -1,    -1,
      85,    -1,   286,    -1,    -1,   445,    -1,   226,    -1,    -1,
      74,  1428,    -1,  1428,  1429,    -1,  1429,    -1,   554,    47,
    1443,    -1,   377,   153,    47,  1443,    -1,   153,    47,  1443,
      -1,   164,    47,  1443,    -1,    -1,   271,  1431,    -1,  1431,
    1432,    -1,  1432,    -1,   554,    47,  1443,    -1,   517,    47,
    1443,    -1,    -1,   463,   223,    47,  1443,    -1,    -1,   226,
     364,  1435,    -1,   271,    -1,   463,    -1,    -1,   650,  1437,
     651,    -1,   650,   651,    -1,  1437,   652,  1438,    -1,  1438,
      -1,  1453,    -1,   657,  1466,    -1,    -1,   482,  1440,    -1,
    1440,   652,  1441,    -1,  1441,    -1,  1453,  1338,  1160,  1344,
    1161,    -1,   555,    -1,   348,    -1,   589,   555,    -1,  1442,
    1462,    -1,  1462,    -1,   214,    -1,    36,    -1,   388,    -1,
    1446,    -1,   644,  1447,    -1,   643,  1447,    -1,  1442,    -1,
    1447,    -1,  1448,    -1,   363,    -1,   179,    -1,   581,    -1,
     214,    -1,    36,    -1,   589,   214,    -1,   589,    36,    -1,
     364,    -1,   283,    -1,   586,    -1,   122,    -1,   186,    -1,
     115,   555,    -1,   563,   555,    -1,   560,   555,    -1,  1453,
      -1,  1450,    -1,  1464,   658,   645,    -1,  1464,   658,  1464,
     658,   645,    -1,  1164,    -1,  1464,    -1,  1454,    -1,  1464,
      -1,  1454,    -1,  1464,   658,  1464,    -1,   658,  1464,   658,
    1464,    -1,  1464,   658,  1464,   658,  1464,    -1,  1464,    -1,
    1464,   658,  1464,   658,  1464,    -1,  1464,   658,  1464,    -1,
     658,  1464,    -1,  1464,    -1,  1464,   658,  1464,    -1,   658,
    1464,    -1,  1464,  1363,    -1,  1464,   658,  1464,  1363,    -1,
    1464,    -1,   222,    -1,   224,    -1,  1461,    -1,   555,    -1,
     555,    -1,   555,    -1,  1459,    -1,  1468,    -1,  1459,    -1,
    1469,    -1,  1464,    -1,  1461,    -1,   267,    -1,  1466,    -1,
    1466,   657,  1466,    -1,   104,  1163,    -1,  1469,    -1,    22,
      -1,    29,    -1,    31,    -1,    48,    -1,    49,    -1,    60,
      -1,    62,    -1,    68,    -1,    78,    -1,    80,    -1,    93,
      -1,   121,    -1,   143,    -1,   154,    -1,   170,    -1,   188,
      -1,   192,    -1,   210,    -1,   213,    -1,   216,    -1,   239,
      -1,   258,    -1,   360,    -1,   373,    -1,   375,    -1,   385,
      -1,   389,    -1,   401,    -1,   404,    -1,   439,    -1,   442,
      -1,   448,    -1,   451,    -1,   460,    -1,   468,    -1,   473,
      -1,   480,    -1,   490,    -1,   496,    -1,   492,    -1,   497,
      -1,   519,    -1,   529,    -1,   582,    -1,   593,    -1,   594,
      -1,   632,    -1,   635,    -1,   602,    -1,     5,    -1,     7,
      -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,    14,
      -1,    19,    -1,    18,    -1,    24,    -1,    26,    -1,    25,
      -1,    27,    -1,    28,    -1,    35,    -1,    39,    -1,    42,
      -1,    44,    -1,    43,    -1,    46,    -1,    52,    -1,    55,
      -1,    56,    -1,    58,    -1,    59,    -1,    64,    -1,    67,
      -1,    66,    -1,    65,    -1,    70,    -1,    71,    -1,    73,
      -1,    77,    -1,    76,    -1,    74,    -1,    79,    -1,    81,
      -1,    82,    -1,    83,    -1,    84,    -1,    85,    -1,    87,
      -1,    88,    -1,    90,    -1,    92,    -1,    91,    -1,    94,
      -1,    98,    -1,   101,    -1,   103,    -1,   106,    -1,   111,
      -1,   110,    -1,   112,    -1,   115,    -1,   120,    -1,   126,
      -1,   127,    -1,   129,    -1,   133,    -1,   135,    -1,   136,
      -1,   137,    -1,   138,    -1,   139,    -1,   146,    -1,   147,
      -1,   148,    -1,   155,    -1,   159,    -1,   158,    -1,   157,
      -1,   162,    -1,   163,    -1,   165,    -1,   167,    -1,   166,
      -1,   168,    -1,   169,    -1,   173,    -1,   174,    -1,   175,
      -1,   176,    -1,   177,    -1,   181,    -1,   180,    -1,   193,
      -1,   152,    -1,   195,    -1,   183,    -1,   184,    -1,   185,
      -1,   199,    -1,   201,    -1,   200,    -1,   202,    -1,   206,
      -1,   204,    -1,   211,    -1,   217,    -1,   221,    -1,   223,
      -1,   231,    -1,   227,    -1,   243,    -1,   228,    -1,   229,
      -1,   233,    -1,   247,    -1,   248,    -1,   250,    -1,   251,
      -1,   238,    -1,   255,    -1,   259,    -1,   262,    -1,   265,
      -1,   266,    -1,   272,    -1,   273,    -1,   275,    -1,   277,
      -1,   279,    -1,   280,    -1,   314,    -1,   308,    -1,   310,
      -1,   292,    -1,   296,    -1,   293,    -1,   294,    -1,   309,
      -1,   295,    -1,   298,    -1,   290,    -1,   297,    -1,   291,
      -1,   306,    -1,   300,    -1,   299,    -1,   301,    -1,   302,
      -1,   303,    -1,   304,    -1,   305,    -1,   288,    -1,   312,
      -1,   313,    -1,   315,    -1,   317,    -1,   318,    -1,   323,
      -1,   324,    -1,   325,    -1,   326,    -1,   327,    -1,   328,
      -1,   331,    -1,   332,    -1,   336,    -1,   334,    -1,   338,
      -1,   339,    -1,   340,    -1,   341,    -1,   342,    -1,   343,
      -1,   345,    -1,   344,    -1,   346,    -1,   349,    -1,   350,
      -1,   354,    -1,   353,    -1,   361,    -1,   355,    -1,   356,
      -1,   365,    -1,   367,    -1,   368,    -1,   369,    -1,   371,
      -1,   372,    -1,   386,    -1,   387,    -1,   390,    -1,   393,
      -1,   392,    -1,   394,    -1,   395,    -1,   396,    -1,   397,
      -1,   398,    -1,   399,    -1,   400,    -1,   405,    -1,   406,
      -1,   408,    -1,   410,    -1,   411,    -1,   412,    -1,   413,
      -1,   414,    -1,   416,    -1,   417,    -1,   418,    -1,   421,
      -1,   425,    -1,   426,    -1,   428,    -1,   427,    -1,   429,
      -1,   432,    -1,   433,    -1,   434,    -1,   435,    -1,   436,
      -1,   438,    -1,   441,    -1,   443,    -1,   446,    -1,   450,
      -1,   453,    -1,   454,    -1,   455,    -1,   457,    -1,   461,
      -1,   462,    -1,   463,    -1,   466,    -1,   464,    -1,   465,
      -1,   467,    -1,   469,    -1,   470,    -1,   472,    -1,   478,
      -1,   477,    -1,   479,    -1,   491,    -1,   484,    -1,   488,
      -1,   493,    -1,   495,    -1,   498,    -1,   499,    -1,   505,
      -1,   506,    -1,   507,    -1,   510,    -1,   509,    -1,   512,
      -1,   515,    -1,   518,    -1,   521,    -1,   522,    -1,   523,
      -1,   520,    -1,   524,    -1,   530,    -1,   532,    -1,   533,
      -1,   534,    -1,   535,    -1,   537,    -1,   536,    -1,   540,
      -1,   541,    -1,   542,    -1,   543,    -1,   549,    -1,   551,
      -1,   545,    -1,   550,    -1,   546,    -1,   552,    -1,   553,
      -1,   556,    -1,   557,    -1,   559,    -1,   577,    -1,   578,
      -1,   560,    -1,   561,    -1,   562,    -1,   563,    -1,   568,
      -1,   569,    -1,   570,    -1,   571,    -1,   572,    -1,   574,
      -1,   573,    -1,   575,    -1,   583,    -1,   584,    -1,   585,
      -1,   197,    -1,   587,    -1,   588,    -1,   591,    -1,   590,
      -1,   597,    -1,   600,    -1,   604,    -1,   605,    -1,   606,
      -1,   616,    -1,   620,    -1,   613,    -1,   622,    -1,   621,
      -1,   623,    -1,   631,    -1,   624,    -1,   634,    -1,   636,
      -1,   639,    -1,    -1,   482,  1471,  1474,    -1,    -1,   482,
     520,  1472,  1473,   191,   665,    -1,  1489,    -1,  1473,   652,
    1489,    -1,    -1,  1490,  1475,  1480,    -1,    -1,   577,  1476,
    1493,    -1,    -1,  1486,  1477,  1478,    -1,    -1,  1489,  1479,
    1480,    -1,   577,  1493,    -1,    -1,   652,  1481,    -1,    -1,
    1482,  1484,    -1,    -1,  1481,   652,  1483,  1484,    -1,    -1,
    1486,  1485,  1489,    -1,  1490,    -1,   204,    -1,   275,    -1,
     479,    -1,    -1,   204,    -1,   275,    -1,   479,    -1,    -1,
     204,   658,    -1,   275,   658,    -1,   479,   658,    -1,  1492,
    1338,  1499,    -1,    -1,  1492,  1338,  1491,  1499,    -1,   657,
    1466,  1338,  1164,    -1,   657,   657,  1488,  1492,  1338,  1499,
      -1,   979,   984,    -1,   344,  1338,  1164,    -1,   344,   981,
     986,    -1,   394,  1338,  1498,    -1,   394,   191,  1467,  1338,
    1498,    -1,  1464,    -1,  1464,   658,  1464,    -1,   125,   658,
    1464,    -1,  1494,    -1,  1495,    -1,  1494,   652,  1495,    -1,
    1495,   652,  1494,    -1,  1496,    -1,   250,   266,  1497,    -1,
     422,   372,    -1,   422,   633,    -1,   422,   587,    -1,   422,
      79,    -1,   443,   422,    -1,   477,    -1,   555,    -1,   394,
     650,   555,   651,    -1,   369,   650,   555,   651,    -1,  1164,
      -1,   125,    -1,   370,    -1,    12,    -1,    34,    -1,   278,
    1501,    -1,    35,   191,    29,    -1,   545,   191,    29,    -1,
      -1,  1503,  1502,  1504,    -1,   548,    -1,   545,    -1,  1505,
      -1,  1504,   652,  1505,    -1,  1456,  1259,  1506,    -1,   422,
      -1,   633,    -1,   286,   633,    -1,   422,   275,    -1,   598,
    1508,    -1,    35,    -1,  1503,    -1,   210,  1456,   373,  1259,
      -1,   210,  1458,    68,    -1,    -1,   210,  1458,   422,  1510,
    1511,  1261,  1278,    -1,  1512,    -1,  1464,  1513,    -1,   184,
      -1,   354,    -1,   184,    -1,   354,    -1,   406,    -1,   259,
      -1,    -1,  1515,  1514,   650,  1343,   651,    -1,   160,    -1,
     198,    -1,   260,    -1,   209,    -1,   287,    -1,    -1,   458,
     711,  1517,  1518,    -1,  1523,   370,  1522,  1534,   194,  1536,
      -1,  1523,   370,   197,  1534,   194,  1536,    -1,  1523,   370,
     409,  1534,   194,  1536,    -1,    12,  1524,   652,   205,   376,
     194,  1536,    -1,   414,   370,  1467,   194,  1536,    -1,    -1,
     205,   711,  1520,  1521,    -1,  1523,   370,  1522,  1534,   567,
    1536,  1541,  1542,    -1,  1523,   370,   197,  1534,   567,  1536,
    1541,  1542,    -1,  1523,   370,   409,  1534,   567,  1536,  1541,
    1542,    -1,   414,   370,  1467,   567,  1536,  1543,    -1,    -1,
     548,    -1,  1525,    -1,    12,  1524,    -1,    -1,   408,    -1,
    1526,    -1,  1525,   652,  1526,    -1,    -1,   474,  1527,  1538,
      -1,    -1,   237,  1528,  1538,    -1,    -1,   601,  1529,  1538,
      -1,    -1,   430,  1530,  1538,    -1,   130,    -1,   603,    -1,
     230,    -1,    13,    -1,    99,    -1,   144,    -1,   170,    -1,
     438,    -1,   488,    -1,   410,    -1,   183,    -1,   205,   376,
      -1,   487,   109,    -1,   540,    -1,    99,   552,   545,    -1,
     278,   545,    -1,   446,   492,    -1,   446,    66,    -1,    99,
     620,    -1,   487,   620,    -1,    99,   462,    -1,    13,   462,
      -1,    99,   604,    -1,   167,    -1,   579,    -1,    99,   546,
      -1,    -1,    17,    -1,  1533,  1531,  1532,    -1,  1533,    -1,
     535,   555,    -1,   251,   555,    -1,    64,   555,    -1,   645,
      -1,  1464,   658,   645,    -1,   645,   658,   645,    -1,  1456,
      -1,  1467,    -1,  1535,   652,  1467,    -1,  1537,    -1,  1536,
     652,  1537,    -1,  1467,   223,    47,   555,    -1,  1467,   223,
      47,   394,   555,    -1,  1467,   223,   628,  1466,    -1,  1467,
     223,   628,  1466,    20,  1461,    -1,  1467,    -1,    -1,   650,
    1539,   651,    -1,  1539,   652,  1540,    -1,  1540,    -1,  1464,
      -1,    -1,   447,  1532,    -1,   447,   516,    -1,   447,   634,
      -1,   447,   356,    -1,    -1,   628,  1544,    -1,    -1,   628,
     205,   376,    -1,  1544,  1545,    -1,  1545,    -1,   205,   376,
      -1,   313,  1283,    -1,   317,  1283,    -1,   312,  1283,    -1,
     318,  1283,    -1,    -1,    31,  1547,  1548,    -1,    -1,   631,
      -1,    -1,    17,   360,    56,    -1,    17,    56,    -1,    -1,
     437,    -1,   360,   437,    -1,    -1,   468,    -1,    80,  1548,
    1549,  1550,    -1,   460,  1548,  1549,  1550,    -1,   460,  1548,
     567,  1551,  1464,    -1,   468,  1464,    -1,   437,   468,  1464,
      -1,    -1,  1557,    -1,    -1,   595,  1564,  1558,  1144,    -1,
      -1,  1557,    -1,  1561,    -1,    -1,  1561,    -1,    -1,  1562,
    1563,    -1,  1273,  1277,    -1,  1279,    -1,    -1,   140,    -1,
      12,    -1,   474,  1229,    -1,   650,  1146,   651,    -1,  1565,
    1560,    -1,    -1,  1566,   595,  1564,  1567,  1565,  1560,    -1,
    1569,  1566,  1570,    -1,    -1,    -1,    -1,  1572,    -1,  1572,
    1573,    -1,  1573,    -1,   531,    -1,   215,    -1,   140,    -1,
     513,    -1,   508,    -1,   509,    -1,   511,    -1,    12,    -1,
    1579,  1575,    -1,  1578,  1576,    -1,  1580,  1577,  1584,    -1,
    1584,    -1,  1596,    -1,  1607,    -1,  1601,    -1,   698,    -1,
    1584,    -1,  1596,    -1,  1607,    -1,  1601,    -1,  1600,    -1,
     698,    -1,  1578,    -1,  1579,    -1,    -1,   127,   160,  1467,
      -1,  1581,    -1,  1581,  1582,    -1,  1582,    -1,   381,   445,
      -1,    11,   160,   588,    -1,    11,   160,   325,    -1,    11,
     160,   553,    -1,    -1,   514,   473,   127,    -1,   514,   473,
     243,    -1,    -1,  1583,   620,  1456,  1585,  1586,    20,  1588,
      -1,    -1,   650,  1587,   651,    -1,  1464,    -1,  1587,   652,
    1464,    -1,    -1,  1589,  1590,  1595,    -1,    -1,  1593,  1591,
    1556,    -1,   650,  1592,   651,  1559,    -1,  1593,    -1,   650,
    1592,   651,    -1,    -1,   474,  1594,  1149,    -1,    -1,   628,
      63,   376,    -1,   628,    52,    63,   376,    -1,   628,   275,
      63,   376,    -1,    -1,    -1,    -1,   579,  1160,   712,   818,
     819,   370,  1160,  1597,  1456,   191,  1160,  1598,   149,   465,
    1599,   767,    -1,    10,  1160,   197,  1464,   455,   940,   497,
    1461,    -1,  1160,   197,  1464,   455,   940,   497,  1461,    -1,
      -1,    -1,    -1,    -1,    -1,  1160,   197,   712,   650,  1602,
     723,   651,  1603,   455,  1604,   976,  1605,   714,  1606,   767,
      -1,    -1,    -1,    -1,    -1,   409,  1160,   712,  1608,   650,
    1609,   727,   651,  1610,   714,  1611,   767,    -1,   635,  1614,
    1613,  1615,    -1,   635,   154,  1613,  1617,    -1,   635,   404,
    1613,    -1,   635,    80,  1613,  1616,    -1,   635,   460,  1613,
      -1,   635,   426,    -1,  1443,    -1,  1443,   652,  1443,    -1,
    1443,   652,  1443,   652,  1283,    -1,    31,    -1,   519,    -1,
      -1,   253,    -1,   453,    -1,    -1,   371,   395,    -1,    -1,
      -1,   541,  1618,  1619,    -1,    -1,   191,   328,    -1,   239,
     397,  1464,   497,  1461,    -1,   594,   397,  1464,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1995,  1995,  2008,  2007,  2032,  2039,  2041,  2045,  2046,
    2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,
    2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,
    2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,
    2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,
    2091,  2092,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,
    2101,  2102,  2106,  2116,  2117,  2121,  2141,  2148,  2159,  2158,
    2169,  2171,  2175,  2176,  2180,  2193,  2192,  2212,  2211,  2229,
    2230,  2234,  2238,  2242,  2246,  2251,  2255,  2259,  2264,  2277,
    2282,  2286,  2290,  2294,  2298,  2302,  2307,  2311,  2316,  2347,
    2352,  2359,  2362,  2364,  2365,  2369,  2383,  2387,  2403,  2407,
    2420,  2419,  2465,  2470,  2464,  2477,  2482,  2475,  2489,  2494,
    2487,  2500,  2499,  2512,  2511,  2519,  2523,  2527,  2531,  2535,
    2549,  2551,  2571,  2589,  2590,  2594,  2598,  2602,  2606,  2610,
    2615,  2619,  2627,  2626,  2658,  2657,  2664,  2671,  2672,  2678,
    2684,  2694,  2700,  2706,  2708,  2715,  2716,  2720,  2726,  2735,
    2736,  2744,  2744,  2799,  2800,  2801,  2802,  2803,  2804,  2805,
    2806,  2807,  2808,  2809,  2810,  2811,  2816,  2830,  2844,  2863,
    2864,  2868,  2869,  2874,  2876,  2878,  2880,  2882,  2884,  2886,
    2892,  2893,  2894,  2898,  2902,  2910,  2909,  2922,  2924,  2927,
    2929,  2933,  2937,  2944,  2946,  2950,  2951,  2956,  2975,  3005,
    3007,  3011,  3012,  3016,  3045,  3046,  3047,  3048,  3052,  3053,
    3057,  3058,  3063,  3066,  3093,  3092,  3176,  3193,  3192,  3267,
    3266,  3339,  3340,  3345,  3347,  3352,  3375,  3386,  3390,  3412,
    3413,  3417,  3421,  3434,  3440,  3446,  3455,  3470,  3496,  3502,
    3503,  3509,  3512,  3516,  3524,  3544,  3546,  3564,  3570,  3572,
    3574,  3576,  3578,  3580,  3582,  3584,  3586,  3588,  3590,  3592,
    3597,  3613,  3629,  3630,  3635,  3641,  3650,  3656,  3665,  3673,
    3702,  3711,  3713,  3722,  3727,  3733,  3742,  3750,  3752,  3754,
    3756,  3758,  3760,  3762,  3764,  3766,  3768,  3770,  3772,  3774,
    3779,  3799,  3823,  3825,  3824,  3831,  3832,  3833,  3834,  3835,
    3836,  3837,  3838,  3839,  3840,  3841,  3842,  3843,  3848,  3847,
    3858,  3858,  3915,  3914,  3971,  3971,  3993,  4052,  4102,  4127,
    4126,  4152,  4175,  4177,  4178,  4182,  4200,  4221,  4230,  4266,
    4221,  4295,  4297,  4298,  4302,  4303,  4308,  4319,  4307,  4370,
    4369,  4383,  4384,  4388,  4389,  4394,  4403,  4393,  4452,  4461,
    4451,  4505,  4518,  4523,  4522,  4560,  4561,  4566,  4565,  4599,
    4599,  4618,  4617,  4667,  4684,  4693,  4683,  4747,  4756,  4746,
    4796,  4798,  4803,  4805,  4807,  4824,  4829,  4835,  4842,  4843,
    4851,  4857,  4866,  4872,  4878,  4879,  4883,  4883,  4888,  4889,
    4890,  4894,  4895,  4896,  4899,  4901,  4905,  4906,  4907,  4911,
    4912,  4913,  4914,  4915,  4916,  4917,  4918,  4921,  4923,  4927,
    4928,  4929,  4933,  4934,  4935,  4936,  4937,  4940,  4942,  4946,
    4947,  4948,  4952,  4953,  4954,  4955,  4956,  4957,  4958,  4961,
    4963,  4967,  4968,  4969,  4973,  4974,  4975,  4980,  4988,  4996,
    5004,  5016,  5028,  5033,  5038,  5046,  5054,  5062,  5070,  5078,
    5086,  5094,  5107,  5120,  5134,  5139,  5152,  5153,  5204,  5205,
    5208,  5223,  5241,  5246,  5244,  5251,  5253,  5252,  5256,  5255,
    5261,  5298,  5299,  5304,  5303,  5322,  5341,  5340,  5357,  5361,
    5369,  5368,  5371,  5373,  5375,  5377,  5382,  5383,  5389,  5390,
    5407,  5408,  5412,  5413,  5417,  5436,  5446,  5457,  5466,  5467,
    5483,  5485,  5484,  5489,  5487,  5498,  5499,  5503,  5521,  5537,
    5538,  5554,  5569,  5591,  5592,  5597,  5596,  5620,  5630,  5652,
    5651,  5669,  5668,  5688,  5710,  5714,  5743,  5755,  5756,  5761,
    5772,  5760,  5797,  5798,  5802,  5815,  5836,  5849,  5875,  5876,
    5881,  5880,  5917,  5922,  5923,  5927,  5928,  5932,  5934,  5940,
    5942,  5944,  5946,  5948,  5950,  5960,  5975,  5959,  5989,  5990,
    5994,  5995,  5999,  6000,  6004,  6005,  6009,  6010,  6014,  6015,
    6019,  6023,  6024,  6027,  6029,  6033,  6034,  6038,  6039,  6040,
    6044,  6049,  6054,  6059,  6064,  6069,  6074,  6079,  6094,  6100,
    6115,  6120,  6135,  6141,  6159,  6164,  6169,  6174,  6179,  6185,
    6184,  6210,  6211,  6212,  6217,  6222,  6227,  6229,  6231,  6233,
    6239,  6247,  6265,  6282,  6308,  6326,  6327,  6328,  6329,  6330,
    6331,  6332,  6333,  6334,  6335,  6336,  6337,  6338,  6339,  6343,
    6344,  6345,  6349,  6350,  6354,  6355,  6356,  6357,  6362,  6369,
    6370,  6374,  6375,  6379,  6380,  6387,  6392,  6398,  6404,  6417,
    6436,  6442,  6444,  6448,  6452,  6453,  6457,  6462,  6461,  6485,
    6486,  6487,  6488,  6493,  6497,  6502,  6507,  6511,  6516,  6521,
    6527,  6532,  6538,  6542,  6547,  6552,  6570,  6572,  6574,  6590,
    6592,  6597,  6602,  6614,  6619,  6624,  6629,  6631,  6633,  6635,
    6637,  6639,  6641,  6643,  6646,  6645,  6650,  6649,  6653,  6655,
    6664,  6665,  6666,  6672,  6673,  6674,  6675,  6676,  6680,  6684,
    6685,  6689,  6690,  6694,  6695,  6696,  6697,  6698,  6702,  6703,
    6704,  6705,  6706,  6710,  6715,  6717,  6723,  6724,  6726,  6731,
    6741,  6742,  6746,  6747,  6748,  6756,  6757,  6761,  6762,  6766,
    6767,  6768,  6772,  6773,  6774,  6775,  6778,  6779,  6783,  6784,
    6788,  6789,  6793,  6794,  6798,  6799,  6800,  6801,  6802,  6803,
    6809,  6815,  6824,  6833,  6834,  6847,  6853,  6859,  6865,  6872,
    6877,  6882,  6890,  6891,  6903,  6924,  6932,  6933,  6938,  6939,
    6943,  6951,  6955,  6956,  6960,  6961,  6965,  6974,  6978,  6979,
    6983,  6991,  6992,  6996,  6997,  7001,  7002,  7007,  7008,  7012,
    7019,  7028,  7033,  7041,  7042,  7043,  7044,  7045,  7046,  7051,
    7059,  7060,  7065,  7064,  7077,  7078,  7082,  7085,  7086,  7087,
    7088,  7092,  7100,  7107,  7108,  7112,  7122,  7123,  7127,  7128,
    7131,  7133,  7137,  7149,  7150,  7154,  7161,  7174,  7175,  7177,
    7179,  7185,  7190,  7196,  7202,  7209,  7219,  7220,  7221,  7222,
    7223,  7227,  7231,  7232,  7237,  7238,  7242,  7243,  7247,  7248,
    7249,  7253,  7254,  7258,  7262,  7269,  7273,  7277,  7284,  7288,
    7292,  7296,  7309,  7321,  7322,  7326,  7327,  7331,  7332,  7336,
    7337,  7341,  7342,  7346,  7347,  7351,  7352,  7356,  7357,  7361,
    7363,  7367,  7368,  7372,  7376,  7377,  7390,  7391,  7392,  7396,
    7397,  7401,  7407,  7421,  7422,  7426,  7427,  7431,  7432,  7440,
    7439,  7485,  7484,  7498,  7510,  7509,  7528,  7527,  7546,  7545,
    7564,  7558,  7578,  7577,  7610,  7615,  7620,  7625,  7630,  7637,
    7644,  7649,  7657,  7658,  7659,  7660,  7664,  7665,  7677,  7678,
    7682,  7683,  7686,  7688,  7696,  7704,  7706,  7708,  7709,  7717,
    7718,  7722,  7731,  7729,  7743,  7757,  7756,  7770,  7768,  7782,
    7789,  7800,  7801,  7829,  7836,  7840,  7845,  7844,  7860,  7862,
    7867,  7875,  7874,  7890,  7894,  7893,  7905,  7906,  7910,  7925,
    7926,  7930,  7939,  7943,  7948,  7954,  7953,  7964,  7974,  7963,
    7989,  7998,  8007,  8016,  8025,  8031,  8037,  8046,  8055,  8083,
    8104,  8114,  8118,  8123,  8124,  8127,  8129,  8130,  8131,  8132,
    8135,  8140,  8151,  8156,  8167,  8168,  8172,  8173,  8177,  8178,
    8179,  8183,  8184,  8189,  8197,  8198,  8199,  8200,  8205,  8204,
    8233,  8243,  8260,  8263,  8270,  8274,  8281,  8285,  8291,  8295,
    8302,  8307,  8310,  8317,  8320,  8327,  8330,  8337,  8340,  8348,
    8351,  8358,  8362,  8369,  8373,  8380,  8381,  8406,  8407,  8408,
    8413,  8418,  8426,  8425,  8437,  8438,  8439,  8444,  8443,  8465,
    8466,  8470,  8471,  8475,  8476,  8477,  8482,  8481,  8503,  8512,
    8511,  8538,  8539,  8543,  8544,  8548,  8549,  8550,  8551,  8552,
    8553,  8558,  8557,  8579,  8580,  8581,  8586,  8585,  8591,  8598,
    8603,  8611,  8612,  8616,  8630,  8629,  8642,  8643,  8647,  8648,
    8652,  8662,  8672,  8673,  8678,  8677,  8688,  8689,  8693,  8694,
    8698,  8708,  8719,  8718,  8726,  8726,  8737,  8738,  8743,  8744,
    8753,  8762,  8763,  8767,  8772,  8777,  8782,  8787,  8786,  8806,
    8814,  8806,  8821,  8822,  8823,  8824,  8825,  8829,  8836,  8843,
    8845,  8856,  8857,  8861,  8862,  8890,  8920,  8922,  8931,  8944,
    8945,  8946,  8961,  8968,  8993,  8999,  9005,  9006,  9007,  9008,
    9009,  9013,  9014,  9019,  9070,  9077,  9120,  9126,  9132,  9138,
    9144,  9150,  9156,  9162,  9166,  9172,  9178,  9184,  9190,  9196,
    9200,  9206,  9216,  9222,  9230,  9236,  9246,  9252,  9261,  9271,
    9277,  9287,  9293,  9302,  9306,  9312,  9318,  9324,  9330,  9336,
    9342,  9348,  9354,  9360,  9366,  9372,  9378,  9384,  9390,  9394,
    9395,  9399,  9400,  9404,  9405,  9409,  9410,  9414,  9415,  9416,
    9417,  9418,  9419,  9423,  9424,  9428,  9429,  9430,  9431,  9432,
    9433,  9445,  9446,  9447,  9448,  9449,  9455,  9459,  9465,  9471,
    9477,  9483,  9485,  9492,  9499,  9505,  9546,  9555,  9562,  9570,
    9576,  9583,  9589,  9603,  9610,  9626,  9632,  9638,  9646,  9652,
    9658,  9664,  9670,  9685,  9697,  9703,  9709,  9715,  9721,  9727,
    9733,  9739,  9745,  9751,  9757,  9763,  9769,  9775,  9781,  9787,
    9793,  9801,  9822,  9829,  9835,  9842,  9849,  9856,  9863,  9869,
    9875,  9880,  9886,  9893,  9899,  9905,  9911,  9917,  9923,  9941,
    9947,  9953,  9960,  9967,  9982,  9988,  9994, 10000, 10006, 10013,
   10019, 10025, 10031, 10037, 10043, 10051, 10064, 10070, 10076, 10082,
   10088, 10096, 10102, 10114, 10120, 10126, 10134, 10144, 10150, 10166,
   10172, 10179, 10186, 10193, 10200, 10207, 10211, 10231, 10230, 10303,
   10343, 10345, 10350, 10351, 10355, 10356, 10360, 10361, 10365, 10372,
   10380, 10406, 10412, 10418, 10424, 10430, 10436, 10445, 10452, 10454,
   10451, 10461, 10472, 10478, 10484, 10490, 10496, 10502, 10508, 10514,
   10520, 10527, 10526, 10546, 10545, 10560, 10571, 10579, 10595, 10596,
   10601, 10606, 10609, 10612, 10611, 10628, 10630, 10636, 10635, 10652,
   10654, 10656, 10658, 10660, 10662, 10664, 10666, 10668, 10670, 10672,
   10677, 10678, 10682, 10689, 10697, 10698, 10702, 10709, 10717, 10718,
   10722, 10723, 10727, 10735, 10746, 10747, 10756, 10767, 10768, 10774,
   10775, 10795, 10797, 10801, 10799, 10816, 10814, 10832, 10830, 10837,
   10846, 10844, 10862, 10861, 10871, 10882, 10880, 10899, 10898, 10909,
   10920, 10921, 10922, 10930, 10931, 10935, 10950, 10950, 10965, 11005,
   11078, 11089, 11094, 11086, 11113, 11133, 11141, 11133, 11150, 11149,
   11172, 11189, 11172, 11196, 11200, 11226, 11227, 11232, 11235, 11236,
   11237, 11241, 11242, 11247, 11246, 11252, 11251, 11259, 11260, 11263,
   11265, 11265, 11269, 11269, 11274, 11275, 11279, 11281, 11286, 11287,
   11291, 11302, 11315, 11316, 11317, 11318, 11319, 11320, 11321, 11322,
   11323, 11324, 11325, 11326, 11330, 11331, 11332, 11333, 11334, 11335,
   11336, 11337, 11338, 11342, 11343, 11344, 11345, 11348, 11350, 11351,
   11355, 11356, 11364, 11366, 11370, 11372, 11371, 11385, 11388, 11387,
   11402, 11408, 11423, 11425, 11429, 11431, 11436, 11437, 11457, 11488,
   11492, 11493, 11497, 11510, 11512, 11517, 11516, 11551, 11553, 11558,
   11559, 11560, 11565, 11571, 11575, 11576, 11580, 11591, 11598, 11605,
   11615, 11642, 11646, 11652, 11658, 11668, 11672, 11686, 11687, 11688,
   11689, 11690, 11691, 11695, 11696, 11697, 11698, 11699, 11703, 11704,
   11705, 11706, 11707, 11711, 11712, 11713, 11714, 11718, 11723, 11724,
   11727, 11730, 11729, 11763, 11764, 11768, 11776, 11789, 11789, 11799,
   11800, 11804, 11823, 11863, 11862, 11875, 11883, 11874, 11885, 11897,
   11909, 11908, 11926, 11925, 11936, 11937, 11936, 11953, 11960, 11981,
   12002, 12014, 12019, 12018, 12028, 12034, 12041, 12046, 12051, 12058,
   12067, 12068, 12072, 12083, 12096, 12097, 12101, 12112, 12113, 12117,
   12118, 12121, 12123, 12126, 12127, 12128, 12132, 12133, 12141, 12149,
   12140, 12159, 12166, 12158, 12176, 12188, 12189, 12202, 12206, 12207,
   12223, 12224, 12228, 12237, 12238, 12239, 12241, 12240, 12251, 12252,
   12256, 12257, 12259, 12258, 12262, 12261, 12267, 12268, 12272, 12273,
   12277, 12287, 12288, 12292, 12293, 12298, 12297, 12311, 12312, 12316,
   12321, 12329, 12330, 12338, 12340, 12340, 12348, 12356, 12347, 12378,
   12379, 12383, 12391, 12392, 12396, 12406, 12407, 12414, 12413, 12429,
   12428, 12442, 12441, 12453, 12452, 12466, 12467, 12471, 12484, 12500,
   12501, 12505, 12506, 12510, 12511, 12512, 12517, 12516, 12538, 12540,
   12543, 12545, 12548, 12549, 12552, 12556, 12560, 12564, 12568, 12572,
   12576, 12580, 12584, 12592, 12595, 12605, 12604, 12619, 12626, 12634,
   12642, 12650, 12658, 12666, 12673, 12675, 12677, 12686, 12690, 12695,
   12694, 12700, 12699, 12704, 12713, 12720, 12725, 12727, 12729, 12731,
   12733, 12741, 12752, 12760, 12762, 12770, 12777, 12784, 12794, 12801,
   12807, 12816, 12824, 12828, 12833, 12837, 12841, 12848, 12855, 12862,
   12869, 12876, 12883, 12890, 12896, 12903, 12910, 12915, 12920, 12928,
   12930, 12932, 12937, 12938, 12941, 12943, 12947, 12948, 12952, 12953,
   12957, 12958, 12962, 12963, 12967, 12968, 12971, 12973, 12980, 12991,
   12990, 13006, 13005, 13012, 13013, 13014, 13015, 13016, 13020, 13021,
   13026, 13030, 13036, 13042, 13064, 13065, 13066, 13081, 13080, 13093,
   13102, 13092, 13104, 13108, 13109, 13121, 13120, 13142, 13143, 13148,
   13150, 13152, 13154, 13156, 13158, 13160, 13162, 13164, 13166, 13168,
   13170, 13172, 13174, 13176, 13178, 13180, 13182, 13184, 13189, 13190,
   13195, 13194, 13204, 13205, 13209, 13209, 13211, 13212, 13213, 13218,
   13219, 13224, 13223, 13234, 13235, 13242, 13246, 13250, 13260, 13265,
   13277, 13287, 13288, 13289, 13295, 13307, 13319, 13329, 13339, 13306,
   13347, 13348, 13352, 13353, 13357, 13358, 13370, 13374, 13375, 13376,
   13379, 13381, 13385, 13386, 13390, 13395, 13402, 13407, 13414, 13416,
   13420, 13421, 13425, 13430, 13438, 13439, 13442, 13444, 13452, 13454,
   13458, 13459, 13460, 13464, 13466, 13471, 13472, 13481, 13482, 13486,
   13487, 13491, 13511, 13535, 13547, 13558, 13577, 13585, 13597, 13612,
   13633, 13634, 13635, 13644, 13645, 13646, 13647, 13662, 13668, 13674,
   13680, 13686, 13717, 13750, 13760, 13770, 13776, 13785, 13797, 13803,
   13809, 13825, 13826, 13830, 13839, 13855, 13859, 13910, 13914, 13932,
   13936, 14016, 14041, 14072, 14073, 14089, 14099, 14103, 14109, 14115,
   14125, 14131, 14140, 14150, 14151, 14181, 14194, 14210, 14226, 14243,
   14244, 14255, 14256, 14267, 14268, 14269, 14273, 14300, 14333, 14348,
   14349, 14350, 14351, 14352, 14353, 14354, 14355, 14356, 14357, 14358,
   14359, 14360, 14361, 14362, 14363, 14364, 14365, 14366, 14367, 14368,
   14369, 14370, 14371, 14372, 14373, 14374, 14375, 14376, 14377, 14378,
   14379, 14380, 14381, 14382, 14383, 14384, 14385, 14386, 14387, 14388,
   14389, 14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14407,
   14408, 14409, 14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417,
   14418, 14419, 14420, 14421, 14422, 14423, 14424, 14425, 14426, 14427,
   14428, 14429, 14430, 14431, 14432, 14433, 14434, 14435, 14436, 14437,
   14438, 14439, 14440, 14441, 14442, 14443, 14444, 14445, 14446, 14447,
   14448, 14449, 14450, 14451, 14452, 14453, 14454, 14455, 14460, 14461,
   14462, 14463, 14464, 14465, 14466, 14467, 14468, 14469, 14470, 14471,
   14472, 14473, 14474, 14475, 14476, 14477, 14478, 14479, 14480, 14481,
   14482, 14483, 14484, 14485, 14486, 14487, 14488, 14489, 14490, 14491,
   14492, 14493, 14494, 14495, 14496, 14497, 14498, 14499, 14500, 14501,
   14502, 14503, 14504, 14505, 14506, 14507, 14508, 14509, 14510, 14511,
   14512, 14513, 14514, 14515, 14516, 14517, 14518, 14519, 14520, 14521,
   14522, 14523, 14524, 14525, 14526, 14527, 14528, 14529, 14530, 14531,
   14532, 14533, 14534, 14535, 14536, 14537, 14538, 14539, 14540, 14541,
   14542, 14543, 14544, 14545, 14546, 14547, 14548, 14549, 14550, 14551,
   14552, 14553, 14554, 14555, 14556, 14557, 14558, 14559, 14560, 14561,
   14562, 14563, 14564, 14565, 14566, 14567, 14568, 14569, 14570, 14571,
   14572, 14573, 14574, 14575, 14576, 14577, 14578, 14579, 14580, 14581,
   14582, 14583, 14584, 14585, 14586, 14587, 14588, 14589, 14590, 14591,
   14592, 14593, 14594, 14595, 14596, 14597, 14598, 14599, 14600, 14601,
   14602, 14603, 14604, 14605, 14606, 14607, 14608, 14609, 14610, 14611,
   14612, 14613, 14614, 14615, 14616, 14617, 14618, 14619, 14620, 14621,
   14622, 14623, 14624, 14625, 14626, 14627, 14628, 14629, 14630, 14631,
   14632, 14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641,
   14642, 14643, 14644, 14645, 14646, 14647, 14648, 14649, 14650, 14651,
   14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659, 14660, 14661,
   14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670, 14671,
   14672, 14673, 14674, 14675, 14676, 14677, 14678, 14679, 14680, 14681,
   14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689, 14690, 14691,
   14692, 14693, 14694, 14695, 14696, 14697, 14698, 14699, 14700, 14701,
   14702, 14703, 14704, 14705, 14706, 14707, 14708, 14709, 14710, 14711,
   14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721,
   14722, 14723, 14724, 14725, 14726, 14727, 14728, 14740, 14739, 14754,
   14753, 14781, 14782, 14787, 14786, 14793, 14792, 14802, 14801, 14812,
   14811, 14817, 14825, 14827, 14832, 14832, 14841, 14840, 14854, 14853,
   14858, 14862, 14863, 14864, 14868, 14869, 14870, 14871, 14875, 14876,
   14877, 14878, 14883, 14917, 14916, 15016, 15027, 15040, 15056, 15069,
   15091, 15126, 15168, 15196, 15242, 15256, 15257, 15258, 15259, 15263,
   15281, 15299, 15300, 15304, 15305, 15306, 15307, 15311, 15312, 15330,
   15344, 15345, 15346, 15352, 15358, 15369, 15380, 15384, 15389, 15388,
   15397, 15398, 15402, 15403, 15407, 15420, 15421, 15422, 15427, 15431,
   15442, 15446, 15457, 15473, 15490, 15489, 15528, 15529, 15533, 15534,
   15538, 15539, 15540, 15541, 15543, 15542, 15556, 15557, 15558, 15559,
   15560, 15566, 15566, 15571, 15576, 15586, 15596, 15600, 15609, 15609,
   15614, 15620, 15631, 15642, 15650, 15652, 15656, 15663, 15670, 15672,
   15676, 15677, 15682, 15681, 15685, 15684, 15688, 15687, 15691, 15690,
   15693, 15694, 15695, 15696, 15697, 15698, 15699, 15700, 15701, 15702,
   15703, 15704, 15705, 15706, 15707, 15708, 15709, 15710, 15711, 15712,
   15713, 15714, 15715, 15716, 15717, 15718, 15722, 15723, 15727, 15728,
   15732, 15742, 15752, 15765, 15780, 15793, 15806, 15818, 15823, 15831,
   15836, 15844, 15862, 15882, 15894, 15907, 15916, 15920, 15924, 15925,
   15929, 15956, 15958, 15962, 15966, 15970, 15977, 15978, 15982, 15983,
   15987, 15988, 15992, 15993, 15999, 16005, 16011, 16021, 16020, 16030,
   16031, 16036, 16037, 16038, 16043, 16044, 16045, 16049, 16050, 16054,
   16066, 16075, 16085, 16094, 16108, 16109, 16114, 16113, 16129, 16130,
   16131, 16135, 16136, 16140, 16140, 16164, 16165, 16169, 16170, 16171,
   16175, 16179, 16186, 16189, 16187, 16203, 16210, 16231, 16255, 16257,
   16261, 16262, 16266, 16267, 16275, 16276, 16277, 16278, 16284, 16290,
   16300, 16302, 16304, 16309, 16310, 16311, 16312, 16313, 16317, 16318,
   16319, 16320, 16321, 16322, 16332, 16333, 16338, 16351, 16364, 16366,
   16368, 16373, 16378, 16380, 16382, 16388, 16389, 16391, 16397, 16396,
   16414, 16415, 16419, 16424, 16432, 16432, 16458, 16457, 16474, 16478,
   16483, 16488, 16487, 16499, 16500, 16502, 16504, 16522, 16528, 16533,
   16515, 16596, 16614, 16639, 16671, 16676, 16684, 16707, 16635, 16773,
   16793, 16806, 16816, 16772, 16837, 16841, 16845, 16849, 16853, 16857,
   16864, 16871, 16878, 16888, 16889, 16893, 16894, 16895, 16899, 16900,
   16905, 16907, 16906, 16912, 16913, 16917, 16927
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "ARCHIVED_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED",
  "CHANGED_PAGE_BITMAPS_SYM", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM",
  "CLIENT_STATS_SYM", "CLOSE_SYM", "CLUSTERING_SYM", "COALESCE",
  "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "COMPRESSION_DICTIONARY_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM",
  "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM",
  "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM",
  "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM",
  "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM",
  "MASTER_BIND_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "NOLOCK_SYM", "NONBLOCKING_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_STATS_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "THREAD_STATS_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM",
  "TOKU_UNCOMPRESSED_SYM", "TOKU_ZLIB_SYM", "TOKU_SNAPPY_SYM",
  "TOKU_QUICKLZ_SYM", "TOKU_LZMA_SYM", "TOKU_FAST_SYM", "TOKU_SMALL_SYM",
  "TOKU_DEFAULT_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM",
  "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER",
  "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM",
  "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES", "VALUE_SYM", "VARBINARY",
  "VARCHAR", "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM",
  "VIEW_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM",
  "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM",
  "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def", "create",
  "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13",
  "create_compression_dictionary_allowed_expr", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "$@20", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "$@21", "sp_proc_stmt", "sp_proc_stmt_if", "$@22",
  "sp_proc_stmt_statement", "$@23", "sp_proc_stmt_return", "$@24",
  "sp_proc_stmt_unlabeled", "$@25", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@26", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@27", "$@28", "$@29", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@30", "$@31", "searched_case_stmt", "$@32",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@33", "$@34", "searched_when_clause", "$@35",
  "$@36", "else_clause_opt", "sp_labeled_control", "$@37", "sp_opt_label",
  "sp_labeled_block", "$@38", "sp_unlabeled_block", "$@39",
  "sp_block_content", "$@40", "sp_unlabeled_control", "$@41", "$@42",
  "$@43", "$@44", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@46",
  "create3", "$@47", "$@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@49", "have_partitioning", "partition_entry", "$@50",
  "partition", "part_type_def", "$@51", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "$@52", "$@53", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@54", "part_name",
  "opt_part_values", "$@55", "$@56", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@57", "$@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@60", "$@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@63", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "opt_with_compression_dictionary", "type_with_opt_collate", "now",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_combo_clustering",
  "unique_combo_clustering", "unique_opt_clustering", "unique",
  "clustering", "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@67", "$@68",
  "$@69", "$@70", "$@71", "$@72", "$@73", "alter_user_list",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@74", "$@75", "$@76",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@77", "add_part_extra", "reorg_partition_rule", "$@78",
  "reorg_parts_rule", "$@79", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@80", "$@81", "$@82",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@83", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "$@84", "opt_checksum_type", "repair",
  "$@85", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@86", "binlog_base64_event", "check", "$@87",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@88", "opt_no_write_to_binlog", "rename", "$@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@92", "cache_keys_spec", "$@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@94",
  "select_part2", "$@95", "$@96", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@97", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@98", "$@99", "$@100",
  "variable", "$@101", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@102", "gorder_list",
  "in_sum_expr", "$@103", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@104", "$@105", "$@106", "$@107", "$@108", "$@109",
  "$@110", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@111", "select_derived_union", "$@112", "$@113",
  "select_init2_derived", "select_part2_derived", "$@114", "$@115",
  "select_derived", "$@116", "select_derived2", "$@117", "$@118",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@119",
  "$@120", "index_hints_list", "opt_index_hints_list", "$@121",
  "opt_key_definition", "$@122", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@123", "having_clause", "$@124", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@125", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@126",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@127", "select_var_list", "select_var_ident",
  "into", "$@128", "into_destination", "$@129", "$@130", "do", "$@131",
  "drop", "$@132", "$@133", "$@134", "$@135", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@136", "$@137",
  "replace", "$@138", "$@139", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@140", "fields",
  "insert_values", "$@141", "$@142", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@143",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@144",
  "update", "$@145", "$@146", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@147", "single_multi", "$@148", "$@149", "$@150", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@151", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@152", "show_param",
  "$@153", "$@154", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@155", "$@156", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@157", "flush_options", "$@158", "$@159", "opt_flush_lock",
  "$@160", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@161", "reset_options", "reset_option", "$@162", "slave_reset_options",
  "purge", "$@163", "purge_options", "purge_option",
  "purge_archive_option", "kill", "kill_option", "use", "load", "$@164",
  "$@165", "$@166", "$@167", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys_nonewline",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@168", "$@169",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@170", "$@171", "$@172",
  "start_option_value_list_following_option_type", "$@173",
  "option_value_list_continued", "option_value_list", "$@174", "$@175",
  "option_value", "$@176", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@177", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "lock_variant",
  "$@178", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "unlock_variant", "handler", "$@179",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@180", "handler_rkey_mode", "revoke", "$@181", "revoke_command",
  "grant", "$@182", "grant_command", "opt_table", "grant_privileges",
  "opt_privileges", "object_privilege_list", "object_privilege", "$@183",
  "$@184", "$@185", "$@186", "opt_and", "require_list",
  "require_list_element", "grant_ident", "user_list", "grant_list",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@187", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@188",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@189",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@190", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@191",
  "view_list_opt", "view_list", "view_select", "$@192", "view_select_aux",
  "$@193", "create_view_select_paren", "create_view_select", "$@194",
  "view_check_option", "trigger_tail", "$@195", "$@196", "$@197",
  "udf_tail", "sf_tail", "$@198", "$@199", "$@200", "$@201", "$@202",
  "sp_tail", "$@203", "$@204", "$@205", "$@206", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@207", "opt_migrate", "install", "uninstall", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   124,    38,    45,    43,    42,    47,    37,    94,   126,
      40,    41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   660,   661,   662,   661,   661,   663,   663,   664,   664,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   666,   667,   667,   668,   669,   669,   671,   670,
     672,   672,   673,   673,   674,   676,   675,   678,   677,   679,
     679,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   681,   681,   681,   682,   683,   683,   683,   683,
     685,   684,   686,   687,   684,   688,   689,   684,   690,   691,
     684,   692,   684,   693,   684,   684,   684,   684,   684,   684,
     694,   694,   695,   696,   696,   697,   697,   697,   697,   697,
     697,   697,   699,   698,   701,   700,   700,   702,   702,   702,
     702,   703,   703,   704,   704,   705,   705,   706,   706,   707,
     707,   709,   708,   710,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   710,   711,   712,   712,   713,
     713,   714,   714,   715,   715,   715,   715,   715,   715,   715,
     716,   716,   716,   717,   717,   719,   718,   720,   720,   721,
     721,   722,   722,   723,   723,   724,   724,   725,   726,   727,
     727,   728,   728,   729,   730,   730,   730,   730,   731,   731,
     732,   732,   733,   733,   735,   734,   734,   736,   734,   737,
     734,   738,   738,   739,   739,   740,   741,   741,   742,   743,
     743,   744,   744,   744,   744,   744,   745,   746,   746,   747,
     747,   748,   748,   749,   749,   750,   750,   750,   751,   751,
     751,   751,   751,   751,   751,   751,   751,   751,   751,   751,
     752,   753,   754,   754,   755,   755,   756,   756,   757,   758,
     758,   759,   759,   760,   761,   761,   762,   763,   763,   763,
     763,   763,   763,   763,   763,   763,   763,   763,   763,   763,
     764,   764,   765,   766,   765,   767,   767,   767,   767,   767,
     767,   767,   767,   767,   767,   767,   767,   767,   769,   768,
     771,   770,   773,   772,   775,   774,   776,   777,   778,   780,
     779,   781,   782,   782,   782,   783,   783,   785,   786,   787,
     784,   788,   788,   788,   789,   789,   791,   792,   790,   794,
     793,   795,   795,   796,   796,   798,   799,   797,   801,   802,
     800,   803,   803,   805,   804,   806,   806,   808,   807,   810,
     809,   812,   811,   813,   814,   815,   813,   816,   817,   813,
     818,   818,   819,   819,   819,   820,   821,   822,   823,   823,
     824,   824,   825,   826,   827,   827,   829,   828,   830,   830,
     830,   831,   831,   831,   832,   832,   833,   833,   833,   834,
     834,   834,   834,   834,   834,   834,   834,   835,   835,   836,
     836,   836,   837,   837,   837,   837,   837,   838,   838,   839,
     839,   839,   840,   840,   840,   840,   840,   840,   840,   841,
     841,   842,   842,   842,   843,   843,   843,   844,   845,   846,
     847,   848,   849,   849,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   859,   860,   860,   861,   861,
     861,   861,   862,   863,   862,   864,   865,   864,   866,   864,
     867,   868,   868,   870,   869,   871,   873,   872,   874,   875,
     876,   875,   875,   875,   875,   875,   877,   877,   878,   878,
     879,   879,   880,   880,   881,   882,   883,   884,   885,   885,
     886,   887,   886,   888,   886,   889,   889,   890,   891,   892,
     892,   893,   893,   894,   894,   896,   895,   897,   898,   899,
     898,   900,   898,   901,   901,   902,   902,   903,   903,   905,
     906,   904,   907,   907,   908,   908,   909,   909,   910,   910,
     912,   911,   913,   914,   914,   915,   915,   916,   916,   916,
     916,   916,   916,   916,   916,   918,   919,   917,   920,   920,
     921,   921,   922,   922,   923,   923,   924,   924,   925,   925,
     926,   927,   927,   928,   928,   929,   929,   930,   930,   930,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   932,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   931,
     931,   933,   934,   935,   936,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   938,
     938,   938,   939,   939,   940,   940,   940,   940,   941,   942,
     942,   943,   943,   944,   944,   945,   945,   945,   945,   945,
     945,   946,   946,   947,   948,   948,   949,   951,   950,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   953,   952,   954,   952,   952,   952,
     955,   955,   955,   955,   955,   955,   955,   955,   956,   957,
     957,   958,   958,   959,   959,   959,   959,   959,   960,   960,
     960,   960,   960,   961,   961,   961,   962,   962,   962,   963,
     964,   964,   965,   965,   965,   966,   966,   967,   967,   968,
     968,   968,   969,   969,   969,   969,   970,   970,   971,   971,
     972,   972,   973,   973,   974,   974,   974,   974,   974,   974,
     974,   974,   974,   974,   974,   974,   974,   974,   974,   974,
     974,   974,   975,   975,   976,   977,   978,   978,   979,   979,
     980,   980,   981,   981,   982,   982,   983,   983,   984,   984,
     985,   986,   986,   987,   987,   988,   988,   989,   989,   989,
     990,   990,   990,   991,   991,   991,   991,   991,   991,   991,
     992,   992,   994,   993,   995,   995,   996,   997,   997,   997,
     997,   998,   999,  1000,  1000,  1001,  1002,  1002,  1003,  1003,
    1004,  1004,  1005,  1006,  1006,  1007,  1007,  1008,  1008,  1008,
    1008,  1009,  1009,  1009,  1009,  1009,  1010,  1010,  1010,  1010,
    1010,  1011,  1012,  1012,  1013,  1013,  1014,  1014,  1015,  1015,
    1015,  1016,  1016,  1017,  1017,  1018,  1018,  1018,  1019,  1020,
    1021,  1022,  1023,  1024,  1024,  1025,  1025,  1026,  1026,  1027,
    1027,  1028,  1028,  1029,  1029,  1030,  1030,  1031,  1031,  1032,
    1032,  1033,  1033,  1034,  1035,  1035,  1036,  1036,  1036,  1037,
    1037,  1038,  1038,  1039,  1039,  1040,  1040,  1041,  1041,  1043,
    1042,  1044,  1042,  1042,  1045,  1042,  1046,  1042,  1047,  1042,
    1048,  1042,  1049,  1042,  1042,  1042,  1042,  1042,  1042,  1042,
    1050,  1050,  1051,  1051,  1051,  1051,  1052,  1052,  1053,  1053,
    1054,  1054,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,
    1055,  1055,  1056,  1055,  1055,  1057,  1055,  1058,  1055,  1055,
    1055,  1055,  1055,  1059,  1060,  1060,  1062,  1061,  1063,  1063,
    1063,  1065,  1064,  1066,  1067,  1066,  1068,  1068,  1069,  1070,
    1070,  1071,  1072,  1072,  1072,  1073,  1072,  1074,  1075,  1072,
    1072,  1072,  1072,  1072,  1072,  1072,  1072,  1072,  1072,  1072,
    1072,  1072,  1072,  1072,  1072,  1076,  1076,  1076,  1076,  1076,
    1077,  1077,  1078,  1078,  1079,  1079,  1080,  1080,  1081,  1081,
    1081,  1082,  1082,  1082,  1083,  1083,  1083,  1083,  1085,  1084,
    1084,  1086,  1087,  1087,  1088,  1088,  1089,  1089,  1089,  1089,
    1090,  1091,  1091,  1092,  1092,  1093,  1093,  1094,  1094,  1095,
    1095,  1096,  1096,  1097,  1097,  1098,  1098,  1099,  1099,  1099,
    1099,  1099,  1101,  1100,  1102,  1102,  1102,  1104,  1103,  1105,
    1105,  1106,  1106,  1107,  1107,  1107,  1109,  1108,  1110,  1112,
    1111,  1113,  1113,  1114,  1114,  1115,  1115,  1115,  1115,  1115,
    1115,  1117,  1116,  1118,  1118,  1118,  1120,  1119,  1119,  1121,
    1121,  1122,  1122,  1123,  1125,  1124,  1126,  1126,  1127,  1127,
    1128,  1129,  1130,  1130,  1132,  1131,  1133,  1133,  1134,  1134,
    1135,  1136,  1138,  1137,  1140,  1139,  1141,  1141,  1142,  1142,
    1143,  1144,  1144,  1145,  1145,  1146,  1146,  1148,  1147,  1150,
    1151,  1149,  1152,  1152,  1152,  1152,  1152,  1153,  1153,  1154,
    1154,  1155,  1155,  1156,  1156,  1156,  1157,  1157,  1157,  1158,
    1158,  1158,  1159,  1159,  1160,  1161,  1162,  1162,  1162,  1162,
    1162,  1163,  1163,  1164,  1164,  1164,  1164,  1164,  1164,  1164,
    1164,  1164,  1164,  1164,  1165,  1165,  1165,  1165,  1165,  1165,
    1166,  1166,  1166,  1166,  1166,  1166,  1166,  1166,  1166,  1166,
    1166,  1166,  1166,  1166,  1167,  1167,  1167,  1167,  1167,  1167,
    1167,  1167,  1167,  1167,  1167,  1167,  1167,  1167,  1167,  1168,
    1168,  1169,  1169,  1170,  1170,  1171,  1171,  1172,  1172,  1172,
    1172,  1172,  1172,  1173,  1173,  1174,  1174,  1174,  1174,  1174,
    1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,
    1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,
    1174,  1174,  1174,  1174,  1174,  1175,  1175,  1175,  1175,  1175,
    1175,  1175,  1175,  1175,  1175,  1175,  1175,  1175,  1175,  1175,
    1175,  1175,  1175,  1175,  1175,  1175,  1175,  1175,  1175,  1175,
    1175,  1175,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,
    1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,
    1176,  1176,  1176,  1176,  1177,  1177,  1177,  1177,  1177,  1177,
    1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,
    1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1178,
    1178,  1178,  1178,  1178,  1178,  1178,  1178,  1180,  1179,  1179,
    1181,  1181,  1182,  1182,  1183,  1183,  1184,  1184,  1185,  1185,
    1186,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1188,  1189,
    1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,
    1187,  1190,  1187,  1192,  1191,  1193,  1193,  1193,  1194,  1194,
    1195,  1195,  1196,  1197,  1196,  1198,  1198,  1200,  1199,  1201,
    1201,  1201,  1201,  1201,  1201,  1201,  1201,  1201,  1201,  1201,
    1202,  1202,  1203,  1203,  1204,  1204,  1205,  1205,  1206,  1206,
    1207,  1207,  1208,  1208,  1209,  1209,  1210,  1211,  1211,  1212,
    1212,  1213,  1213,  1214,  1213,  1215,  1213,  1216,  1213,  1213,
    1217,  1213,  1218,  1213,  1213,  1219,  1213,  1220,  1213,  1213,
    1221,  1221,  1221,  1222,  1222,  1223,  1225,  1224,  1224,  1224,
    1226,  1227,  1228,  1226,  1229,  1231,  1232,  1230,  1234,  1233,
    1236,  1237,  1235,  1238,  1239,  1240,  1240,  1241,  1241,  1241,
    1241,  1242,  1242,  1244,  1243,  1245,  1243,  1246,  1246,  1247,
    1248,  1247,  1250,  1249,  1251,  1251,  1252,  1252,  1253,  1253,
    1254,  1254,  1255,  1255,  1255,  1255,  1255,  1255,  1255,  1255,
    1255,  1255,  1255,  1255,  1256,  1256,  1256,  1256,  1256,  1256,
    1256,  1256,  1256,  1257,  1257,  1257,  1257,  1258,  1258,  1258,
    1259,  1259,  1260,  1260,  1261,  1262,  1261,  1263,  1264,  1263,
    1265,  1265,  1266,  1266,  1267,  1267,  1268,  1268,  1268,  1269,
    1270,  1270,  1271,  1272,  1272,  1274,  1273,  1275,  1275,  1276,
    1276,  1276,  1277,  1277,  1278,  1278,  1279,  1280,  1280,  1280,
    1281,  1281,  1281,  1281,  1281,  1282,  1282,  1283,  1283,  1283,
    1283,  1283,  1283,  1284,  1284,  1284,  1284,  1284,  1285,  1285,
    1285,  1285,  1285,  1286,  1286,  1286,  1286,  1287,  1288,  1288,
    1289,  1290,  1289,  1291,  1291,  1291,  1292,  1294,  1293,  1295,
    1295,  1296,  1296,  1298,  1297,  1300,  1301,  1299,  1299,  1299,
    1303,  1302,  1305,  1304,  1306,  1307,  1304,  1304,  1304,  1304,
    1304,  1304,  1308,  1304,  1304,  1304,  1304,  1304,  1304,  1304,
    1309,  1309,  1310,  1311,  1312,  1312,  1313,  1314,  1314,  1315,
    1315,  1316,  1316,  1317,  1317,  1317,  1318,  1318,  1320,  1321,
    1319,  1323,  1324,  1322,  1325,  1325,  1325,  1325,  1326,  1326,
    1327,  1327,  1328,  1329,  1329,  1329,  1330,  1329,  1331,  1331,
    1332,  1332,  1333,  1332,  1334,  1332,  1335,  1335,  1336,  1336,
    1337,  1338,  1338,  1339,  1339,  1341,  1340,  1342,  1342,  1343,
    1343,  1344,  1344,  1345,  1346,  1345,  1348,  1349,  1347,  1350,
    1350,  1351,  1352,  1352,  1353,  1354,  1354,  1356,  1355,  1358,
    1357,  1359,  1357,  1360,  1357,  1361,  1361,  1362,  1362,  1363,
    1363,  1364,  1364,  1365,  1365,  1365,  1367,  1366,  1368,  1368,
    1369,  1369,  1370,  1370,  1371,  1371,  1371,  1371,  1371,  1371,
    1371,  1371,  1371,  1372,  1372,  1374,  1373,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1376,
    1375,  1377,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,
    1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1375,  1378,
    1378,  1378,  1379,  1379,  1380,  1380,  1381,  1381,  1382,  1382,
    1383,  1383,  1384,  1384,  1385,  1385,  1386,  1386,  1386,  1388,
    1387,  1389,  1387,  1390,  1390,  1390,  1390,  1390,  1391,  1391,
    1392,  1392,  1392,  1392,  1393,  1393,  1393,  1395,  1394,  1397,
    1398,  1396,  1396,  1399,  1399,  1400,  1399,  1401,  1401,  1402,
    1402,  1402,  1402,  1402,  1402,  1402,  1402,  1402,  1402,  1402,
    1402,  1402,  1402,  1402,  1402,  1402,  1402,  1402,  1403,  1403,
    1405,  1404,  1406,  1406,  1408,  1407,  1407,  1407,  1407,  1409,
    1409,  1411,  1410,  1412,  1412,  1412,  1413,  1413,  1414,  1414,
    1415,  1416,  1416,  1416,  1417,  1419,  1420,  1421,  1422,  1418,
    1423,  1423,  1424,  1424,  1425,  1425,  1425,  1426,  1426,  1426,
    1427,  1427,  1428,  1428,  1429,  1429,  1429,  1429,  1430,  1430,
    1431,  1431,  1432,  1432,  1433,  1433,  1434,  1434,  1435,  1435,
    1436,  1436,  1436,  1437,  1437,  1438,  1438,  1439,  1439,  1440,
    1440,  1441,  1442,  1442,  1442,  1442,  1443,  1443,  1443,  1444,
    1445,  1445,  1445,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1446,  1446,  1446,  1447,  1447,  1447,  1447,  1447,  1448,  1448,
    1448,  1449,  1449,  1450,  1450,  1451,  1452,  1452,  1453,  1453,
    1454,  1454,  1454,  1455,  1455,  1455,  1455,  1456,  1456,  1456,
    1457,  1457,  1458,  1459,  1459,  1460,  1461,  1462,  1463,  1464,
    1464,  1465,  1465,  1466,  1466,  1466,  1467,  1467,  1467,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1469,  1469,  1469,  1469,  1469,  1471,  1470,  1472,
    1470,  1473,  1473,  1475,  1474,  1476,  1474,  1477,  1474,  1479,
    1478,  1478,  1480,  1480,  1482,  1481,  1483,  1481,  1485,  1484,
    1484,  1486,  1486,  1486,  1487,  1487,  1487,  1487,  1488,  1488,
    1488,  1488,  1489,  1491,  1490,  1490,  1490,  1490,  1490,  1490,
    1490,  1490,  1492,  1492,  1492,  1493,  1493,  1493,  1493,  1494,
    1495,  1496,  1496,  1497,  1497,  1497,  1497,  1498,  1498,  1498,
    1499,  1499,  1499,  1499,  1499,  1500,  1501,  1501,  1502,  1501,
    1503,  1503,  1504,  1504,  1505,  1506,  1506,  1506,  1506,  1507,
    1508,  1508,  1509,  1509,  1510,  1509,  1511,  1511,  1512,  1512,
    1513,  1513,  1513,  1513,  1514,  1513,  1515,  1515,  1515,  1515,
    1515,  1517,  1516,  1518,  1518,  1518,  1518,  1518,  1520,  1519,
    1521,  1521,  1521,  1521,  1522,  1522,  1523,  1523,  1524,  1524,
    1525,  1525,  1527,  1526,  1528,  1526,  1529,  1526,  1530,  1526,
    1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,
    1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,
    1526,  1526,  1526,  1526,  1526,  1526,  1531,  1531,  1532,  1532,
    1533,  1533,  1533,  1534,  1534,  1534,  1534,  1535,  1535,  1536,
    1536,  1537,  1537,  1537,  1537,  1537,  1538,  1538,  1539,  1539,
    1540,  1541,  1541,  1541,  1541,  1541,  1542,  1542,  1543,  1543,
    1544,  1544,  1545,  1545,  1545,  1545,  1545,  1547,  1546,  1548,
    1548,  1549,  1549,  1549,  1550,  1550,  1550,  1551,  1551,  1552,
    1553,  1553,  1554,  1555,  1556,  1556,  1558,  1557,  1559,  1559,
    1559,  1560,  1560,  1562,  1561,  1563,  1563,  1564,  1564,  1564,
    1565,  1565,  1566,  1567,  1566,  1568,  1569,  1570,  1571,  1571,
    1572,  1572,  1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,
    1574,  1574,  1574,  1575,  1575,  1575,  1575,  1575,  1576,  1576,
    1576,  1576,  1576,  1576,  1577,  1577,  1578,  1579,  1580,  1580,
    1580,  1581,  1582,  1582,  1582,  1583,  1583,  1583,  1585,  1584,
    1586,  1586,  1587,  1587,  1589,  1588,  1591,  1590,  1590,  1592,
    1592,  1594,  1593,  1595,  1595,  1595,  1595,  1597,  1598,  1599,
    1596,  1600,  1600,  1602,  1603,  1604,  1605,  1606,  1601,  1608,
    1609,  1610,  1611,  1607,  1612,  1612,  1612,  1612,  1612,  1612,
    1613,  1613,  1613,  1614,  1614,  1615,  1615,  1615,  1616,  1616,
    1617,  1618,  1617,  1619,  1619,  1620,  1621
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     1,     0,     1,     3,     1,     3,     3,     3,     3,
       0,     7,     0,     0,    14,     0,     0,    14,     0,     0,
      14,     0,     6,     0,     3,     4,     4,     3,     2,     7,
       1,     1,    10,     1,     3,     2,     2,     2,     2,     2,
       2,     2,     0,    13,     0,     6,     2,     0,     1,     3,
       1,     0,     2,     0,     2,     0,     1,     3,     4,     0,
       2,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     0,
       2,     0,     2,     2,     2,     2,     2,     3,     3,     1,
       1,     1,     2,     3,     3,     0,     4,     0,     3,     0,
       1,     3,     1,     0,     1,     3,     1,     0,     3,     0,
       1,     3,     1,     4,     0,     1,     1,     1,     0,     3,
       2,     3,     0,     3,     0,     5,     5,     0,     7,     0,
       6,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     4,     0,     1,     1,     3,     1,     3,     3,     1,
       2,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     5,
       0,     2,     0,     3,     0,     2,     2,     2,     2,     0,
       6,     2,     0,     2,     1,     1,     3,     0,     0,     0,
       7,     0,     2,     2,     1,     1,     0,     0,     8,     0,
       6,     1,     2,     1,     2,     0,     0,     6,     0,     0,
       6,     0,     2,     0,     5,     0,     1,     0,     5,     0,
       2,     0,     5,     4,     0,     0,     8,     0,     0,     8,
       1,     1,     1,     1,     1,     2,     4,     5,     0,     4,
       4,     4,     3,     3,     2,     2,     0,     2,     1,     2,
       3,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     0,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     2,     3,     1,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     4,     1,     1,     1,     1,     2,     3,
       2,     4,     5,     0,     5,     0,     0,     5,     0,     7,
       1,     0,     1,     0,     4,     0,     0,     3,     5,     6,
       0,     4,     2,     2,     2,     2,     0,     1,     0,     3,
       0,     1,     1,     3,     1,     4,     5,     5,     0,     2,
       0,     0,     7,     0,    10,     1,     3,     1,     1,     0,
       2,     0,     3,     1,     3,     0,     6,     1,     0,     0,
       5,     0,     4,     1,     1,     1,     3,     1,     3,     0,
       0,     5,     1,     3,     1,     1,     0,     3,     1,     3,
       0,     4,     1,     0,     1,     2,     1,     3,     4,     3,
       3,     3,     4,     4,     3,     0,     0,     6,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     1,     1,     2,
       1,     0,     3,     0,     1,     1,     2,     1,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     2,     7,     8,     8,     8,     8,
       2,     0,     1,     4,     0,     1,     2,     0,     4,     3,
       3,     3,     1,     2,     1,     1,     3,     2,     3,     2,
       2,     1,     3,     3,     2,     3,     1,     2,     2,     2,
       1,     2,     1,     1,     1,     2,     3,     2,     3,     2,
       2,     3,     3,     3,     0,     6,     0,     6,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     5,
       0,     3,     0,     2,     3,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     3,
       2,     1,     2,     2,     2,     2,     2,     2,     3,     2,
       2,     2,     0,     3,     2,     2,     1,     1,     2,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
       1,     0,     2,     1,     1,     0,     1,     1,     2,     2,
       1,     2,     2,     0,     1,     1,     1,     3,     1,     3,
       0,     1,     0,     4,     1,     1,     1,     0,     1,     2,
       1,     1,     2,     1,     3,     3,     1,     1,     0,     2,
       0,     1,     5,     0,     3,     3,     1,     0,     2,     2,
       2,     0,     3,     3,     6,     6,     1,     1,     2,     2,
       2,     1,     2,     2,     1,     1,     0,     1,     1,     1,
       1,     0,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     0,     1,     2,     0,     1,     0,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     0,     2,     1,     3,     0,
       6,     0,     5,     7,     0,     5,     0,     5,     0,     5,
       0,     4,     0,    10,     3,     4,     3,     3,     7,     4,
       3,     5,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     7,     3,     1,     1,     0,     5,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     2,     3,     2,     4,     0,     6,     0,     0,     8,
       4,     4,     3,     3,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       1,     0,     2,     1,     0,     1,     1,     1,     0,     6,
       3,     3,     0,     1,     1,     3,     3,     6,     2,     2,
       4,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       1,     1,     3,     1,     1,     0,     2,     1,     3,     3,
       3,     1,     0,     5,     0,     1,     1,     0,     6,     0,
       1,     1,     2,     1,     1,     1,     0,     5,     2,     0,
       5,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     0,     6,     1,     1,     1,     3,
       2,     3,     1,     1,     0,     6,     1,     1,     1,     3,
       3,     4,     0,     6,     0,     2,     0,     4,     0,     2,
       1,     2,     4,     2,     3,     2,     3,     0,     3,     0,
       0,     6,     2,     1,     1,     2,     2,     8,     4,     0,
       1,     2,     1,     1,     1,     1,     0,     2,     4,     3,
       1,     1,     3,     4,     0,     0,     0,     2,     2,     1,
       1,     0,     2,     3,     3,     3,     2,     3,     4,     3,
       4,     3,     4,     1,     3,     4,     3,     3,     6,     1,
       5,     6,     5,     7,     6,     8,     5,     6,     4,     4,
       5,     3,     4,     1,     3,     3,     3,     3,     3,     3,
       5,     5,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     8,     8,     6,     6,
       1,     6,     6,     8,     8,     6,     8,     6,     2,     8,
       8,     2,     2,     2,     4,     4,     4,     4,     3,     8,
       6,     8,     4,     6,     4,     4,     4,     6,     8,     4,
       3,     6,     4,     6,     5,     8,     7,    10,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     0,     5,     6,
       2,     3,     0,     4,     0,     3,     0,     1,     1,     3,
       4,     4,     5,     4,     4,     4,     5,     4,     0,     0,
       7,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     0,     4,     4,     2,     0,     3,     2,
       3,     2,     1,     2,     1,     2,     1,     2,     2,     2,
       0,     1,     1,     3,     1,     3,     1,     3,     0,     1,
       0,     2,     4,     5,     1,     1,     1,     1,     4,     1,
       3,     3,     3,     0,     6,     0,     6,     0,     8,     4,
       0,     8,     0,    10,     6,     0,     8,     0,    10,     6,
       1,     2,     2,     0,     1,     5,     0,     5,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     1,     3,     3,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     0,     2,     3,
       1,     2,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     0,     8,     4,     6,     4,
       4,     4,     0,     6,     4,     4,     4,     5,     4,     4,
       1,     3,     1,     2,     1,     3,     1,     0,     2,     0,
       1,     0,     1,     1,     2,     3,     1,     1,     0,     0,
       8,     0,     0,     6,     0,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     3,     4,     0,     3,     3,     1,
       2,     2,     0,     3,     0,     5,     3,     1,     3,     1,
       3,     1,     1,     0,     1,     0,     4,     0,     1,     3,
       1,     1,     1,     0,     0,     6,     0,     0,    11,     3,
       1,     3,     3,     1,     3,     0,     1,     0,     4,     0,
       7,     0,     5,     0,     6,     1,     3,     2,     4,     0,
       2,     0,     2,     1,     1,     1,     0,     4,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     1,     3,     3,     6,     2,     2,     0,
       6,     0,     6,     5,     2,     1,     5,     5,     2,     2,
       1,     4,     3,     2,     3,     2,     2,     1,     3,     4,
       3,     3,     2,     2,     3,     3,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     0,     1,     0,     2,     0,     1,
       1,     1,     0,     2,     0,     2,     0,     2,     2,     0,
       4,     0,     4,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     3,     0,     1,     1,     0,     4,     0,
       0,     5,     1,     0,     3,     0,     3,     3,     1,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       0,     3,     3,     1,     0,     3,     1,     2,     1,     0,
       1,     0,     3,     3,     3,     3,     2,     2,     2,     2,
       3,     0,     1,     1,     2,     0,     0,     0,     0,    22,
       1,     1,     0,     1,     0,     1,     1,     0,     1,     1,
       0,     2,     2,     1,     3,     4,     3,     3,     0,     2,
       2,     1,     3,     3,     0,     4,     0,     3,     1,     1,
       0,     3,     2,     3,     1,     1,     2,     0,     2,     3,
       1,     5,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     2,
       2,     1,     1,     3,     5,     1,     1,     1,     1,     1,
       3,     4,     5,     1,     5,     3,     2,     1,     3,     2,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     0,
       6,     1,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     2,     0,     2,     0,     2,     0,     4,     0,     3,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     3,     0,     4,     4,     6,     2,     3,     3,
       3,     5,     1,     3,     3,     1,     1,     3,     3,     1,
       3,     2,     2,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     2,     3,     3,     0,     3,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     2,
       1,     1,     4,     3,     0,     7,     1,     2,     1,     1,
       1,     1,     1,     1,     0,     5,     1,     1,     1,     1,
       1,     0,     4,     6,     6,     6,     7,     5,     0,     4,
       8,     8,     8,     6,     0,     1,     1,     2,     0,     1,
       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     0,     1,     3,     1,
       2,     2,     2,     1,     3,     3,     1,     1,     3,     1,
       3,     4,     5,     4,     6,     1,     0,     3,     3,     1,
       1,     0,     2,     2,     2,     2,     0,     2,     0,     3,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     1,     0,     2,     2,     1,     0,     1,     1,
       2,     3,     2,     0,     6,     3,     0,     0,     0,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     2,
       1,     2,     3,     3,     3,     0,     3,     3,     0,     7,
       0,     3,     1,     3,     0,     3,     0,     3,     4,     1,
       3,     0,     3,     0,     3,     4,     4,     0,     0,     0,
      16,     8,     7,     0,     0,     0,     0,     0,    15,     0,
       0,     0,     0,    12,     4,     4,     3,     4,     3,     2,
       1,     3,     5,     1,     1,     0,     1,     1,     0,     2,
       0,     0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2666,  1103,  2597,     0,     0,     0,     0,     0,     0,
    2599,   123,    63,  1727,  1848,  1849,  1630,  1659,     2,     0,
    1103,   272,   176,     0,    75,  1668,     0,  1911,     0,     0,
    1103,   486,     0,  1901,     0,     0,  1103,  1671,  1890,   249,
     176,  2599,     0,  1149,  2397,  1765,     0,     0,     0,  1748,
       0,     0,  1716,     0,     0,     0,     0,     3,     8,    19,
       0,    39,    24,    29,    14,    18,    13,    52,    46,    26,
      37,    10,    54,    55,    16,    43,    11,    12,    15,    35,
      42,    36,    38,    50,  1140,    22,    23,    30,    44,    59,
      20,    56,    53,    21,  1850,    25,    45,    40,    32,    60,
      33,    51,    34,    58,    28,    47,    27,     9,    17,    48,
      49,    41,    61,    31,    57,     0,   950,     0,     0,  1027,
       0,     0,     0,     0,   176,     0,   930,  2664,  2665,  2666,
    1105,  1104,     0,  2599,  2016,  1088,  1114,  2079,  2080,  2081,
    2082,  2083,  2084,  2085,  2087,  2086,  2030,  2088,  2090,  2089,
    2091,  2092,  2031,  2032,  2093,  2094,  2095,  2097,  2096,  2098,
    2033,  2034,  2099,  2100,  2101,  2102,  2103,  2035,  2036,  2104,
    2107,  2106,  2105,  2037,  2108,  2109,  2110,  2113,  2112,  2111,
    2038,  2114,  2039,  2115,  2116,  2117,  2118,  2119,  2120,  2121,
    2122,  2124,  2123,  2040,  2125,  2126,  2127,  2128,  2129,  2131,
    2130,  2132,  2133,  2134,  2041,  2135,  2136,  2137,  2138,  2139,
    2140,  2141,  2142,  2143,  2042,  2144,  2145,  2146,  2166,  2043,
    2147,  2150,  2149,  2148,  2151,  2152,  2153,  2155,  2154,  2156,
    2157,  2044,  2158,  2159,  2160,  2161,  2162,  2164,  2163,  2168,
    2169,  2170,  2045,  2046,  2165,  2167,  2376,  2171,  2173,  2172,
    2174,  2176,  2175,  2047,  2177,  2048,  2049,  2178,  2179,  2013,
    2180,  2014,  2182,  2184,  2185,  2181,  2186,  2191,  2050,  2183,
    2187,  2188,  2189,  2190,  2192,  2051,  2193,  2194,  2195,  2196,
    2197,  2198,  2199,  2200,  2201,  2202,  2224,  2213,  2215,  2206,
    2208,  2209,  2211,  2207,  2214,  2212,  2218,  2217,  2219,  2220,
    2221,  2222,  2223,  2216,  2204,  2210,  2205,  2225,  2226,  2203,
    2227,  2228,  2229,  2230,  2231,  2232,  2233,  2234,  2235,  2236,
    2237,  2239,  2238,  2240,  2241,  2242,  2243,  2244,  2245,  2247,
    2246,  2248,  2249,  2250,  2252,  2251,  2254,  2255,  2052,  2253,
    2256,  2257,  2258,  2259,  2260,  2261,  2053,  2054,  2055,  2262,
    2263,  2056,  2264,  2266,  2265,  2267,  2268,  2269,  2270,  2271,
    2272,  2273,  2057,  2058,  2274,  2275,  2276,  2277,  2278,  2279,
    2280,  2281,  2282,  2283,  2284,  2285,  2286,  2287,  2289,  2288,
    2290,  2291,  2292,  2293,  2294,  2295,  2296,  2059,  2297,  2060,
    2298,  2299,  2061,  2300,  2062,  2301,  2302,  2303,  2304,  2063,
    2305,  2306,  2307,  2309,  2310,  2308,  2311,  2064,  2312,  2313,
    2314,  2065,  2316,  2315,  2317,  2066,  2319,  2320,  2067,  2318,
    2069,  2321,  2322,  2068,  2070,  2323,  2324,  2325,  2326,  2327,
    2329,  2328,  2330,  2331,  2332,  2071,  2336,  2333,  2334,  2335,
    2337,  2072,  2338,  2339,  2340,  2341,  2342,  2344,  2343,  2345,
    2346,  2347,  2348,  2351,  2353,  2349,  2352,  2350,  2354,  2355,
    2356,  2357,  2358,  2361,  2362,  2363,  2364,  2365,  2366,  2367,
    2368,  2369,  2371,  2370,  2372,  2359,  2360,  2073,  2373,  2374,
    2375,  2377,  2378,  2380,  2379,  2074,  2075,  2381,  2382,  2078,
    2383,  2384,  2385,  2388,  2386,  2387,  2390,  2389,  2391,  2393,
    2392,  2076,  2394,  2077,  2395,  2396,   195,  2019,   178,  2020,
    2029,     0,  2471,  2470,  1072,  1089,  2600,  2601,   879,   581,
     581,   880,     0,     0,   881,     0,   580,   878,   176,  2666,
     128,     0,   577,   578,     0,   872,   874,   875,   873,     0,
       0,  1741,     0,  1657,  1657,  1657,  1657,     0,     0,  1657,
    1657,     0,  1660,  1657,   176,  1657,     0,    68,  1857,   273,
       0,  2508,     0,     0,     0,  2012,     0,  1674,     0,  1912,
    1913,     0,  1920,     0,  1921,  1915,     0,  2471,  2465,  2468,
       0,     0,     0,     0,     0,   176,  1106,     0,  1725,     0,
     239,   248,   250,   251,   247,  2501,  2601,  2612,  1141,  1147,
    1159,  2399,     0,  1828,   251,  1059,  1042,  1059,  1749,  1746,
       0,  2480,  2481,  2479,  1725,  1914,  2723,     0,     0,     0,
    2719,     0,  2724,     0,  1149,     0,     0,     1,     5,     0,
       0,  2161,  2046,  2266,  1841,  1839,  2007,     0,   921,   951,
       0,   926,     0,   924,  2025,  2024,  2023,     0,   937,   936,
     934,     0,   450,     0,     0,     0,  2675,   928,  1086,  2598,
       0,   197,     0,    77,     0,     0,     0,  2604,     0,     0,
       0,     0,     0,   127,     0,     0,     0,   124,  1174,  1174,
    2666,  2668,  2670,   581,   579,     0,   876,   877,     0,     0,
    1745,  1744,  1743,     0,  1741,  2080,  2030,  2092,     0,  1980,
       0,     0,     0,  1428,     0,  2035,     0,  2108,  2110,  2040,
       0,     0,  1181,  1181,   742,     0,     0,     0,  2133,  2134,
    1986,     0,     0,     0,  1977,  1987,  2046,  2173,  2174,     0,
    1979,  2179,     0,     0,     0,     0,  2197,  1984,     0,     0,
    2234,  2236,     0,     0,  2240,  2241,  2242,  2243,  1963,  1236,
       0,   742,  1976,  1983,  2259,  1969,  2267,  2272,  2273,     0,
    2282,     0,     0,  2304,     0,  2310,  2308,  2314,     0,     0,
    2341,     0,     0,   742,  1962,  2361,  2362,  2363,  2364,     0,
    1978,  2073,  1985,     0,  2383,  1181,   742,   742,     0,     0,
       0,  2391,  2393,  2396,     0,     0,     0,  2636,  1235,     0,
    1393,     0,  1310,  1422,  1193,  1199,  1213,     0,  1228,  1246,
    1247,  1249,  1348,  1248,  1254,  1253,  1631,  1973,  1252,  1251,
    1974,  1975,  1245,  1997,  2019,  1996,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1661,     0,     0,  1642,  1657,
      70,     0,     0,     0,  2009,  1537,  2483,  2484,     0,    76,
    1676,  1677,  1675,  1026,     0,  1910,     0,  1924,     0,     0,
       0,  1101,   496,   487,     0,     0,  1823,     0,  1822,     0,
    1902,  2613,     0,     0,  1077,  1679,  1726,     0,  1678,  1898,
    1896,     0,  1894,  1891,  1893,   240,     0,     0,   270,     0,
    2607,  2604,  2614,  2649,  2644,  2643,  2646,  2647,  1165,  2648,
    1164,  2645,  2642,  1174,  1160,  1162,  1163,     0,   789,     0,
       0,  2421,  2422,  2247,  2267,  2423,  2359,     0,     0,  2442,
    2398,  2407,  2403,     0,     0,   789,  1836,  1836,     0,     0,
    1836,     0,  1572,  1826,  1829,     0,  2425,  1797,   870,   869,
    1836,   868,  2426,  1822,     0,  1773,  1785,     0,  1750,  1790,
       0,  2427,     0,  1825,     0,  1836,  1836,  1836,  1572,  1836,
       0,  1766,     0,     0,     0,     0,   246,  1064,  1063,  1038,
    1060,  1061,     0,     0,  1041,  1043,  1044,  1040,     0,  2736,
    1026,  1968,  1967,  2017,  2720,  1966,  2728,  2730,  2716,  2718,
    2725,  1143,     0,  2618,     6,    62,     0,     0,  1854,  2673,
    2674,  2672,   805,     0,  1181,  2026,  2667,   179,   935,     0,
     451,   179,     0,     0,     0,     0,     0,   452,   453,   385,
     939,     0,   919,   932,     0,     0,   931,  2675,     0,     0,
    1116,  1118,  1117,  1134,   199,   196,   177,     0,  1074,  1650,
    1652,  1091,  2603,     0,     0,  2605,  2609,  1234,  1233,     0,
       0,   121,   126,     0,     0,     0,  2575,   125,  2569,  2671,
    1174,  1174,  1174,  2663,     0,  2651,  2658,  2659,  2662,  2661,
    2660,  2657,     0,  2650,  2653,  2654,  2656,  2655,  2675,  2669,
       0,   882,   882,   882,     0,  1728,  1731,  1735,  1739,  1742,
       0,     0,  1542,  1267,  1542,  1542,  1542,  1429,     0,     0,
       0,     0,     0,     0,     0,     0,  1542,     0,  1304,  1277,
       0,  1305,     0,     0,     0,  1988,     0,     0,     0,  2636,
       0,     0,     0,     0,  1398,     0,     0,     0,  2636,     0,
       0,     0,     0,     0,  1424,  1426,  1996,  1542,     0,     0,
    1542,     0,     0,     0,     0,     0,  1186,   785,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1542,  1542,     0,     0,  1542,  1318,  1990,     0,     0,
       0,  1989,     0,     0,     0,  1982,  1981,  1964,     0,  1321,
    1323,  1322,     0,  1542,  1542,     0,     0,     0,  1257,  1256,
    1258,     0,     0,     0,     0,     0,     0,  1232,  1231,  1230,
    1229,     0,     0,     0,  1237,     0,  1238,  1239,     0,  1240,
    1241,  1242,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1259,     0,     0,     0,  1965,  1357,     0,  1658,  1649,
    1637,  1644,  1639,     0,  1661,  1640,  1648,   465,   464,  1666,
    1667,  1646,  1662,  1663,     0,  1645,  2567,  1641,     0,  1632,
       0,    69,     0,  1887,  1880,  1885,     0,     0,     0,  1876,
    1884,  1878,  1877,     0,     0,  1886,     0,  1879,  1883,  1882,
    1881,  1858,  1862,  1868,  1859,     0,     0,   271,   274,   276,
       0,   279,  2518,  2533,  2534,  2530,  2535,  2553,  2536,  2540,
       0,  2532,  2524,     0,  2539,     0,  2528,  2537,     0,  2522,
       0,  2538,  2543,  2554,  2526,  2531,  2509,     0,  2516,  2520,
    1538,  1539,     0,  2482,     0,  2008,     0,     0,  1124,  1925,
    1926,  1922,  2466,  2467,  1537,  2469,  2472,     0,   497,     0,
       0,   508,     0,     0,    65,    66,     0,     0,     0,  1108,
       0,  1107,  1111,     0,     0,     0,  1682,  1672,  1681,  1463,
    1897,  1899,     0,   238,   263,   258,   266,   260,   262,   261,
     267,   268,   269,   264,   259,   265,   252,     0,  2518,     0,
    2502,     0,  2608,     0,  2610,  2627,  1148,  2615,  1171,  1150,
    1170,     0,  1161,     0,  2401,     0,   788,     0,   791,   793,
    1701,  1702,   792,   801,     0,   790,     0,     0,     0,  2428,
       0,   797,   799,   798,  2437,   796,     0,     0,  2412,  2433,
    1832,     0,     0,  1806,  1796,     0,   581,     0,     0,     0,
       0,     0,     0,  1767,     0,     0,   624,     0,  1789,  1573,
    1830,  1831,  1836,     0,     0,  1836,     0,  1810,  1802,  1826,
       0,  1836,  1762,     0,     0,  1754,  1759,  1755,     0,  1761,
    1760,  1763,  1751,  1752,  1832,  1778,  1803,  1826,  1809,  1808,
    1807,  1788,  1795,     0,  1777,  1784,     0,  1793,  1826,  1826,
    1836,  1836,  1065,     0,  1048,  1049,     0,     0,  1747,  1466,
       0,     0,  2717,  2731,  2715,  2726,  2727,  2714,  1144,  2619,
    1142,  2620,     0,     7,     4,  1853,  1843,  1844,  1845,  1846,
    1847,  1842,  1840,  1855,  1856,   806,   805,   572,   575,   574,
       0,     0,  2028,     0,   927,     0,   439,   925,     0,     0,
     417,   396,   417,   454,     0,     0,   805,   942,     0,     0,
     929,  1087,     0,     0,   485,  1134,  1120,  1136,     0,   200,
     202,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    78,    79,   101,  1076,  1075,
       0,  1073,  1099,  1098,  1096,     0,  1097,  1095,  1090,  1092,
    1093,  2602,  2606,   582,     0,   805,   427,     0,   388,     0,
       0,     0,     0,     0,   581,     0,     0,  2652,   110,   883,
       0,     0,     0,  1733,  1654,  1463,  1656,  2007,     0,     0,
       0,  1737,     0,     0,  1543,  1542,     0,  1407,     0,     0,
       0,     0,  1430,     0,     0,     0,     0,     0,     0,     0,
    1378,     0,  1407,  1182,     0,   743,  1328,     0,     0,     0,
       0,     0,     0,  1513,  1514,  1515,  1516,  1524,  1517,  1518,
    1519,  1526,  1531,  1520,  1521,  1527,  1528,  1529,  1522,  1530,
    1525,  1523,  1532,     0,  1512,     0,     0,  1536,  1533,  1535,
    1534,     0,  1399,  1391,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1542,     0,     0,     0,  1542,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1340,     0,     0,
       0,     0,     0,  1542,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1300,     0,  1999,  1998,     0,     0,
       0,   838,     0,  1261,     0,  1260,  1475,     0,  2621,  2637,
       0,  2428,  1394,  1396,     0,  1184,  1183,  1185,  1196,  1189,
    1194,  1187,  1191,     0,  1243,  2087,  1197,     0,     0,  1225,
    2636,  1551,  1226,  1211,  1216,  1217,     0,  1214,  1215,     0,
    1219,     0,  1218,  1222,  1223,  1224,  1227,     0,     0,     0,
       0,  1250,  1255,  1423,  1174,  2000,     0,  1634,  1647,  1824,
    1664,  1703,     0,  1028,     0,     0,    71,    73,  1873,  1870,
    1869,  1871,  1875,  1874,  1872,     0,  1888,  2133,  2361,  2364,
     283,     0,   256,   255,   257,   280,     0,     0,  2519,  2517,
    2551,  2550,  2555,     0,  2552,  2548,  2541,  2576,  2545,     0,
    2576,  2547,  2546,  2576,  2542,  2549,  2576,  2514,     0,  1541,
    2169,  2251,     0,  1544,  2486,  1669,  2735,     0,  1923,     0,
       0,     0,  1102,     0,  1174,   495,   494,   493,   492,     0,
     510,   490,   498,    67,     0,     0,  1905,  1608,  1609,  1605,
    1603,  1604,  1904,  1606,  1607,     0,     0,  1903,     0,     0,
       0,     0,  1079,  1680,     0,     0,  1653,  1464,  1900,  1895,
    1892,     0,     0,  2517,     0,  2514,  2611,  2629,  2628,  2616,
    1174,  1563,  1175,  1175,  1996,     0,     0,     0,  2444,     0,
    2439,  2438,     0,     0,     0,  2457,  2440,     0,     0,  2406,
    2445,  2446,  2449,     0,     0,     0,     0,     0,  2443,  2359,
    2408,  2409,  2414,  2404,     0,     0,  1834,  1837,  1838,     0,
       0,  1818,  1812,  1811,  1800,  1813,  1801,  1821,  1820,  1819,
    1775,  1774,  1583,  1584,  1582,  1576,  1577,  1581,  1580,  1770,
    1827,  1817,  1815,  1798,  1836,  1816,  1814,  1756,  1757,  1758,
       0,  1572,     0,  1834,  1804,  1805,  1836,  1826,     0,  1836,
    1836,  1792,  1794,     0,  1051,  1062,  1046,  1045,  1484,  1483,
       0,  1437,     0,  1439,  1436,  1435,  1434,     0,  1483,  2721,
    2729,  2733,     0,  1572,  2626,  2624,   573,  1703,  1703,     0,
    2027,     0,     0,     0,     0,     0,     0,     0,   180,   189,
       0,     0,   394,   395,  1703,   393,   440,   441,   444,   445,
     446,     0,     0,     0,     0,     0,     0,     0,     0,   133,
     447,  1703,  1703,   390,   418,   419,   422,   423,   424,   425,
     426,   386,     0,   391,     0,   940,  1024,  1703,  1024,     0,
    1703,  1703,  1024,  1703,     0,     0,  1703,  1703,     0,     0,
    1703,     0,     0,  1024,     0,  1703,     0,  1011,     0,     0,
    1703,  1703,  1703,  1703,  1703,  1024,     0,     0,  1703,   485,
    1703,     0,     0,  1034,     0,     0,  1703,  1703,  1703,  1703,
       0,     0,  1703,     0,  1703,   958,  1010,   585,   611,   612,
     920,   957,   959,   971,   481,     0,   989,  1013,  1014,  1012,
       0,   944,   946,  2676,  2677,  2678,  1123,  1115,  1122,  1119,
    1134,  1132,  1121,   865,   864,     0,  1135,   198,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,  1100,  1094,     0,     0,   131,
     130,   122,   805,  1703,  1703,  1703,  1703,   392,   428,   429,
     432,   433,   434,   435,   438,   436,   437,     0,     0,   404,
       0,     0,  2570,     0,  2709,     0,     0,     0,   178,   583,
       0,     0,   884,     0,     0,     0,     0,     0,  1729,     0,
    2010,  1736,  1466,  1740,  1739,     0,  1324,     0,  1371,     0,
    1373,  1374,  1375,     0,     0,     0,     0,     0,  1325,     0,
    1275,  1326,  1327,     0,     0,     0,     0,  1377,     0,   744,
       0,     0,  1278,  1279,  1272,  1264,     0,     0,  1350,     0,
       0,  1280,     0,     0,     0,     0,     0,  1351,  1425,     0,
    1427,  2000,     0,  1383,  1332,  1285,     0,  1381,     0,  1286,
    1352,  1353,  1354,  1334,  1335,     0,  1356,     0,  1336,     0,
       0,  1339,     0,     0,  1288,  1387,  1385,     0,     0,     0,
       0,  1389,  1290,     0,     0,     0,  1289,     0,     0,     0,
       0,     0,     0,     0,  1292,     0,  1273,  1386,  1388,  1342,
       0,     0,     0,     0,     0,  1301,     0,  2630,  1474,  2638,
    1475,     0,     0,  2632,  2622,  2627,  2635,  1265,     0,     0,
    2001,  1190,  1195,  1188,  1192,  2636,     0,     0,     0,     0,
    1209,  1208,     0,     0,     0,  2636,  1551,  1212,     0,     0,
    1367,  1368,  1420,     0,  1638,  1635,  1665,  1704,     0,  2568,
    1030,  1029,  1643,  1028,    74,     0,  1867,  1889,  1860,     0,
     275,   284,   277,   281,   282,   278,  2544,     0,  2525,     0,
    2529,  2523,  2527,     0,     0,  2515,     0,  2521,  2496,  2490,
    2497,  2499,  2493,  2498,  2500,  2491,  2492,  2487,  2494,  1545,
    1574,     0,  1125,  1127,  1128,  1126,  1134,     0,     0,  2475,
    2476,  2474,  2473,   500,     0,  1594,  1595,  1593,  1596,   509,
    1597,     0,   521,     0,     0,     0,  1909,  1908,  1907,  1906,
       0,  1109,  1112,  1113,  1084,  1083,  1085,  1078,  1080,  1081,
     565,  1686,     0,     0,     0,  1692,  1673,  1683,     0,     0,
     253,     0,     0,     0,     0,     0,     0,  1169,  1466,  1623,
    1166,  1154,  1574,  1564,  1153,  1176,  1172,     0,  2400,  2402,
    2463,  2464,  2461,  2462,  2460,  2432,   804,   803,   802,   800,
       0,     0,     0,     0,  2451,  2452,     0,     0,  2429,  2430,
    2431,     0,  2435,  2411,  2412,  2413,     0,  2434,  1833,     0,
    1779,     0,  1799,     0,     0,  1772,     0,  1791,  1753,  1781,
    1771,  1544,  1826,  1768,  1769,     0,  1071,     0,  1067,  1066,
       0,  1039,  1053,     0,  1483,  1466,     0,     0,  1460,  1485,
       0,  1485,  1466,  1466,     0,  1466,  1463,  1480,     0,     0,
    2732,  1565,  2625,     0,     0,   923,   183,   186,   184,     0,
     185,     0,     0,   449,   448,     0,  1824,   442,   137,   136,
     138,   139,  1591,  1592,  1588,  1589,  1587,  1590,   141,   140,
     135,   938,     0,     0,     0,  1824,   420,   397,   398,   401,
     402,   403,     0,  1025,   913,  1103,   993,     0,   665,   913,
     861,   866,   866,   991,     0,     0,  1103,     0,     0,     0,
       0,     0,  1103,     0,     0,     0,  1703,     0,  1004,   953,
       0,     0,     0,     0,     0,  1005,     0,     0,   954,  1703,
       0,     0,     0,     0,     0,     0,  1103,     0,     0,   483,
       0,  1103,   485,  1037,  1036,  1035,     0,  1103,  1103,     0,
       0,     0,     0,   617,   618,   616,     0,     0,   609,   586,
     805,   955,   482,   956,   664,     0,  1031,   661,   667,  2003,
       0,     0,     0,   147,  2680,     0,  1504,   201,   102,   100,
      82,  2015,    86,    88,    81,   106,  1601,  1602,  1600,  1598,
    1599,   107,    84,    85,    87,    91,    90,    92,    93,    96,
      97,    94,    89,    95,    83,    98,   108,   109,    80,   129,
       0,     0,     0,     0,  1824,   430,     0,     0,  1703,   387,
     405,   406,   409,   410,   411,   412,   413,   416,   414,   415,
       0,  2571,  2573,     0,     0,   381,   380,     0,   142,  2703,
       0,     0,   664,   111,   481,   584,   587,   906,   908,   907,
     898,   897,   112,   115,   118,  1655,  1739,  1466,  1544,  2008,
    1544,     0,  1738,     0,     0,  1372,  1408,     0,  1431,     0,
    1269,   756,   756,   740,  1416,   736,   756,  1412,   740,  1414,
       0,     0,     0,     0,     0,  1379,  1376,     0,     0,     0,
       0,     0,  1402,     0,     0,     0,  1274,     0,  1362,  1384,
    1382,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1390,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   827,   833,   836,
     837,   839,   831,     0,  1344,  1262,  1174,  2639,  2641,  1145,
       0,  2631,  2633,   915,  1395,     0,  1206,  1202,     0,  1200,
    1550,  1221,  1220,     0,     0,     0,  1210,  1175,  1358,  1174,
       0,  1421,  2002,  1015,   463,   623,  1633,    72,  1863,     0,
       0,  2580,     0,  2579,     0,  2563,  2566,  2007,     0,     0,
       0,     0,     0,  2485,  1575,  1713,     0,  1134,  1138,  2018,
    1916,  2477,  2478,     0,   501,   502,   504,  1175,   518,   496,
       0,   488,   491,     0,   500,     0,  1082,  1159,     0,  1705,
    1690,  1697,  1691,     0,     0,     0,  1689,  1992,  1991,  1998,
    2614,     0,  1510,     0,     0,     0,     0,     0,     0,  2617,
    1544,  1544,  1617,     0,     0,  1151,  1156,  1152,  1155,     0,
    1173,  1180,  1179,  1993,  2000,  2441,     0,     0,     0,     0,
    2456,  2450,  2447,  2448,     0,  2410,  2416,  2415,  2418,  2420,
    1835,  1572,  1787,  1786,  1579,  1578,  1764,  1572,  1783,  1836,
       0,     0,     0,     0,     0,  1055,     0,     0,  2621,  1478,
       0,  1462,  1461,  1486,     0,  1466,  1485,  1485,     0,  1442,
    1441,  1717,  1720,     0,  1440,  1537,  1468,  1159,  2722,  2734,
       0,   622,   621,   188,   187,   193,   194,   455,   466,   467,
     443,   134,   456,   457,   421,     0,   399,   941,   666,   914,
     976,     0,     0,     0,   660,   913,   866,   882,   867,   913,
     913,  1020,  1021,     0,     0,   596,   593,   995,   605,   974,
     965,   975,   986,   988,     0,   595,   619,     0,     0,   607,
       0,   960,  1002,  1003,  1028,   590,     0,     0,   640,   641,
     639,   613,   620,  1022,  1023,   591,   592,   997,     0,  1559,
    1561,  1569,   598,   597,     0,   594,     0,   973,  1008,   981,
       0,   630,   628,   625,   627,   626,   629,   631,   632,   633,
     634,   635,   636,   637,   638,   608,   600,   599,   602,   601,
     604,   603,   606,   970,     0,  1024,  1024,   990,     0,   648,
     649,   651,   652,  2006,     0,  1033,   992,     0,   653,   662,
     654,     0,     0,     0,   157,     0,     0,   943,     0,   150,
     148,   159,     0,     0,     0,  1507,     0,  1508,  1505,  1506,
       0,   103,   105,   462,   461,   460,   459,   431,     0,     0,
       0,  1824,   407,  2572,     0,     0,  2710,   384,   382,   383,
       0,     0,   203,   646,   647,   645,   644,     0,   470,     0,
     468,     0,   480,     0,  1927,   805,   588,     0,     0,     0,
       0,  1544,  1563,  2011,  1732,     0,  1302,  1432,     0,     0,
     757,  1409,   813,     0,  1418,     0,  1419,   738,   737,  1411,
    1413,  1417,  1415,  1268,  1276,  1349,  1271,  1270,     0,     0,
       0,  1308,  1330,     0,  1309,     0,  1400,     0,     0,  1282,
       0,  1284,     0,     0,  1364,  1333,  1355,  1311,  1337,     0,
    1287,  1263,     0,  1312,     0,  1317,  1315,     0,  1291,     0,
       0,  1298,     0,  1296,     0,  1297,     0,  1299,  1341,  1343,
       0,     0,   838,   824,   825,   826,     0,   828,   830,   832,
       0,     0,  1476,  2640,  1146,     0,     0,  1397,  1198,     0,
    1207,  1204,     0,  1201,  1176,  1369,  1359,  1636,  1017,  1016,
    1865,     0,  1861,   292,   287,   295,   289,   291,   290,   296,
     297,   298,   299,   293,   288,   294,   286,   285,  2577,     0,
    2588,     0,     0,     0,     0,     0,     0,  1546,     0,  1670,
    1129,  1134,  1138,     0,  1130,  1927,   505,     0,     0,     0,
     525,     0,   523,   499,     0,  1110,  1174,  1687,  1699,     0,
    1707,     0,     0,  1684,  1694,     0,     0,     0,  1693,   485,
       0,   254,     0,  2507,     0,     0,     0,  1574,  1552,     0,
       0,  1629,     0,  1624,  1167,     0,  1178,  1177,     0,  2459,
    2458,  2454,  2453,  2455,  2436,     0,     0,  1780,  1782,  1776,
    1070,  1069,  1068,  1052,     0,     0,  1057,  1047,  2627,  1537,
    1470,  1466,  1438,  1466,  1449,     0,     0,  1466,  1445,  1443,
    1447,     0,  1544,     0,  1502,  1174,  1995,  1566,  1569,   400,
     978,     0,   913,   862,   882,   863,     0,   882,   882,     0,
       0,   964,     0,  1091,     0,   969,   801,   614,  1001,  1000,
       0,   615,     0,   962,     0,  1570,  1571,  1562,   484,   961,
     983,   967,  1888,   994,   664,  1032,   843,   732,   681,   672,
     756,   675,   674,   718,   740,   686,   736,   734,   704,   736,
     736,   711,   710,   728,   714,   694,   813,   813,   693,   731,
     813,   715,   713,   717,     0,   719,   736,   724,   712,   716,
     733,   709,   706,   730,   756,   740,   740,   690,   729,   813,
       0,   722,   756,   760,   692,   813,   820,     0,     0,   756,
     758,  2005,   158,   146,     0,     0,   945,   947,     0,     0,
     948,  2682,     0,  2684,     0,  1137,     0,    99,     0,     0,
     389,   458,   408,  2574,     0,   214,  1174,     0,     0,   204,
     206,   207,     0,     0,     0,   583,  1929,  1928,   469,   568,
     589,     0,     0,     0,  1739,  1734,  1585,     0,  1433,     0,
       0,     0,     0,   807,   818,   816,   810,     0,   814,   815,
    1410,     0,     0,  1380,     0,     0,     0,  1403,     0,     0,
       0,     0,     0,     0,     0,  1266,     0,  1360,     0,     0,
       0,     0,     0,     0,  1295,  1293,  1294,   822,  1346,     0,
     835,   829,   827,   834,     0,  1574,  2621,   916,  1203,     0,
    1370,  1019,  1018,     0,     0,  2578,     0,  2513,  2565,  2564,
    2581,  2581,  2581,  1712,  1711,     0,  1710,  1714,  1131,  1139,
       0,   503,   506,     0,   498,     0,   522,     0,   489,   566,
       0,     0,     0,  1708,  1696,  2618,  1685,  1688,  2000,  1465,
    1511,     0,  2504,  2505,  2503,  1158,     0,  1547,  1628,  1625,
       0,  1618,  1620,  1622,     0,  1994,  2417,  2419,  1054,     0,
       0,  1050,  1471,  1469,  1479,     0,  1434,  1466,  1466,     0,
    1434,     0,     0,     0,  1719,  1563,  1721,  1467,  1499,  1481,
       0,  1568,     0,     0,   977,     0,     0,     0,     0,     0,
       0,  1007,     0,  1031,   966,   987,  1009,     0,   760,  1103,
    1560,   982,   984,  1079,     0,   650,     0,   847,   680,   673,
     691,   689,   745,   735,     0,   745,   745,   700,   718,   695,
       0,   813,   708,   699,   720,   723,   725,   727,   745,     0,
     813,   688,   687,   697,   684,   745,   768,     0,     0,     0,
       0,   764,     0,   841,     0,     0,   668,   761,   763,     0,
     771,     0,   721,   813,   677,   821,   820,   679,   813,   820,
     745,     0,   759,   745,     0,   144,   149,   160,   161,   933,
    2681,     0,  2679,     0,  1133,  1509,   104,     0,     0,   217,
     215,   216,     0,   210,   212,   207,  2697,     0,  2704,     0,
       0,  2702,   471,   473,   481,   569,     0,     0,  1569,   911,
       0,     0,     0,  1730,  1303,   754,   752,   755,   753,   809,
     808,   812,     0,   811,   820,   741,     0,  1306,  1307,  1331,
       0,  1401,  1392,  1329,     0,  1283,  1361,     0,     0,  1338,
    1313,  1316,  1314,  1319,  1320,     0,  1345,     0,  1166,  1166,
     642,  2634,  1205,  1866,  1864,     0,     0,  2586,  2586,  2586,
    2495,     0,     0,     0,  1174,   511,     0,   528,   527,   524,
    1574,  1698,  1700,  1706,  1695,  2506,     0,  1548,  1563,   794,
    1621,     0,  1168,  1056,     0,     0,  1450,     0,  1454,  1459,
    1455,     0,  1446,  1444,     0,  1585,  1503,     0,  1574,  1569,
     980,     0,   663,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1006,  1970,   996,   485,   998,   963,     0,
     968,   610,     0,   846,     0,   851,   749,   750,   751,   701,
     746,   748,     0,   703,   671,   696,   726,   702,     0,   698,
     685,   774,   782,   775,   777,   776,   773,   786,   766,   787,
       0,     0,   779,   780,   781,   762,   770,   772,   765,   676,
     678,   682,   683,   669,     0,   670,  2004,   151,   949,   320,
    2683,  2691,     0,  2693,  2686,   132,  2701,  2711,   214,     0,
       0,   155,     0,   205,   801,   208,  2618,  1927,     0,   476,
     885,     0,   910,     0,   887,   889,  1586,   819,   817,     0,
    1404,  1569,     0,  1363,  1365,   823,     0,  1477,   643,  2589,
       0,     0,  2585,  2583,     0,  2584,  2582,  2556,     0,  2511,
    2512,  2510,  1709,     0,     0,     0,   519,     0,     0,   553,
     567,  1556,  1569,     0,  1574,     0,  1626,  1619,  1058,  1472,
       0,     0,     0,     0,     0,  1718,  1491,  1492,     0,     0,
    1497,  1501,  1482,  1567,   979,     0,     0,   885,     0,     0,
    1972,  1971,   972,  1031,     0,   844,     0,   848,   849,   850,
       0,   842,   747,     0,   917,     0,     0,   778,   767,   769,
       0,   153,   346,     0,   332,   318,     0,     0,     0,   322,
     162,   165,   163,     0,   164,   170,     0,   171,   172,   173,
     174,   175,   166,   344,   345,   169,   167,   168,     0,  2021,
       0,  2022,  1149,     0,     0,  2689,     0,  2685,  2614,   181,
     211,     0,     0,   147,   156,  2705,   784,   474,   472,     0,
    2614,     0,  1703,   113,   886,   902,   901,   891,  1569,     0,
       0,   116,   888,   904,   895,   119,   890,   903,   893,   739,
       0,  1406,  1281,  1347,  2562,  2561,  2560,  2557,     0,     0,
       0,     0,     0,     0,  2587,  2591,     0,  1463,  1175,     0,
     512,     0,   515,   517,   531,     0,  1703,     0,     0,  1703,
    1703,  1703,  1703,   546,   554,   556,     0,  1557,  1558,     0,
    1553,  1555,  1549,  1610,   795,  1930,  2621,  1451,     0,  1456,
       0,  1448,  1487,  1487,  1498,     0,   885,   655,   887,   889,
     999,     0,   845,     0,     0,   813,     0,   813,     0,   152,
       0,   145,     0,     0,   331,   334,     0,     0,   337,   327,
     326,   328,     0,   321,   320,   320,   374,   325,   371,   370,
     363,  2692,     0,  2618,     0,     0,     0,  2687,  2712,   213,
    1174,   159,     0,   478,   477,   900,     0,  1015,   892,   909,
     912,     0,  1015,   896,  1015,   894,  1569,  2558,  2592,  2595,
    2593,  2594,  2596,  2590,  1715,  1723,     0,  1917,     0,   520,
     513,     0,     0,   529,     0,  1703,  1703,     0,     0,     0,
       0,     0,   526,   555,  1703,  1569,     0,  1157,     0,  1938,
    1473,     0,     0,     0,  1495,  1493,   659,   658,   656,   657,
       0,   857,     0,   856,     0,   853,   852,   705,   918,   707,
     783,   154,   347,   358,   361,   353,   333,     0,     0,     0,
     323,   320,     0,   307,   305,   306,   312,   313,   314,   315,
     316,   317,   308,   311,   309,   310,   320,     0,   222,     0,
       0,  2690,  2688,     0,  2694,     0,   191,   190,   182,     0,
     320,  2698,     0,  2706,  2618,   899,   114,   905,   117,   120,
    1405,     0,     0,   794,   507,   519,   516,   539,   532,   535,
       0,   564,     0,     0,   560,   561,   559,   557,   550,     0,
     548,     0,  1554,  1611,     0,     0,     0,     0,  1931,  1933,
       0,  1627,  1453,  1458,     0,  1488,     0,     0,     0,   985,
     859,   860,   858,     0,     0,     0,     0,   320,   354,     0,
     329,     0,   338,     0,     0,   220,   377,   375,   218,   365,
     365,  2695,  2696,   192,  2713,     0,   161,   181,   479,  1722,
    1724,  1918,   514,   539,     0,   537,     0,   533,   530,   534,
     562,   563,     0,   547,     0,   558,     0,     0,     0,     0,
       0,  1932,     0,     0,  1939,  1941,  1490,  1489,  1504,     0,
       0,     0,   355,   361,   351,   359,   320,     0,     0,   319,
       0,   373,   221,     0,     0,     0,   320,     0,   364,   366,
     368,     0,   143,  2707,  1944,   536,     0,   544,   540,   542,
     545,   553,   552,   549,  1613,  1936,  1937,     0,  1934,     0,
       0,  1940,     0,     0,   855,   854,     0,   352,     0,     0,
     350,   330,   335,   320,   378,   320,   232,   231,     0,   224,
     300,   372,     0,   223,  2699,   320,     0,  1930,   538,     0,
       0,   551,  1616,     0,  1614,  1935,  1943,  1942,  1496,  1494,
     356,     0,   320,     0,   320,     0,   320,     0,     0,     0,
       0,     0,   219,   320,  2708,     0,  1938,   543,   541,  1612,
       0,     0,   348,   320,   336,   341,     0,     0,   227,   301,
     302,     0,   229,  2700,     0,  1946,  1615,   320,   320,   337,
     340,   379,   376,     0,   303,   225,   226,   237,   236,     0,
    1945,     0,  1950,   320,   320,   342,   245,   243,   320,   233,
     241,   235,     0,   242,     0,   230,     0,     0,  1957,     0,
     228,   244,   304,  1948,  1949,  1947,  1952,     0,     0,  1954,
    1955,     0,  1919,   234,  1956,  1951,     0,  1958,  1960,     0,
    1953,     0,  1174,  1959,     0,  1175,  1961
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   629,  1504,    57,    58,    59,    60,    61,  1344,
      62,   840,  1261,  1806,  1807,    63,   566,    64,  1037,  1575,
    1576,  3140,  3141,  1577,    65,  2209,  3177,  4237,  3178,  4242,
    3179,  4244,  1595,   529,  2178,   530,  2048,  2049,  1063,  3161,
    3127,  3947,  3131,  4061,  4201,  4103,  2131,  3500,  3948,  3949,
    4070,   561,  2207,  1524,  4228,  2028,  4338,  2029,    66,   661,
    1035,  1548,  1549,  3518,  3519,  3780,  3520,  3772,  3773,  3774,
    3775,  4466,  4311,  4408,  4467,  4539,  4573,  4579,  4508,  4588,
    4589,  4590,  4577,   886,  4591,    67,   592,   593,   888,  1376,
    1820,  1377,    68,    69,   560,  1287,  1288,  1289,  1290,  2385,
    1821,  2380,  2381,  3296,  4509,  4575,  4594,  4312,  4313,  4208,
    4314,  4073,  4315,  4212,  4316,  4076,  4317,  4318,  4319,  4320,
    4458,  4321,  4207,  4501,  4308,  4309,  4460,  4555,  4570,  4322,
    4083,  4202,  4395,  4084,  4203,  4453,  4304,  4454,  4496,  4551,
    4305,  4396,  4499,  4399,  4323,  4329,  4468,  4324,  4330,  4325,
    4088,  4219,  4328,  4217,  4327,  4464,  4463,  4535,  2737,  3160,
     648,   649,   673,  2199,   650,  1052,  1008,  1526,  2061,  2062,
    2587,  2588,  2719,  2720,  2721,  2053,  2054,  2055,  2187,  2188,
    2189,  2035,  2036,  2037,  1530,  2032,  2033,   651,  1009,  1019,
    2056,  2057,  2058,  2725,  2191,  2192,  2193,  2194,  1249,  1250,
    3007,  2743,  3170,  3966,  3528,  4110,  4344,  3171,  3172,  2662,
    3074,  2141,    70,   581,   863,  1341,  2433,  1342,  2435,  2893,
    2894,  2895,  1865,  1866,  3845,  1870,  2432,  4006,  4355,  4151,
    4152,  2897,  4150,  2901,  3321,  3322,  3615,  3847,  4009,  4360,
    4262,  4428,  4358,  4424,  4359,  4426,  4520,  4478,  4479,  4272,
    4369,  4370,  4432,  4481,  4163,  4164,  4165,  2455,  2907,  3850,
    3786,  2181,  1516,  1517,   531,   532,   533,   669,  2744,  2116,
    2745,  2746,  3104,  2118,  2119,  2864,  1435,  3095,  3061,  3828,
    3167,  3108,  3109,  3110,  3111,  3112,  3118,  3024,  2597,  2598,
    2667,  3121,  3964,  3704,  3719,  3484,  3485,  3486,  3487,  3488,
    3489,  3490,  3196,  3197,  3194,  1111,  3909,  3910,  3911,  3190,
    3191,  3753,  3736,  3737,  3738,  4057,  3965,   802,  3928,  3547,
    1402,  1403,  4016,  1413,  1414,  2487,  1920,  2488,  1520,  3548,
    3549,  3550,  3747,  3251,  3825,  3257,  3258,  3259,  2827,  2828,
    2829,  2830,  2831,  2324,  3739,  3120,  3697,  3902,  3905,  4051,
    4295,  2599,  3025,  2600,  3029,   960,   534,  3740,   536,   537,
     538,  2601,  2602,  1609,  1610,  4113,  4121,  4125,  4114,  4126,
    4122,  4115,  4116,  4117,  4128,  4124,  2750,  3787,  3788,  3018,
    3267,  4053,    71,  1536,  1002,  1011,  1007,  1027,   656,  1537,
    1020,  2132,  2673,  3759,   638,  2120,  3689,  3413,  3693,  2121,
    3040,  2122,  3400,  3674,  2123,  3430,  3691,  3899,  3041,  3042,
    2124,  2125,  2126,  3412,  3422,  4043,  3277,  3278,  3279,  2603,
     125,  2372,  3116,  2646,    72,  1482,    73,   974,   975,   976,
    2531,  2532,  2975,  3376,  3651,   969,   970,   971,  1994,  2529,
      74,   664,  1581,    75,  1354,  2447,  2448,  2449,    76,  1028,
      77,    78,   665,  1588,  1589,  1590,    79,  1337,   132,    80,
     873,  1349,  1351,  1352,    81,   660,  1029,  1030,  1031,  1032,
    2137,    82,  1857,  2412,  2413,  2414,  2415,  1545,  2675,  1546,
    1547,  2146,  3314,    83,    84,   626,  2332,   598,   892,   599,
     600,  1911,  2470,  3829,   903,   904,   905,  2935,  1389,  1390,
    1391,  2475,  2940,  1108,   803,   804,   805,   806,  1202,  1203,
    3741,   807,  1212,  1767,   808,   809,   810,   811,   812,   813,
    1794,  3223,  3224,  3567,  2359,  2360,  2361,   814,  2246,  3208,
    2260,   815,  1195,  1752,  1683,  3559,  3216,  3810,  3980,  1626,
    2229,  2780,  2860,  2326,  1133,  1134,  1098,  2236,  1632,  2001,
    2002,  2003,  2004,  2005,  3662,  3661,  3663,  4020,  3867,  4022,
    3871,  2543,  1896,  1897,  2006,  2007,  2977,  3865,  4176,  2327,
    2328,  2329,  3585,  2978,  3381,  2996,  2997,  3878,  2534,  2008,
    2984,  4284,  4029,  4030,  4388,  4387,  4031,  3876,  3877,  3667,
    3668,  3136,  3137,  3138,  2921,  1673,  1674,  1681,  1322,  1323,
    1627,  2410,  2882,  3858,  4013,  2350,  3637,  4011,  4170,  2129,
    3069,  3070,  2472,  2473,  3000,  3397,  3427,  1438,  3830,  2884,
    1965,  1966,  3793,  4578,  2832,  2691,  3008,  2430,  1884,  4277,
    4436,  4523,  4524,  3351,  3352,  3641,  3642,  2474,  2932,  3353,
    3859,  4175,    85,   542,    86,  1804,  2365,  2863,  1258,  2377,
    1039,  1356,  1613,  1614,   827,   556,  1251,  1252,  1253,    87,
     567,  2411,    88,   588,  1894,   853,   877,  1357,  1358,  2456,
    2908,  2915,  2457,  2920,  3625,  2910,  3327,  3328,  2367,  2368,
    2911,  3330,  3622,  3605,  3606,  3309,  3842,    89,   614,  3392,
    2991,  2992,  4254,  4255,   878,    90,   541,  1085,  2758,  1619,
    2217,  1086,  1087,  2220,   693,   694,    91,   978,   609,  1461,
    1462,  1463,  1981,    92,   603,   961,  2961,  2967,  1960,   869,
    1254,  1442,   964,  1443,  1946,  2510,  1423,    93,   998,   997,
    1511,    94,   634,  1512,    95,   841,  1281,  1816,  2868,  3282,
    3593,  1282,  1283,  2378,    96,   589,   883,   884,  1361,  1899,
      97,   583,   870,  1887,  1876,    98,   571,    99,   100,   857,
    3315,  4353,  4474,   575,  1859,  1331,  3529,  4279,  4378,  4379,
    4381,  4444,  4445,  4517,  4582,  4605,  4598,  4608,  4609,  4612,
    4617,  4618,   817,   984,   818,  3893,   819,   820,   821,  2916,
    2917,  3398,   822,  2918,   823,  3019,  1040,  1616,   564,   507,
    2680,   645,   985,  2890,   825,  4090,  1005,  1056,   509,   510,
     101,   602,   907,  1393,   920,  1418,  1408,  1417,  1940,  2504,
    1943,  2505,  2506,  3365,  2957,  3366,  2958,   965,  1936,  1394,
    2959,  1944,  1395,  1929,  1930,  1931,  1932,  2951,  1926,  2485,
     102,   578,   860,   514,  1335,  1336,  2421,   103,   613,   104,
    1324,  1853,  1854,  2407,  2881,  2408,   105,   889,  1380,   106,
     843,  1316,  2396,  1317,  1829,  1318,  1319,  1843,  1837,  1846,
    1840,  4138,  3996,  3997,  2878,  1257,  1057,  1058,  2388,  2872,
    2873,  3837,  3999,  3597,  4144,  4145,   107,   133,   517,   667,
    1046,  1383,   108,   109,   110,   111,  1386,  1499,  2466,  1500,
    2333,  1501,  1502,  2015,  1909,  1748,  1749,  3265,  1192,  1193,
    2336,  2836,  2837,   906,   677,  1073,  1065,   126,   127,   128,
     680,   681,   129,  1025,  1026,  2674,  3133,  3502,  3762,  3763,
    3953,  4098,  4094,  4095,  4092,  4097,  1067,  3960,  4415,  4543,
    1068,  1069,  3162,  3962,  4232,  4417,  4515,  1070,  2734,  3515,
    4099,  4340,   112,   986,   623,  1497,  1492,  1494,  2011,  2550,
     113,   114
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3942
static const int yypact[] =
{
    4920,  1796,  1584, -3942,  -109,   227, 48959,   767,  1553,  1553,
     480,  2733, -3942, -3942, -3942, -3942, -3942,  2775, -3942, 48959,
    1584,  1040, -3942, 24242, -3942, -3942,   783,   210,   215,   376,
    1584, -3942, 48959, -3942,   761,  1358,  1584, -3942, -3942, 42629,
   -3942,   480, 48959, -3942,   765, -3942, 42629,  -106,   879,   838,
    1045,   393, -3942, 48959,  2114,   693,  1475,  1328, -3942, -3942,
    1099, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, 24877, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942,  1362, 48959,  1401, 48959, -3942,
    1429, 48959, 40730, 48959, -3942,  1044,  1513, -3942, -3942,  1565,
   -3942, -3942,  1553,   480, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  1196, -3942,
   -3942,  1262, -3942, -3942, -3942, -3942, -3942,  1905, -3942,  1672,
    1672, -3942,  1730, 40730, -3942, 48959, -3942, -3942, -3942,   264,
   -3942,  1431, -3942,  1433,  1753, -3942, -3942,  1920,  1422,  1810,
    1815,   128, 11332,  1788,  1788,  1788,  1788, 48959,  1860,  1788,
    1788, 48959, -3942,  1788, -3942,  1788,  1553, -3942, -3942, -3942,
    1936, -3942, 48959,  1720,   979,  -107, 40730,  1439, 48959, -3942,
   -3942, 11332, -3942,  1847, -3942, -3942,  1925,  1939, -3942, -3942,
    1553,  2055,  1940,  1285, 48959, -3942, -3942,  1553,   230,  1171,
    1539, -3942, -3942,  1687, -3942, -3942,   241, -3942, -3942, -3942,
    2396, -3942, 26782,  6476,  1687,  1098,  -103,  1098, -3942, -3942,
   48959, -3942, -3942, -3942,  1869, -3942, -3942,   188,   188,   188,
   -3942,   188, -3942,   188, -3942,   693,  1541, -3942, -3942,  1530,
   48959,   881,  2038,  1007, -3942, -3942,  1554,   772, -3942,  1614,
   37565, -3942, 48959, -3942, -3942, -3942, -3942,  1857, -3942, -3942,
   -3942,  1212, -3942, 37565, 24242, 48959,  1721, -3942, -3942, -3942,
   24242,  1591, 48959, -3942, 24242, 24242,   259,    27,  1430, 48959,
   48959, 48959,  2053, -3942,  2240, 37565,  1811, -3942,   205,   -87,
    1565,  2268, -3942,  1672, -3942, 48959, -3942, -3942, 48959, 48959,
   -3942, -3942, -3942, 43262,   128,  1638,  1642,  1645, 15910, -3942,
    1654,  1666,  1674, 11332,  1684,  1693,  1698,  1710,  1719,  1736,
    1745,  1749,  1759,  1759,  1763,  1766,  1790,  1806,  -187,  1817,
   -3942,  1822,  1827,  1837, -3942, -3942,  1840,  1849,  1855,  1867,
   -3942,  1870,  1872,  1883, 11986,  1889,  1894, -3942, 21059,  1896,
    1900,  1912,  1927,  1931,  1935,  1937,  1941,  1951, -3942, -3942,
   11332,  1763, -3942, -3942,  1954, -3942,  1966,  1980,  1989,  1991,
    1997,  2012,  2014,  2016,  2023,  2025,  2036,  2039,  2041,  2050,
    2058,  2068,  2076,  1763, -3942,  -166,  2090,  2094,   935,  2103,
   -3942,  2108, -3942,   325,  2113,  1759,  1763,  1763,  2118,  2129,
    2133,  2136,  2142,  2144, 15910, 15910, 15910, 11332, -3942, 48959,
   -3942, 48959, -3942,   343,  2606, -3942,  2388, 15910,   200, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,  1676,  1856, -3942, -3942,
   -3942, -3942, -3942, -3942,  2146,  1707,  2167, 48959, 48959, 48959,
   48959,  2002, 48959, 48959, 40730,  1320, 48959, 37565, -3942,  1788,
    1781,  2959, 29962,  3501, -3942,   177, -3942, -3942, 48959, -3942,
   -3942, -3942, -3942,  2156,  1964,   343,  2426,   235,  2495,  2501,
   24242, -3942,  1544, -3942,  -189,  2290, -3942,  2545, -3942,  2326,
   -3942, -3942, 37565, 24242, -3942, -3942, -3942, 21694, -3942, -3942,
   -3942,  2575, -3942,  2147, -3942, -3942,  1856,  3307, -3942,  4173,
    2237,    27,  2170, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942,  2158,  2396, -3942, -3942, 43895,   508,  2334,
    2150,   565,   734, 35033,  1112,   739,   125, 27418, 35666,  2160,
   -3942, -3942, -3942,   953,  2658, -3942,    40,    40,  2177,  1748,
      40, 38198,  2562,   216, -3942,   432, -3942,  2656, -3942, -3942,
      40, -3942, -3942,  2330,  2305, -3942, -3942,   441,  1974, -3942,
    2701, -3942,    69, -3942,  2347,    40,    40,    40,  2562,    40,
     216, -3942,  2598,  2724,   817,  -136, -3942, -3942, -3942, -3942,
    2232, -3942,   695,  2800, -3942,  2238, -3942, -3942, 24242, -3942,
    2156, -3942, -3942, -3942,  2244, -3942,  2521,  2371, -3942, -3942,
      81, -3942,  2274,  1069,  2776, -3942, 40730,  1049, 38831, -3942,
   -3942, -3942,  2809,  2833,  1759,  2289, -3942, -3942, -3942,  2949,
   -3942, -3942,  2311,  2863,  2863,  2863,  2979, -3942, -3942, -3942,
    2338,  2604, -3942, -3942,  2529,  2383, -3942,  1721, 24242,  2760,
    2354, -3942, -3942,  2617, 11332, -3942, -3942,  4259,   803, -3942,
   -3942,  1335, -3942,  2955,  2577, -3942, -3942, -3942, -3942,  2844,
    2366, -3942, -3942,  2949,  2909,  2863,  2798,  2370, -3942, -3942,
   -3942, -3942, -3942, -3942,   246, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,  1375, -3942, -3942, -3942, -3942, -3942,  1721, -3942,
   24242, -3942, -3942, -3942, 24242, -3942,  2373, -3942,  2379, -3942,
   11332, 11332,   362,  2966,  3027,  3027,  3027,   343,  2415, 11332,
   11332, 11332, 11332, 11332, 11332, 11332,   380,  2391, -3942, -3942,
     -93, -3942,  2392, 11332, 11332, -3942, 11332, 11332, 25512, -3942,
    5267, 11332, 11332,  1354,  2905, 11332, 11332, 11332, 11332,  2932,
   11332, 11332, 25512,  3038,  2394, -3942,  2395,  1301, 11332, 11332,
    1437, 11332, 11332, 11332, 11332, 11332, -3942, -3942, 11332, 11332,
   11332, 11332, 15910, 11332, 11332, 11332, 11332, 11332, 11332,  2404,
   11332,  3027,  3027, 11332, 11332,  1732, -3942, -3942, 11332,  2368,
    2368, -3942, 11332,  8062, 11332, -3942, -3942, -3942,  2405, -3942,
   -3942, -3942, 25512,  3027,  3027, 11332, 11332, 11332,  2966,  2966,
    2966,   244,  2406,   814, 11332, 28054,  2400, -3942, -3942, -3942,
   -3942, 11332, 11332, 11332, -3942, 15910, -3942, -3942,  2087, -3942,
   -3942, -3942, 12640, 15910, 15910,  2417, 15910, 15910, 15910, 15910,
   15910,  2797, 15910, 15910, 16564, 17218, 15910, 15910, 15910, 15910,
     242,  2966, 40730, 15910, 11332, -3942, -3942, 48959, -3942, -3942,
   -3942, -3942,  2410, 24242,  1320, -3942, -3942, -3942, -3942, -3942,
   -3942,  2419,  1320, -3942,  2911, -3942, -3942,  2420, 24242, -3942,
    2418, -3942,  2802, -3942, -3942, -3942,  2804,  2807,  2815, -3942,
   -3942, -3942, -3942,  3028,  2820, -3942,  2823, -3942, -3942, -3942,
   -3942, -3942,  2428, -3942, -3942, 17872, 40730, -3942,  2437, -3942,
    2945, -3942,  2699,  2648,  2634, -3942, -3942, -3942, -3942, -3942,
    2742, -3942, -3942,  2574, -3942,  2750, -3942, -3942,   571, -3942,
     113, -3942, -3942, -3942, -3942, -3942, -3942,  2755,  2475, -3942,
   -3942, -3942, 48959, -3942, 49592, -3942, 21694,  -109, -3942, -3942,
   -3942,  2856, -3942, -3942,   219,  2480, -3942, 24242, -3942,   153,
     153,  2743,  1378, 40730, -3942, -3942,   272,  1137,   295,  2484,
    2579,  2497, -3942,  2587, 24242, 24242, -3942, -3942, -3942,  2764,
   -3942,  3147,  1171, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,  2509,  3005,  2699,  2799,
   -3942,  2803, -3942, 48959, -3942,  1734, -3942, -3942, -3942,  2518,
   -3942, 11332, -3942,   270, -3942,   953, -3942, 48959, -3942, -3942,
   -3942, -3942, -3942,  3100, 11332, -3942, 37565,  1127,   884,  1323,
     953, -3942, -3942, -3942, -3942, -3942, 48959, 44528,  2530, -3942,
    2941,  -109, 11332, -3942, -3942,  2544,  1672, 48959, 48959, 48959,
   24242, 48959, 24242, -3942,    20,    20, -3942, 36299, -3942, -3942,
   -3942, -3942,    40, 48959, 48959,    40, 37565, -3942, -3942,   216,
   48959,    40, -3942,  2946,  2653, -3942, -3942, -3942,  3011, -3942,
   -3942,  3007,  2547, -3942,  2941, -3942,  1339,   216, -3942, -3942,
   -3942, -3942, -3942, 24242, -3942, -3942,   216, -3942,   216,   216,
      40,    40,  2600,  1098, -3942, -3942,  2706,  -103, -3942,  1082,
     188,  2808, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,    98, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,   124, -3942, -3942, -3942,
    1613,  3070, -3942, 40730,  1879,   849,  1502,  1879,  1443,  -109,
     932, -3942,   932, -3942, 37565,  3033,  4368,  2838,  1034, 24242,
   -3942,  2557, 45161, 24242, -3942, -3942, -3942,   167,  2559,  2560,
     343,  3054,  3055,  3067,  3069,  3071,  3074,  3075,  3076,  3077,
    3082,  3083,  3086,  3089,  3090,  3091,  3093,  3096,  3098,  3109,
    3111,  3112,  3113,  3116,  3122,  2578, -3942, -3942, -3942, -3942,
   24242, -3942, -3942, -3942, -3942,  2624, -3942, -3942, -3942, -3942,
    2369, -3942, -3942, -3942,  1571,   140,  1862,  2608,  2676,   142,
   37565,  3092, 48959, 48959,  1672, 48959, 48959, -3942, -3942,  -169,
    2916,  2917,  2918,  2638, -3942,  2764, -3942,  1312, 48959,  3097,
   31868, -3942,   324,   929, -3942,  3027,  2644, -3942,  2657,  2661,
    2663, 11332,   126,   511,  1108,  1428,  1458,  1124,   330,   261,
   -3942,  2664,  2671, -3942,  2666, -3942, -3942,   431,   435,  1135,
    1174,  2667,  2672, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942,  3128, -3942,   456,  1573, -3942, -3942, -3942,
   -3942,  2680, -3942, -3942,  1179,   462,   478,   300,  2689,   492,
    1700,  1752,  2685, 25512, 48959,  3027,  2690,  1187,  1195,  3027,
    2692,   519,  1244,  1771,  1774,  1783,  1251,  1274,   549,  1803,
    2659,  1284,   659,   722,  1305,   781,   867, -3942,  1317,  2693,
    2694,   892,   312,  3027,  2696,   326,  2684,  2698,  1341,  9370,
   10024, 10678,   332,   927, -3942,  2704, -3942,  2395,  2707,  2710,
     379,   201,  1353, -3942, 11332, -3942, -3942,   815,   121,  2769,
     192,  1323, -3942,  2882, 48959,  2448,   224, -3942, -3942, -3942,
   -3942, -3942, -3942,  1463, -3942,  2716, -3942,  2718,  1529,  2723,
   11332,  1055,  2723,  3248,  1232,  1232, 15910,  3178,  3275, 11986,
    1304, 11986,  1304,  2723,  2723,  2723, -3942, 15910,  2725, 15910,
   15910, -3942,  2966,   343,  2722,  1384, 48959, -3942,  2419,   -37,
   -3942,   953, 37565,   148, 24242, 40730,  2726, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942,  4096, 24242,  2819,  2822,  2825,
   -3942, 30598, -3942, -3942, -3942, -3942, 30598,   706, -3942, -3942,
   -3942, -3942, -3942,  2836, -3942, -3942, -3942,  2737, -3942, 37565,
    2737, -3942, -3942,  2737, -3942, -3942,  2737,    65,  3373, -3942,
     280,   403,  3673,  2762, -3942, -3942, -3942, 24242, -3942,  3151,
     747, 24242,  2557,  2740, -3942, -3942, -3942, -3942, -3942,  2474,
    2855, -3942,  3389, -3942, 11332,  -109, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, 11332,  -109, -3942, 37565, 37565,
   24242, 24242,   845, -3942,  1535,  2751, -3942, -3942, -3942, -3942,
   -3942,  3307, 17872,  2753, 37565,    67, -3942, -3942, -3942, -3942,
   -3942,   961,   343, -3942,  2744,  5647, 43895,  8716, -3942, 39464,
   -3942,   343,   953,  2765,  2767, -3942, -3942,  3141,   708, -3942,
    2758,  2768, -3942,  2754,  2761,  2763, 43895, 11332, -3942,   884,
   -3942, -3942, -3942, -3942,  8716,  -109,  3228, -3942,   343,  2774,
   48959, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,   -89, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,    40, -3942, -3942, -3942, -3942, -3942,
    3010,  2562,  1974,  3228, -3942, -3942,    40,   216, 24242,    40,
      40, -3942, -3942,  2479,  2830, -3942,  3241, -3942, -3942, -3942,
   48959,  2250,  2956, -3942,  2785, -3942, -3942, 24242, -3942,  2789,
   -3942,  3251,  3400,  2562, -3942, -3942, -3942,   953,   953,  3106,
   -3942,  -109,  2939,  2942,  2944,  2952,  2954,  2982, -3942, -3942,
    -109,  -109, -3942, -3942,   953, -3942,  1184, -3942, -3942, -3942,
   -3942,  -109,  -109,  -109,  -109,  2515,  -109,  -109,  1830, -3942,
   -3942,   953,   953, -3942,   458, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,   305, -3942,  3079, -3942,  2732,   953,  3386,  3072,
     953,   953,  3386,   953,  3078,  3087,   953,   953,  2903,  3335,
     953,  3220,  2934,  2185,  3227,   953,  3094, -3942,  2936,  3348,
     953,   953,   953,   953,   953,  3386,  3095,  3440,   953, -3942,
     953,  3101,  3103,   196,  3102,  3108,   953,   953,   953,   953,
     218, 48959,   953,  3114,   953, -3942, -3942,  5286, -3942, -3942,
   -3942, -3942, -3942, -3942,   -84, 22329, -3942, -3942, -3942, -3942,
     186, -3942,  3048, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942,  2839, -3942, -3942, 11332,  2841,
    2515,  -109,  2515,  2515,  -109,  -109,  1417,  -109,  2515,  2515,
    -109,  -109,  -109,  -109,  -109,  -109,  -109,  2515,  2515,  -109,
    1772,  -109,  2515,  4259, -3942, -3942, -3942,  2964,  2851, -3942,
    1856, -3942,   248,   953,   953,   953,   953, -3942,  1728, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, 40730,  3230,  2536,
     737, 40730, -3942, 48959, -3942,  1744, 48959,  2873,  -128,  3450,
    1024,  1024, -3942, 24242, 24242, 24242, 48959,  2922, -3942, 31868,
   -3942, -3942,  1082, -3942,  2874, 13294, -3942,  2880, -3942, 11332,
   -3942, -3942, -3942,  1546, 11332, 11332,  3379,  2295, -3942, 40097,
   -3942, -3942, -3942, 11332, 40097,  2295, 11332, -3942,  2883, -3942,
    3295,  3298, -3942, -3942, -3942, -3942, 11332, 11332, -3942, 11332,
   11332, -3942, 11332, 11332, 11332, 11332, 11332, -3942, -3942, 15910,
   -3942,  2881,  2893, -3942, -3942, -3942,  2894, -3942, 11332, -3942,
   -3942, -3942, -3942, -3942, -3942, 11332, -3942, 11332, -3942, 11332,
   11332, -3942, 11332, 11332, -3942, -3942, -3942, 13948, 11332, 11332,
    2895, -3942, -3942, 11332, 11332, 11332, -3942, 11332,   296, 11332,
     537, 11332,  1490, 11332, -3942, 11332, -3942, -3942, -3942, -3942,
   11332,   371,  2474,  2515,  2897, -3942,  1834, -3942, -3942,  2468,
   -3942,   815,  2898, -3942, -3942,  1734, -3942, -3942, 40730, 11332,
   -3942, -3942, -3942, -3942, -3942, -3942, 15910,   383,  2900, 15910,
   -3942,  3248,  2932,  2932,  1911, 11332,  1055,  3248, 11332,  2901,
    2902, -3942, 11332, 48959, -3942, -3942, -3942, -3942, 40730, -3942,
   -3942, -3942, -3942,   148, -3942,  2418, -3942,  2557, -3942,  3397,
    2910, -3942, -3942, -3942, -3942, -3942, -3942, 48959, -3942,  3001,
   -3942, -3942, -3942, 22964, 22964, -3942, 22964, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
    2562,  1535, -3942,  2924, -3942, -3942,  2617,  3019,  2948,  3302,
   -3942, -3942, -3942, 48959, 15910, -3942, -3942, -3942, -3942, -3942,
   -3942,  3533,  2957,  2963,  3422,  2965,   343, -3942,   343, -3942,
    3017, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,   848,
   -3942, -3942,  2967,  2967, 19779, -3942, -3942, -3942, 48959,  3437,
   -3942,  3401,  3417, 22964, 22964, 22964,  1018, -3942,   442, -3942,
    1718,  3377,  2562, -3942,  3426, 41363, -3942, 32501, -3942, -3942,
   -3942, 15910,  1822, -3942,   343, -3942, -3942, -3942, -3942, -3942,
    1127,  3068,  3073,    -2, -3942, -3942,  3374,  3200, -3942, -3942,
   -3942,   953,   343, -3942,  2530,  2975, 28690, -3942, -3942,  1417,
   -3942,   351, -3942, 36299, 36299, -3942,  3271, -3942, -3942, -3942,
   -3942,  2762,   216, -3942, -3942,  3476, -3942,  3477, -3942,  2986,
    3479, -3942,  3246,  3162, -3942,  1076,  3390,  3391, -3942,  3264,
     798,  3264,  1076,  1076, 25512,  1082,  2764, -3942,  2515,  3320,
   -3942, -3942, -3942, 39464, 36932, -3942, -3942, -3942, -3942,  3538,
   -3942,  3542,  1385, -3942, -3942,  2441,  1315, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,  1443,  2441,  2441,  1000, -3942,   198, -3942, -3942,
   -3942, -3942,  3480, -3942, 26147,  1584, -3942,   307, -3942, 26147,
   -3942,   167,   167, -3942, 45794, 26147,  1584,  1417,  2515, 26147,
    2515, 46427,  1584,  -109,  -109,  2433,   953,  2515, -3942, -3942,
    3402, 48959,  3404, 26147, 26147, -3942, 40730, 48959, -3942,   953,
     147,  2515, 47060,  1417,  1417, 26147,  1584, 25512,  1373, -3942,
    -109,  1584, -3942, -3942, -3942, -3942, 24242,  1584,  1584,  2649,
    2592,  2796,  3080, -3942, -3942, -3942,  2515, 46427, -3942, -3942,
    4910, -3942, -3942, -3942, 19144, 48959,  1629,   220, -3942,  2998,
      45,   314,  3107,  1008,  3012,  3015, 47693,   343,  2515, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
    -109,  2474,  2441,  2441,  1898, -3942,  3282,  3454,   953, -3942,
    1948, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
    3115, -3942,  3647,  3214,  3023, -3942, -3942,   339, -3942, -3942,
    1075, 24242, 18509, -3942,  3284, -3942,  3037, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,  3018,  1082,  2762,  1399,
    2762,  3032, -3942, 11986,  1382, -3942,   343, 11332,   343,  1739,
   -3942,  3029,  3029,  3036, -3942,  3043,  3029,  3436,  3036,  3441,
    3031,  3044,  1386,  3047,  3049,  1676, -3942, 11332, 11332,  1388,
     391,  1390,   -81,   954,   987,   401, -3942,  1392,  2947, -3942,
   -3942,  1398,  1411,  1413,  1441,  1001,  1492,  1844, 11986,  1593,
    1065,   409, -3942,  1599,  1038,  1072,  1603, 11332,  1610, 11332,
    1627, 11332,  1650,  1680,  1688,  3051,  3051,   232, -3942,  3035,
   -3942, -3942, -3942,  3042, -3942, -3942,  2158,  2468, -3942, -3942,
    3052, -3942, -3942,  3041,   343,  3053, -3942, -3942, 11332, -3942,
     200, -3942, -3942, 15910,   413,  3057, -3942,   343, -3942, -3942,
    3060,  1676, -3942,  1046, -3942, -3942, -3942, -3942,   370,  3957,
   30598, -3942,  1858, -3942, 37565,  3056, -3942,  3058,  3135,  3145,
    3146,  3065, 11332, -3942, -3942,  3347, 24242, -3942,  3493, -3942,
   -3942, -3942, -3942,  3084,  3085, -3942, -3942, -3942,  3248,  3452,
    3332, -3942, -3942,  2474, 48959, 37565, -3942,  2396, 25512, -3942,
    3088, -3942,  3088,  1741,  3105,  1875, -3942, -3942, -3942,  3081,
    2170,  1880, -3942, 17872,  3349, 37565,  3530,  3532,  3547, -3942,
    2762,  2762,   157,  3126,  3492, -3942, -3942, -3942, -3942, 48326,
   -3942, -3942, -3942, -3942,  1423, -3942,  3117,  3119,   165,  3321,
   -3942, -3942, -3942, -3942,  8716, -3942, -3942, -3942, -3942, -3942,
   -3942,  2562, -3942, -3942, -3942, -3942, -3942,  2562, -3942,    40,
    -109,  -109,  1673,  -109,  3585,  3620, 11332,  -202,   121, -3942,
    1665, -3942, -3942, -3942,  3494,  1076,  3264,  3264,  3496,  3381,
     869,  3110, -3942,   953, -3942,  2478, -3942,  2396, -3942, -3942,
   11332, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942,   305, -3942, -3942, -3942, -3942,
   -3942,  3104,  3497,  3502, -3942, 26147,   167, -3942, -3942, 26147,
   26147, -3942, -3942,   146, 46427, -3942, -3942, -3942, -3942, -3942,
   -3942,  3120, -3942, -3942,  2474, -3942, -3942, 36932,  -109, -3942,
   26147,  3120, -3942, -3942,   584, -3942,  3124,  -109, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, 46427,  3123,
   -3942,   373, -3942, -3942,  2055, -3942, 46427, -3942, -3942, -3942,
   46427, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  3121,  2757,  2422, -3942,  3125,  3129,
   -3942, -3942, -3942, -3942, 48959, -3942, -3942, 24242, -3942, -3942,
   -3942,  6128, 48959,  3358, -3942, 11332, 11332,  3395, 48959,  3408,
   -3942,  3696, 48959,  3760, 46427, -3942,  3133, -3942,  3142, -3942,
    1913, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  3137, 48959,
    2441,  1715, -3942, -3942,  -109,  1075, -3942, -3942, -3942, -3942,
    3415,  3423, 48959, -3942, -3942, -3942, -3942,  3300, -3942, 24242,
   -3942,  3324, -3942,  3148,   902,  3740, -3942,  3150,  3154,  3155,
   31868,  2762,  3427, -3942, -3942,  2932, -3942,   343, 11332,   887,
   -3942, -3942,   221,  3443, -3942,  1241, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  3158,  2932,
    2932, -3942, -3942, 11332, -3942,  3763,  3336, 11332, 11332, -3942,
   11332, -3942,   998,  3164,  3185, -3942, -3942, -3942, -3942, 11332,
   -3942, -3942,  2932, -3942, 11332, -3942, -3942, 11332, -3942, 11332,
   11332, -3942,  1696, -3942,  1704, -3942,  1722, -3942, -3942, -3942,
    2474,  3165,  3551, -3942, -3942, -3942,  2474,  3371, -3942, -3942,
    2474,  2515,  2518, -3942, -3942,   814, 48959, -3942, -3942,  1916,
   -3942, -3942, 11332, -3942, 41363, -3942, -3942, -3942,  3552,  3820,
   -3942,  3410, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, 48959,
     470,  3189, 33134, 37565, 37565, 37565, 14602,   343,  3688, -3942,
   -3942, -3942,  3493,  3575, -3942,    78, -3942, 48959,  3187,  1682,
   -3942,  1928, -3942, -3942,  3188, -3942,  2158,  3190, -3942,   953,
   14602,  2967,  3324, -3942, -3942,  1741, 25512, 32501, -3942, -3942,
   48959, -3942,  3651,  2370, 37565, 37565, 37565,  2562,  3634,  3019,
    3019, -3942, 29326, -3942, -3942,  3362, -3942, -3942, 33767, -3942,
   -3942, -3942, -3942, -3942, -3942, 28690, 43895, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  -109,  3690,  3456,   343,  1734,  2486,
   -3942,  1082, -3942,  1076, -3942,  3595,  3600,  1076, -3942, -3942,
   -3942, 25512,  2762, 14602, -3942,  2158,   343,  3202,   373, -3942,
     664, 11332, 26147, -3942, -3942, -3942,  3206, -3942, -3942,  3734,
    3737, -3942, 26147,  2369, 48959, -3942,  3100, -3942, -3942, -3942,
    3315, -3942,  6128, -3942, 25512, -3942, -3942, -3942, -3942, -3942,
   48959, -3942, 24242, -3942, 19144, -3942,  3216, -3942,  3029,  3029,
    3029, -3942, -3942, -3942,  3036, -3942,  3043,  3461, -3942,  3043,
    3043, -3942, -3942, -3942, -3942, -3942,   221,   317, -3942, -3942,
     221, -3942, -3942, -3942,   144,  1520,  3043, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  3029,  3036,  3036, -3942, -3942,   221,
    3029, -3942,  3029,  2465, -3942,   284,   136,  3029,  3029,  3029,
    3217,  3212, -3942,   343,  2932,  3790, -3942, -3942,  3382,  -109,
    3730, -3942,  1958, -3942,  3224, -3942, 47693, -3942,  2515,  1443,
   -3942, -3942, -3942, -3942,  3387,  1092, -3942,  3407,  3234,  3235,
   -3942, -3942,  -109,  3249,  3250,  5286, -3942, -3942, -3942,  3859,
   -3942, 48959, 48959, 48959,  2874, -3942,  3628,   960,   343,  3252,
    3254,  3255,  3256,  3865,   174, -3942,  3868, 40097, -3942, -3942,
   -3942,  3258,  1971, -3942,  3259,  3261,  1733, -3942,   188,  3265,
    1761,  1078,  1984,  3583,  3666, -3942,  3508, -3942,  1768,  1412,
    1787,  1823,  1825,  1874, -3942, -3942, -3942, -3942, -3942,  3276,
   -3942, -3942,   536, -3942,  3274,   944,   121, -3942, -3942,  2028,
   -3942, -3942, -3942,  3753,  3652, -3942,  3724, -3942, -3942, -3942,
     -97,   -97,   -97,  1822,   343,  2030, -3942, -3942, -3942, -3942,
    3694, -3942, -3942,  3286,  3389, 48959, -3942,  3332, -3942,  2518,
   25512, 14602,  3287,  3285, -3942,  1069, -3942, -3942,  3283, -3942,
   -3942, 37565,  2370,  2370,  2370, -3942,  3893,  3731, -3942, -3942,
   40730,  3290, -3942, -3942,  3610, -3942, -3942, -3942, -3942,  -109,
    3786, -3942, -3942, -3942,  2785,  2423,  3340,  1076,  1076,  3226,
    3341, 11332, 11332,  3301, -3942,  3427, -3942, -3942,   947,  2518,
   11332, -3942,  2474,  3332, -3942,  1884,  3305,  3306, 48959,  3308,
    3311, -3942,  3066,  1629, -3942, -3942, -3942, 24242,  2465,  1584,
   -3942, -3942,  3120,   848,  3299, -3942, 48959,  3646, -3942, -3942,
   -3942, -3942,  -155, -3942,  3312,  -155,  -155, -3942,  2334, -3942,
    3345,   221, -3942, -3942,  3346, -3942, -3942, -3942,  -155,  3316,
     221, -3942, -3942, -3942, -3942,  -155, -3942, 40730,   333,  -109,
    2961, -3942,  3366, -3942,  3843,  1225, -3942,  2465, -3942,  3721,
    3723,  3618, -3942,   221, -3942, -3942,  3948, -3942,   221,  3948,
    -155,  3619, -3942,  -155, 48959, -3942, -3942, -3942, -3942, -3942,
   -3942, 48959, -3942,  1197, -3942, -3942, -3942,  2051,  -109, -3942,
   -3942, -3942,  3334,  3338, -3942, -3942, -3942,   314, -3942, 48959,
    6128, -3942, -3942, -3942,  3284, -3942,  1217,  2059,   373,  3337,
    2064,  2071, 36299, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, 40097, -3942,  3948, -3942,  3622, -3942, -3942, -3942,
   11332, -3942, -3942, -3942, 11332, -3942, -3942,  3657,  3819, -3942,
   -3942, -3942, -3942, -3942, -3942,  3342, -3942,  2515,  1718,  1718,
   -3942, -3942, -3942, -3942, -3942,  3621,  1597,  3375,  3375,  3375,
   -3942, 14602,  3738,  3451, -3942, -3942,  3352,  3392, -3942, -3942,
     944, -3942, -3942, -3942, -3942,  2370, 11332, -3942,  3427,  2433,
   -3942, 29326, -3942, -3942,  -109,   814, -3942,  3398, -3942, -3942,
   -3942,  3399,   343,   343, 48959,  3628, -3942,   968,   944,   373,
   -3942,  2097, -3942, 48959, 48959,  2100, 48959, 48959,  2819,  2822,
    2825,  1772,  1772, -3942, -3942, -3942, -3942, -3942, -3942,  3764,
   -3942, -3942,  2110, -3942,    99,  3638, -3942, -3942, -3942, -3942,
    -155, -3942,   188, -3942, -3942, -3942, -3942, -3942,   188, -3942,
   -3942, -3942,  3383, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
    3654,  3403, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  3363, -3942, -3942,  3499, -3942, 55289,
   -3942, -3942,  1237,  3393, -3942, -3942, -3942, -3942,  1618, 48959,
   24242,  3395,  3555, -3942,  3100, -3942,  1069,   902,  3324, -3942,
     378, 48959, -3942,  3650,   207,  1023, -3942, -3942, -3942,  3368,
    3378,   373,  1891, -3942, -3942, -3942,  3369, -3942, -3942, -3942,
    3468,  3469, -3942, -3942,  3470, -3942, -3942,   155,  1841, -3942,
   -3942, -3942, -3942,  3425, 24242, 15910,  3495, 48959,  1690,  2115,
   -3942,  1678,   373, 11332,  2562, 36932, -3942, -3942, -3942, -3942,
   11332,  3385, 11332,  3388,  2125, -3942, -3942, -3942,   167,   167,
   -3942,   968, -3942, -3942, -3942,  2137,  2139,   378,  2162,  2191,
   -3942, -3942, -3942,  1629,  3394, -3942, 48959, -3942, -3942, -3942,
     304, -3942, -3942,  2201, -3942,  2209,  3945, -3942, -3942, -3942,
   11332,  3877,  3411, 48959,  1294, -3942, 56555, 56555, 48959, -3942,
   -3942, -3942, -3942,  5647, -3942, -3942,   908, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  4002, -3942,
    3384, -3942, -3942,  1237,  3409, -3942,   247, -3942,  2170, -3942,
   -3942,  6128,  3851,  1008, -3942, -3942, -3942, -3942, -3942,  3413,
    2170,  -109,   953, -3942,   378, -3942, -3942, -3942,   373,  3414,
    3661, -3942,   207, -3942, -3942, -3942,  1023, -3942, -3942, -3942,
   11332, -3942, -3942, -3942, -3942, -3942, -3942, -3942,   484,  3675,
    2515,  2515,  2515,  2515,  1841, -3942, 25512,  2764, -3942,  2474,
   -3942,  2211, -3942, -3942, -3942,  3498,   953,  3916,  3917,   953,
     953,   953,   953,  3416,  2115, -3942,  3900, -3942, -3942, 11332,
   -3942, -3942,   343,  3658, -3942,  3985,   121,   343, 48959,   343,
   48959, -3942,  3870,  3870, -3942,  3639,   378, -3942,   207,  1023,
   -3942,  3332, -3942,  1572,  1572,   221,   188,   221, 48959,   343,
   11332, -3942, 11332,  3445, -3942, -3942,  3879, 48959, -3942, -3942,
   -3942, -3942, 11332, -3942, 55289, 55289, -3942, -3942, -3942, -3942,
    4040, -3942,  3424,  1069,  4011,  3700,  4014, -3942,  3372, -3942,
   -3942,  3696,  6128, -3942, -3942, -3942,  2515,  1046, -3942, -3942,
   -3942,  1956,  1046, -3942,  1046, -3942,   373, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  3429, -3942,   953, -3942,  3431, -3942,
   -3942, 48959,  3428, -3942,  -109,   953,   953,  1137,  1137,  2474,
   40730,  3546, -3942, -3942,   953,   373,  4074, -3942,   989,  3818,
   -3942,  2218,  2225,   145, -3942, -3942, -3942, -3942, -3942, -3942,
    2249, -3942,  4085, -3942,   166,  3722,  3733, -3942, -3942, -3942,
   -3942,   343,   343, -3942,   164, -3942, -3942,  3860,  3951, 11332,
     343, 52124,  3453, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, 55922, 11332, -3942,   908,
    4002, -3942, -3942,  3741, -3942,  3742, -3942, -3942, -3942,  3972,
   55289, -3942,  3970, -3942,  1069, -3942, -3942, -3942, -3942, -3942,
   -3942, 25512, 14602,  2433, -3942,  3495, -3942,  3464, -3942, -3942,
     -27, -3942,  -109,  -109, -3942, -3942, -3942, -3942, -3942,  2259,
   -3942, 40730, -3942, -3942,  4076,  4080,  3975,  4082,   989, -3942,
     -95, -3942, -3942, -3942,  4084, -3942,  4094,  3503,  3506, -3942,
   -3942, -3942, -3942,  3559,  4031,  3539, 11332, 55289, -3942,  4015,
   -3942,  3940,   343,  3885,  3515, -3942,  3514,   343,  4051, 56555,
   56555, -3942, -3942, -3942, -3942,  4027, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  2264, -3942, 15256, -3942, -3942, -3942,
   -3942, -3942, 40730, -3942,  3546, -3942,  3527,   188,   188,  4131,
     188, -3942,  4135,  4136,   -95, -3942, -3942, -3942, 47693, 47693,
    1572,  1572, -3942,   303, -3942,   343, 52757,  4134, 48959, -3942,
    3626, -3942, -3942, 11332,  4046, 41996, 53390,  3534, -3942, -3942,
   -3942,  3726, -3942,  3372,  3735, -3942,  3464, -3942,  3541, -3942,
    3248,  2115, -3942, -3942,  3830, -3942, -3942,   188, -3942,   188,
     188, -3942,  3549,  2272, -3942, -3942, 11332, -3942,  4048,  3645,
   -3942,  3553, -3942, 55289,   343, 55289, -3942, -3942,  3999,  3563,
     335, -3942,  3568, -3942, -3942, 55289,  4003,  3985, -3942, 15256,
    3574, -3942, -3942,  3579,  3582, -3942, -3942, -3942, -3942, -3942,
     343,  4183, 55289, 48959, 50225,  4083, 54023,  4054, 48959,  6128,
    4055,  4057, -3942, 55289, -3942,  4203,  3818, -3942, -3942, -3942,
    3830,  3693, -3942, 50858, -3942,  2546,  3808,  3629, -3942, -3942,
    4128,  3156, -3942, -3942,   188,  4033, -3942, 55289, 55289, -3942,
   -3942, -3942, -3942, 34400, -3942, -3942, -3942, -3942, -3942,  1018,
   -3942,  3901,  3607, 51491, 54656, -3942, -3942, -3942, 31233, -3942,
   -3942, -3942,  4073, -3942, 11332, -3942,   831, 20414,  3785, 34400,
   -3942, -3942,   343, -3942, -3942, -3942, -3942, 40730,  2279, -3942,
   -3942, 25512, -3942, -3942, -3942, -3942, 23605,  3616, -3942,   953,
   -3942, 25512, -3942, -3942, 14602, -3942, -3942
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3942, -3942, -3942, -3942, -3942, -1862, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942,  1899, -3942, -3942, -3942, -3942, -3942,
    2098, -3942,   768, -1863, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,   764,  1695,  3596, -3942,
     501, -3942,   176, -3942, -3942, -3942, -2995,    49,  -135, -3942,
   -3942,   459,    43,  3273,  -132, -3941, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942,   507,   509, -3942, -3942,   329,
   -3942, -3942, -1723, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
    -310,  -270,  2045, -3942, -3942, -3942,  4246, -3942,  3689, -3942,
   -1788,  2393, -3942, -3942, -3942, -3942, -3942,  2470, -1724, -3942,
   -3942, -3942,  1427, -3942, -3942, -3942, -3942,  -497,   349, -3942,
     350, -3942,   352, -3942,   353, -3942,   355,   356,   357,   358,
   -3942,   359, -3942, -3942,  -260, -3942, -3942, -3942, -3942,   361,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942,  -142, -3942, -3942,
       8, -3942, -3942,  -139,   366, -3942,   -94,   369, -3942,   374,
   -3942,   -11, -3942,    -9, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942,  3269, -3942, -3942,
   -3942, -2001, -3942, -3942, -2146,  2792, -3942, -1781, -3942, -3942,
   -1940, -3942, -3942, -1817,  1291, -3942, -3942,  1318,   535, -3942,
   -1433, -1970, -1966, -3942, -3942, -3942, -2074, -2060, -1342, -1339,
   -2332, -3942, -3942, -3942,   363, -3942, -3942, -2637,  2202,  2793,
   -3942, -2044, -3942, -3942,  1254, -3942, -3942,  1426,   717,  1432,
   -3942,  1015,  2993, -1250, -3942, -3942, -3942, -3942, -3942, -3942,
      73,   334,   -18, -3942, -3426,   721, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -2158, -3942, -3942, -3942,  -178, -3942,
   -3942,   -92, -3942, -3942,  -137, -3942,   182, -2390, -3942, -3942,
   -3942, -3942,  2752, -1365, -3942,  3815, -3942,  -420,   824,  2233,
   -2490, -1455, -3942,  -924,  -911, -2570, -3942, -3942, -3942, -2055,
    1198,  1609, -3942,   918,  2229, -1955, -3942,  1691, -3942, -3942,
     943, -3942, -2816, -3942, -3942, -3942,   900, -3942,   903, -3942,
   -3942, -3942, -1072,   871, -2612,  1224, -1304, -3942,   449, -2491,
   -2596, -3942,   674, -3942,   626, -3942, -3813, -3361, -3942,  -594,
   -2171, -2483,    11, -3942, -3942,   639, -3206,  1814, -3942, -3942,
   -3942, -3278, -1915,  1542, -3942, -3942,  1113, -3942, -1313,  1109,
   -3942, -3942, -3942,  1119, -3942,   187, -3942, -3942, -3942, -3942,
   -2593, -3942, -3942, -1516, -2025, -3942, -3942,    10, -3942,  3835,
    3838,  4366,  4369, -1044, -2734, -2961,   194,   197, -3942, -3942,
   -3942,  2778, -1237,   274,   263,   268,  2180,  -285,   421, -2428,
   -3942,   475, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  2273,
    -697, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -2476, -2494,
   -3942, -3942,  1740, -3942, -3942, -3942, -2311, -1482, -1478, -1891,
    -489, -2206, -3382, -3942, -3942, -3942, -3942, -3942, -3942,  2912,
   -3942, -3942, -3942, -3942, -3942,  3789, -3942,  2919, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942,   711,  1957, -3942, -3942, -3942,
   -3942, -3942, -3942,   992,  2817, -3942, -3942, -3942,     7, -3942,
   -3942, -3942, -3942,  2519, -3942, -3942, -3942, -3942,  2865, -3942,
   -3942, -3942, -3942, -3942, -3942,  1526, -3942,  1998, -3942, -1493,
   -3942, -3942,  1101,  -993,  1949,  3792,  2088, -3942, -3942,  -617,
   -3942, -3942, -3942, -1686, -1688, -3942,  3516,  -864, -2527,  2508,
    -677, -1897,  1147,   464,  3698, -3942, -1146, -1070, -3942, -3942,
    -665, -3942, -3942, -3942,  -621, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,  1563, -3942, -3942, -3942,
   -3942, -1222, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  1488,
   -3942,  2178, -3942,  -513, -3942,  3292, -3942, -3942, -3942, -2375,
   -1869,  1888,  1047, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -1596, -3942, -2448, -3942, -3942, -3942, -3942, -3942,
    2099, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -1719, -3942,
   -1526,   251, -3942,   404, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942,   -12,   931,   -10, -2660, -1088,  1667, -3942, -3942, -1292,
    3339, -2323, -3942, -3942, -3942,  2084, -3942, -3942, -3942, -3942,
   -3942,  1017, -3013,  2951, -3942, -3942, -3236,  -908, -2345,  -849,
   -3942, -2439,   569, -1922, -1837,  -267, -1327, -1329, -3942, -3942,
   -3942, -3942,  -101, -3942, -3942, -3942,   586,  1979, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,  -562,
    -775, -3942, -3942,  2241,  2425, -3942,  3210, -3942, -1046,  3459,
   -3942, -3942,  3463, -3942, -3942, -3942, -3942,  3132,  3118,  2052,
   -3942, -3942, -2328, -3942, -3942,  2008, -3942,   842,  -899, -1972,
    1134, -3942, -3942,  1136, -3326, -3942, -3942,  3471, -3942, -3942,
   -3942,  1079, -3942,   116,  3855,  3474, -3942, -3942, -3942, -3942,
   -3942, -3942,  2854, -1066,  3780, -3942, -3942, -3942, -3942, -3942,
   -3942,  2493, -3942, -3942, -3942, -3942, -3942, -3942,  3045,  3873,
    -598, -1284, -3942,  -589,  3013,  2498,  -870, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,  2669,  1053, -3942, -3942, -3942,  3127, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942,  1163,   -30, -3942,   110,
     -55, -3942,    48, -3942, -3942, -3942, -3942, -3942,  -122, -3942,
   -3942,  -123,  2906,  -992, -1407,   769, -1251, -2109, -3942,  1165,
    3130, -3216,  -694, -1154, -1157, -1887,   108, -3942, -3942,  2994,
    2078,   120,  -748,  -391,    -6, -2792,  -111,  -605, -3942, -2826,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
    1999, -3942, -3942, -3942,  1142, -3942,  3907, -3942,  2759, -1366,
    3909, -3942,  -590,  2563,  2017,  2019, -3942, -3942,  2026, -1815,
   -3942, -3942, -3942,   191, -3942,  2662, -3942, -3942, -3942, -3942,
   -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,  2612,  3630,  3140, -3942,  2674, -3942, -3942, -3942,
   -3942, -3942,   387, -3942,   347, -3942, -2604,  2929,   593, -3942,
    1231,  -635,  -838, -3942, -3942,   389, -3942, -3942,   368,  3935,
    3643, -3942, -3942, -3942, -3942, -3942, -2848,  -882, -3942, -3479,
   -2894, -1725, -3942, -3942, -2229, -3080, -3942, -3942, -1043, -3942,
   -3942, -3942, -3942, -1947, -3942, -3942, -3942,   130,  4006,  4007,
   -3942, -3942,  -193, -3942,   651, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942,   445,   776, -3942, -3942,  3861, -3942, -3942, -3942,
   -3942,  3862, -3942, -3942, -3942, -3942, -3942,  3863, -3942, -3942,
   -3942, -3942, -3942,  1692, -3942, -3942, -3942, -3942, -3942, -3942,
   -3942, -3942
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2676
static const yytype_int16 yytable[] =
{
     508,  1064,  1072,  1049,  1506,   963,  1513,   991,   918,   959,
    1387,   647,   923,   557,  1404,  1407,  2476,   565,  1883,  2218,
    1882,   535,  1621,  2334,  1419,  1736,   582,   558,  1735,   816,
    1967,  2145,  2429,   594,  1823,  1006,   597,   580,  1611,  1612,
     594,  1688,  1860,   587,  1135,  2553,  2554,   615,  1021,   506,
    1471,  1941,  2142,  2478,  2127,  2639,  3055,  1424,  2128,  1758,
    1433,  2705,  2565,  1822,  2914,  2883,  1766,  3666,  2781,  1235,
    1447,  3002,  3338,  2783,  2964,  2965,  1652,  1093,  1518,  2583,
    2584,  2117,  1710,  1439,  3380,  1468,  1469,  1470,   636,  1472,
    1868,  1519,  2590,  2038,  2989,  2604,  2591,  2379,  2607,  2608,
     670,  2610,  1038,  1041,  2613,  2614,  2842,  3174,  2617,  1439,
     639,  2596,   508,  2626,  2460,   508,   646,   652,  2630,  2631,
    2632,  2633,  2634,  2578,   135,  2726,  2638,  2937,  2640,  2507,
    2528,   563,  3496,  3056,  2649,  2650,  2651,  2652,  1363,  2727,
    2656,  1230,  2658,  1768,  1769,  3051,  3854,  1772,  1773,  1774,
    1775,  2016,  1777,  1778,  1780,  1782,  1783,  1784,  1785,  1786,
    2980,   641,  3671,  2190,   643,  1974,  3201,  2866,  2990,  3536,
    3745,  3027,  4137,  1188,  1189,  1190,  3192,  2605,  3707,  3712,
    3199,  2609,  3713,  1986,  2039,  3586,  1231,  2040,  2059,  2200,
    2059,  2060,  2624,  2060,  1989,  1990,  3800,  1320,  2968,  2370,
     515,  3723,   635,  1488,  2635,  3714,  1800,  3744,  1197,  1198,
    3686,  2710,  2711,  2712,  2713,  1060,  2643,  1197,  1198,  2567,
     579,  2321,  1844,  2051,   981,  2471,   586,  1863,  2679,  2723,
    2682,  2683,  1256,  2724,   925,   909,  2693,  2694,  2668,  1320,
    1197,  1198,   612,  3543,  3361,  2702,  2703,  3881,  2715,  1515,
    2707,  3012,  3013,  3253,  2195,  3544,  3176,  2196,   666,   657,
    1197,  1198,  2393,  1080,  2463,  1515, -2007,  1350,  2670,  3545,
    3300,  1644,  1232,  2586,  1787,   115,  2234,  1197,  1198,  2513,
    -922,   925,   909,  3021,  3198,  4111,  1465,  4337,  4229,  2547,
    3409,  4391,  4427,  3406,  4047,  3852,  -570,   569,  3215,  4224,
    1957,  3895,  1874,  3349,  3526,  3483,  3543,  2099,  1421,  3262,
    4225, -2559,  1197,  1198,  4397,  1042,  1197,  1198,  3544,   972,
    1329,  3343,  1061,   658,  1247,  1885,   572,  2740,  1197,  1198,
    2051,  3058,  3545, -1540,  1495,  3906,   682,  1321,  3125,  3543,
    1197,  1198,  1197,  1198,   925,   909,  1197,  1198,  1197,  1198,
    3836,  3544,  4384,  2760,   690,  2102,  2644,  2653,   875,  1197,
    1198,  1175,  1958,  3254,  1326,  3545,   134,  1437,  1115,  3927,
    3021,  1473,  2179,  1515,  1624, -2405,   518,   925,  3708,  1321,
    3145,  3146,  2838,  1601,  1602,  1603,   605,  1044,  1480,  1167,
   -2623,   117,  1624,  3378,  3425,  1197,  1198,  2143,  4385,  1197,
    1198,  2833,   982,  3123,  -571,  2825,  3059,  1197,  1198,   596,
    1440,   576,   672,  1604,   691,  2210,  3922,  1197,  1198,  4343,
    2948,  4540,  4442,  2144,  1651,  1197,  1198,  1024,   611,  1197,
    1198,  2034,  2826,  3915,  4193,  3182, -2488,  3184,  1135,  2211,
    4541,  2949,  3919,  1605,  3907,   573,   134,  1197,  1198,  3379,
    3124,  1197,  1198,  4397,  3879,   849,  4111,   136,  3923,  4443,
    1441,  1915,  4112,  1116,  1045,  3939,  1541,  2322,  1343,  3157,
    3941,   606,  1197,  1198,  2394,  2950,  2464,  2012,  1197,  1198,
    1481,  3924,  3126,  2051,  1168,  3908,  1788,  4107,  1079,  4048,
    2817,  1489,  1062,   953,  1197,  1198,  1917,  3022,  2009,   595,
   -2623,   659,  1625,  1444,  3426, -1540,  2298,  3060,  1197,  1198,
    1789,  1937,  1450,  2052,  2962,  4002,   876,   646,  3925,   652,
    1640,  1330,  4226,  3527,  4386,   973,  2313,  1197,  1198,  4392,
     662,  2237,  4337, -2675,  1496,  1197,  1198,  3384,  2034,  1176,
    3350,   831,  2654,  1763,  1959,   652,   692, -2405,  3990, -2488,
    2479,   848,  3972,  1197,  1198,  1600,   844,  3253,  1645, -2489,
     646,  3280,   854,  2514,  3416,  1197,  1198,  2623,  2660,  4058,
    1199,  1234,  1969,  1200,  3152,  1972,  3158,  3030,   871,  1199,
    1233,  1976,  1200,   653,  1248,  3333,  3016,  2930,  1635,  1636,
    4049,  1824,  1518,  1466,  3981,  1771,   919,  3404,  3077,  2931,
    2371,  3407,  3408,  2038,   979,  1519,  3688,  3347,  3348,  1676,
    1991,  1992,  1792,  2395,  1061,  2395, -1824,  2590,  1690,  1043,
    2052,  2591,  1199,  4423,   995,  1200,  2998,   570,  3410,  2589,
    1703,  1704,  1705,  4112,   646,  2370,  1010,  1841,  1709,  1199,
    4012, -1540,  1200,  4033,  3048,   676,  2726,   646,   636,   508,
    3117,  1823,  3875,  2014,   636,  2671,  1036,  3057,   636,   636,
    2727,  4190,  2117,  1050,  1051,  1010,  1422,  3254, -2035,   646,
    3677,  1518, -2489,  1790,  1199,  1197,  1198,  1200,  1199,  1081,
    1822,  1200,  1082,  1083,  1519,  3530,  3036,  1088,  3038,  3255,
    1199,  2034,  3831,  1200,  2039,  3049,  1803,  2040,  1023,  3600,
    3601,  3602,  1199,  2521,  1199,  1200,  2351,  1200,  1199,  3062,
    1199,  1200,  2059,  1200,  3023,  2060,  3073,  2354,  3033,  1024,
    2357,  1199,  3037,  1246,  1200, -2176,  4560,  2348,  3097,  3099,
    3101,  2819,  1136,  1845,  3102,  3991,  3053,  3054,  1197,  1198,
    3632,  3633,  3634,   983,  4332,  4131,  3150,   839,  3067,  3010,
    2723,  2235,  3362,  2366,  2724,  2190,  3142,  1199,  4106,  3715,
    1200,  1199,  1022,  2645,  1200,  4290,  2722,  3801,  1033,  1199,
    2201,   861,  1200,  2052,  3147,  1862,  4171,  2668,   874,  1199,
    -922,  3524,  1200, -2559,  1062,  4019,  3189,  1199,  2938,  4303,
    1200,  1199,  1892,  1194,  1200,  1196,  -570,  1197,  1198,  3619,
    1580,  1922,  1405,  1864,  3014,  2174,  1410,  1415,   890,  1199,
    1078, -2559,  1200,  1199,  3546,  2979,  1200,  2016,  3511,  1247,
    1436,  1239,  1240,   508,  1242, -2675,  1010,   508,   646,  1201,
     508,   646,  3701, -1540,  1199,  4120,  1291,  1200,  1201,  1875,
    1199,  1973,  1325,  1200,  3700,  4014,  2195,  2337,  3419,  2196,
    3015,   574, -1540,  2323,   636,  2668,  1199,  2728,  3535,  1200,
    2729,  1201,  1886,  3721,  3722,  4418,   646,   636,  3669,  2244,
    1199,   636,  1241,  1200,  3144,  3256,  1245,  3546,  3720,  1255,
    1177,  1201,  4239,  1197,  1198,  1505,  3725,  1988,  3181,  1199,
    3263,  1476,  1200,  3750, -2199,  1743,  1744,  1199,  1201, -2317,
    1200,   919,  3742,   527,  -571,  4194, -2488,   646,  1197,  1198,
    3546,   646,   646,  2245,  4246,  1199,  1998,  4297,  1200,  4299,
    3685,   577,  1916,  2888,   513,   646,  2018,  1199,  4452,  2064,
    1200,  3709,  3481,  1201,  3189,  3656, -2488,  1201,   512,  3660,
    3159,   513,  2914,  1197,  1198,  1197,  1198,  3698,  3699,  1201,
    2995,  1743,  2264,  4275,  3692,  3198,  1445,  2051,  3198,  3198,
    3274,  1201,  2210,  1201,  2299,  1451,  4104,  1201,  1334,  1201,
    1197,  1198,   636,  2963,  3676,  3198,  2225,  2302,  2303,  1578,
    1201,  1353,  2243,  2314,  1345,  1359,  2211,   675,   953,  3724,
     646, -2035,  1514,  3255,  3743,  3746,  3748,  3749,  3281,  2270,
    3318,  3405,  3635,  1197,  1198,  3512,  1950,  3626,  3655,  3539,
    4350, -1851,  3659,   837,  3399,  2988,  1201,  1197,  1198,  3994,
    1201,  2444,   636,  2490,  2444,  2051,  4420,  3855,  1201, -2489,
    2319,  2320,  1284,  2418,  2847,  2848,  2371,  1199,  1201,  4372,
    1200,  3563,  3212,  3213,   872,  2590,  1201,   846, -2176,  2591,
    1201,  2985,  3219,  3220,  1197,  1198,  3672,  2067,  -475, -2489,
    3236,  3237,  2986,  1842,  3271,  3272,  3323,  1484,  1201,  3665,
    2747,  2383,  1201,  2517,   636,   511,  4187,  2726,  1617,  1248,
    2494,  1197,  1198,  2250,  1753,  3028,  3028,  2251,  1197,  1198,
   -1824,  2727,  1999,  1201,  1197,  1198,  2000,   999,  3596,  1201,
    1199,  4111,  4603,  1200,  2515,  2552,  1967,  1967,  2257,  3372,
    2585,   516,  1136,  1400,  2262,  1201,  2520,  2358, -1851,  2523,
    2524,  1791,  1600,  4091,  1197,  1198,  1136,  1232,  3526,  1201,
    2263,  2730,  1439,  2038,  1927,  3341, -1500, -1852,  2468,  3364,
    1197,  1198,  4374,   559,  2266,  3129,  2379,  3967,  1201,  3652,
    2596,  1197,  1198,  4375,  2589,  2468,  1201,  4026,  2762,  1199,
    3130,  2133,  1200,  3418,  1439,  2034, -2035,   624,  2356,  2419,
    3540,  2278,  2384, -1500,  1201,  1825,  1737,  1109,  2127,    13,
     568,  2723,  2128,  2902,  2206,  2724,  1201,  2424,  1608,   646,
    1197,  1198,  1615,  4214,  4027,  1197,  1198,  2369,  3163,  2798,
    2846,  2285,  2469,  1197,  1198,  2117,  1053,  3415,  1824,  3868,
    3869,  1197,  1198,  1437,  4024,  2624,  2540, -2199,  1013,  3326,
    2349,  1579, -2317, -2176,  2039,  4287,   646,  2040,  1477,   584,
     879,  1795,  1873,  2034,  2389,  2748,  1883,   636,  2969,  3389,
    4091,  4091,  2373,  2059, -1852,  1199,  2060,  2052,  1200,  1179,
    4227,  3541,   636,  2334,  1883,  1883,  3234,  2987,  1518,  1877,
    1197,  1198,  4234,  2445,  2851,  2852,  2445,  1197,  1198,  1014,
    1199,  1519,  1400,  1200,  4209,  4210,  2030,  2134,  4112,  1136,
     646,  2190,  4280,  2440,  2441,   601,    25,  2722,  1746,  2330,
    1197,  1198,  2731,  1247,  4604,  3629,  1201,  1736,  4625,  2462,
    1197,  1198,  2845,  1406,   865,  1199,  1928,  1199,  1200,  3395,
    1200,  2289,  2855,  1624,  3673,  2052,  1849,  3164,  1852,   866,
     636,  1197,  1198,  1878,  2092,  1000, -1851,  3769,  1485,  1066,
    1074,   636,  1199,  1197,  1198,  1200,  3770,   646, -2623,  3584,
    2012,  2495, -1824,   625,   867,  3564,  2501,  3527,   636,   636,
    3932,  1797,  4215,  3976,  2898, -1851,  1015,  1197,  1198,  1201,
    1001,  1247,  1478,  3539,  3933,  1199,  4376,  1244,  1200,  1197,
    1198,   607,  2195,  1214,  2290,  2196,  3804,  1906,  2728,  1199,
    2420,  2729,  1200,  1883,  1883,  1914,   608,  1736,  4091,  4091,
    2993,  1918, -2199,  1582,  3312,  1479,  3969, -2317,  1197,  1198,
     646,   847,  1197,  1198,  1197,  1198,  1197,  1198,  1197,  1198,
    1938,   919,  2020,  3577,  1197,  1198,  1199,  2034,  1201,  1200,
    1879,   508,   508,   508,   636,   508,   636,  1197,  1198,  1197,
    1198,  1968,  1235,  2292,  1359,  1233,  1401,  1970,   508,  2031,
     646,  1695,   610,  1199,   508,  1214,  1200,  1856, -2623,  1624,
    1199,  2446, -1852,  1200,  2446,  1580,  1199,  1197,  1198,  1200,
    3385,  3386,   953,  1359,  1747,  2331,  1677,   636,  1522,  1678,
    1951,  1952,  1953,  3542,  1955,   627,  3771,  3390, -1824,   880,
    1736, -1852, -1851,  3071,   628,  4091,  1199,  1971,  4205,  1200,
    1171,  2749,    43,  1975,    37,  2572,  1923,  1580,  3072,  3165,
    4091,  1880,  1199,   630,  1201,  1200,  1197,  1198,  1197,  1198,
    3028,  1583,  3005,  1199,  4091,  1584,  1200,   646,  4281,  2293,
    4282,  1924,   637,    43,  3540,  2668,  1585,  1933,   646,  1201,
     953, -1851,  4174,   636,   967,  4216,  2138,   636,  1954,  2686,
    1956,  1947,  1604,  4377,  2297,  1247,  2346,  2668,  2034,  3934,
    1998,  2041,  1199,  1248, -1500,  1200,  1998,  1199,  -475,  2573,
    1200,   640,  1197,  1198,  1201,  1199,  1201,   850,  1200,  1217,
    1016,  4091,  1606,  1199,   636,  4028,  1200,  1699,  4109,  2315,
    2226,  1987,  2589,  4091,  4091,  1172,  3142,  2574,   881,  1871,
    2623,  1201,   654,   868,   646,  1401,   508,   508,  1934,  2208,
     508,  4296,  2954,  2687,  2265,  3552,  3217,  3166, -1852,  1197,
    1198,  3794,  1088,   968,  2224,  1197,  1198,  4469,  4469,  1197,
    1198,  1248,  1199,  4291,  1201,  1200,  1197,  1198,  3006,  1199,
    4091,  3977,  1200,  1017,  1872,  1018,   642,  3114,  1201,  3218,
    4091,  1217,  2341,  1197,  1198,  2204,  2205,  2135,  4206,  2050,
      52,  2140,  1199,  3229,   851,  1200,  2575, -1852,  1586,  2042,
   -1824,  3990,  1199,   882,  1385,  1200,  1197,  1198,    55,  4173,
    1214,  3951,  1823,   925,   909,  1201,  1247,  4091,  1540,  4091,
     655,  1247,  1925,  1199,  2821,  2017,  1200,  1136,  2271,  4091,
    3239,  2450,   117,  3183,  2374,  1199,  1197,  1198,  1200,    55,
    2688,  1822,  1201,  3394,  1197,  1198,  4091,  3270,  4091,  1201,
    4091,  3951,  1197,  1198,   953,  1201,  3235,  4091,  2722,  1199,
    1197,  1198,  1200,  1881,  3240,   852,  1999,  4091,  2850,  1607,
    3814,  1199,  1999,  2785,  1200,  2034,  2000,  2576,  1197,  1198,
    2051,  4091,  4091,  -209,  1624,  1201,  1907,  2792,  2340,  1197,
    1198,  1736,  2735,  1587,  3329,  1197,  1198,  4091,  4091,  2238,
    1199,  1201,  4091,  1200,  1199,  2536,  1199,  1200,  1199,  1200,
    1199,  1200,  1201,  1200,  2736,  2242,  1199,  1197,  1198,  1200,
    2807,  2689,  4040,  4041,  1197,  1198,  2252,  1047,  1048,  1199,
    2364,  1199,  1200,  2183,  1200,  4010,   646,  3592,   636,   646,
    3591,  4435,  1935,  1197,  1198,  1248,  2183,   115,  2489,  2728,
     636,  1201,  2729,  3115,  1338,  1291,  1201,  1339,  2888,  1199,
    1291,  1883,  1200,  4032,  1201,  2253,  2342,  3542,  2043,   663,
    2261,  3940,  1201,   646,  3942,  3880,  2566,  2044,  2274,  1197,
    1198,  1197,  1198,   674,  2045,   953,  2275,  3952,  3991,  2861,
     953,   636,  4042,  3769,   662,   636,  1426,  4494,  4495,   130,
    1093,  2334,  3770,  1247,  1984,  1985,  1217,  3968,  1199,   835,
    1199,  1200,  1723,  1200,  1908,  1224,  1225,  1226,  1227,  1228,
    1229,  1201,   646,   646,   636,   636, -1824,  4093,  1201,  3978,
    1197,  1198,  2718,  3613,   720,  2279,  1136,   668,   646,  2537,
    1197,  1198,  2283,   512,   116,  3986,   513,  1197,  1198,  2933,
     919,  1201,   918,   646,  1679,  1427,   923,  1680,  2538,   748,
   -1739,  1201,   666,   117,  1199,  2284,  4346,  1200,  2853,  2539,
     919,  4348,  4292,  4349,  4154,  2288,  1248,   671,  3614,  2046,
    2183,  1248,  1201,  3580,  2512,  1428,   131,  3582,  2034,  1226,
    1227,  1228,  1229,  3992,  1201,  4155,  2291,  2021,   725,  2577,
    3103,  2034,   585,  1340, -1739,  2416,  1557,  1558,  2294,  1334,
    2219,  1199,  2022,  2051,  1200,  1147,  2183,  1199,  1201,   683,
    1200,  1199,   636,   685,  1200,   526,  1452,  1580,  1199,   518,
    1201,  1200,  2306,   118,  2535,  2437,  2934,  1166,  1353,  2443,
    3647,   636,  3771,  2690,  2325,  1199,  2439, -1739,  1200,  2450,
    1180,  1181,  2540,   826,  1219,  1220,  1453,  2451,   527,  1201,
   -1824,  3047,   119,  1201,  4293,  1201,  2183,  1201,  1199,  1201,
    2052,  1200,   953,  3186,  2362,  1201,  2239,  3205,  1387,  3211,
     688,  3214,  2363,  3221,  2343,   689,  4139,  2047,  1201,  3225,
    1201, -1739,  1214,  3367,  4294,   737,  2265,  2761,  1199,  3368,
    2344,  1200,  3226,  3820,  3227,  2508,  1199,   832,  1454,  1200,
    2184,   842,  1455,  2362,  1199,   120,  1247,  1200,  1201,  2240,
    1234,  3358,  1199,  2184,   591,  1200,  2716,  3653,   856,  1247,
    2732,   591,  3228,   845,  3393,  2034,  2522,  3537,   512,  3369,
    1199,   513,   862,  1200,  2767,  2655, -1824,  1573,  1574,  2241,
    1234,  1199,  1439,  3993,  1200,  2546,   858,  1199,  1439,  2669,
    1200,  3554,  3555,  1248,  2541,  2718,   774,  1201,  1405,  1201,
     859,  2034,  3994,  1405,   864,  3716,   753,  2023,  3717,  1199,
    4236,  2556,  1200,  3230,  3569,   616,  1199,  2452,  2453,  1200,
    2563,  2564,   885,  4140,  4141,   876,  2185,  1429,  4142,  4143,
    2177,  2568,  2569,  2570,  2571,  1199,  2579,  2580,  1200,   887,
    1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,   259,  1736,
     261,  2034,  2358,  1201,  4264,  2454,   994,  4267,  4268,  4269,
    4270,   646,   993,  4156,   617,   646,  2542,  2733,   996,  4425,
     508,  1199,  4429,  1199,  1200,   121,  1200,   636,   636,   636,
    2756,  4213,   848,  2759,  2024,  2450,  1003,  2184,  4249,  4250,
    4251,  4252,  1456,  1247,  2258,  1234,  4157,  2843,   800,  1824,
    1201,  3995,  1012,   646,  1736,  1024,  1201,  2993,   646,  2025,
    1201,  1034,  2960,  1054,  3233,   953,  1055,  1201,  1217,  2738,
    3238,  4258,  1199,  2184,  3241,  1200,  1059,  2865,   953,  1247,
    2593,  3243,  1199,  2052,  1201,  1200,  1759,  1736,   618,  1199,
    3071,  2681,  1200, -1824,  2681,  2681,   122,  2681,  3245,   115,
    2681,  2681,  2681,  2681,  2681,  2681,  2681,  1201,  1090,  2681,
    2185,  2681,  1091,  4362,  4363,  1092,  1430,  3188,  1457,  2026,
    3325,  3247,  4371,  2184,  1094,  1531,  1532,  4167,  4168,  1247,
     987,   988,  4259,   989,  4345,   990,  1095,  1201,  4518,  2186,
    3382,  2752,  2753,  2754,  1096,  1201,  2185,  1431,  1234,  2771,
    4169,  3248,   646,  1201,  1099,  3269,  1248,  3411,  1238,  3249,
    3035,  1201,   123,  1100, -1026,  4158,  1598,  3574,  1101,  1248,
    2536,  2267,  1234,  2452,  2453,  3575,  2772,  2862,   782,  1201,
    1102,  1458,   646,  3679,  3680,  1237,  3065,  3066,  1432,  1103,
    1201,  3423,  1243,  3576,  3702,  2620,  1201,  3705,  3706,  3429,
    2714,  2871,   119,  3431,  3809,  1967,  1104,  2877,  2877,  1260,
    2877,  3332,   953,  2027,  3718,  1105,  1219,  1220,  1201,  1106,
     124,  3913,  3914,  2268,  1693,  1201,  3755,  2773,   893,  1107,
    2774,   983,  3813,  1110,  3917,  2143,  1112,  2896,  2775,  3819,
    1213,  3920,  2280,  1234,  1201,  2281,  1234,  1582,   953,  4159,
    3621,  3894,  4366,  2390,  2282,  1234,  2391,  3504,  3821,  2392,
    1113,  2144,  2489,  1405,  1047,  1048,  3943,  4160,  2919,  3945,
    1760,  2334,  2922,  2186,  2286,  1234,  1114,  2877,  2877,  2877,
    1201,  1327,  1201,  1736,  1197,  1198,  3329,  1117,  3183,  2942,
    4161,  2944,  1118,  1459,  3822,  1328,  3823,  1119,   953,  3894,
     893,  2581,  2582,  1248,  2537,  2835,  1234,  1120,  1657,  2186,
    1121,  3726,  4326,   925,   909,  3231,  1234,  2593,  1320,  1122,
     919,  2876,  2876,  2538,  2876,  1123,  1320,  1968,  1968,  3298,
    3299,  1201,  4182,  4183,  2539,  2865,  1460,  1124,   619,  1248,
    1125,  1201,  1126,  2536,  1332,  3824,  3335,  3336,  1201,  1214,
    1333,  3339,  3340,  1127,   518,  3882,   894,  3727,  1737,  1130,
     620,  3728,  4132,  3729,  1131,  1583,  1137,   646,   646,  1584,
    1138,  4257,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,
    1585,  2051,  1139,  1877,  3507,  3508,  3811,  3588,  1234,  1248,
    1346,  2876,  2876,  2876,   621,  1347,  2621,  1140, -1540,  3616,
    3617,  1141,  1628,  1629,  1630,  1142, -1540,  1143,  2669,  1661,
    3730,  1144,  2622,  2669,  1641,  2941,  1877,  2540,  3032,  2669,
    3151,  1145,  3020,  2669,  1148,  3043,  1348,  3026,   894,  3760,
    3761,   895,  2620,  3034,  2183,  3043,  1149,  2669,  2669,  3044,
     646,  3043,  3797,  3806,  1360,  1696,  3064,  1878,  1700,  2669,
    1150,  1737,  1215,   622, -1540,  3815,  1234,  2572,  1321,  1151,
     636,  1152, -1540,  3068,  2776,   953,  1321,  1153,  3076,  1719,
    1720,  3043,  2143,  1724,  3079,  3080,  1216,  2537,  2669,  3113,
    1878,  4162,  1154,   259,  1155,   261,  1156, -1540,  1761, -1540,
    3139,  1738,  1739,  1157,  4456,  1158,  2538, -1540,  2144,  3832,
    1234,  3840,  3841,   895,  1762, -1540,  1159,  2539,  2425,  1160,
   -1540,  1161,  1586, -1540, -1824,  1662,  4568,  4569, -1540,  1665,
    1162,  2573,  3955,  2582, -1540,  1382,  1666,  3562,  1163,  2541,
    3970,  3971, -1540,  2718,  2572,  3974,  3971,  3096,  1164, -1540,
   -1540,  -840,  3975,  3971,  1879,  1217,  1165, -1540,  4626,  2574,
    3081, -1540,  3082,  3045,  3046,   636,  2669,  4123,  4127, -1540,
    1169,  2879, -1540,  2880,  1170,  1047,  1048, -1540,  4034,  3617,
   -1540,  4037,  3971,  1173,  3078, -1540, -1540,  2426,  1174,  3589,
    3075,  4045,  4046,  1178, -1540,  1385,  1204,  1205,  1182,  2034,
    2540,   918,  1557,  1558,  3083,   923,  4181,  3340,  2573,  1183,
    4534,  2542,  4536,  1184,  1667,  2777,  1185,  1587,  4185,  3971,
    4186,  3971,  1186,  3866,  1187,  -664,  1236,  3084,  2575,  1362,
    1214,  -664,   518,  1388,  1206,  1880,  2574,  2593,  1397,  4553,
    2926,  2927,  2928,  4188,  3971,  1207,  1396,   519,  1416,  1218,
    -664,  2594,  1047,  1048,  1420, -1540,  -664,  1425,  3731,  2622,
    3143,  1437,  2593, -1540,  3085,  3732,  1726,  1727,  2427,  3776,
    1669,   520,  4189,  3971,  4583,  4584,  2594,  1446, -1540,  3168,
    1449,  2052,  4195,  4196,  1448,  1208, -1540, -1540,  2778,   543,
    4197,  4196,  4260,  4261,  1291, -1540,  1209,  1464,   646,  4382,
    3340,  1467,  3733,  1219,  1220,  2575,  4383,  3340,  1474,  2576,
     636,  1475,  2541,   544,  1483,  4123,  1221, -1540,  1486,  4127,
    1487,  2184,  1491,  1210,  2779, -1540,  1490,  1247,  2896,   646,
    4389,  3617,  1737,  2287,   896,   897,   898,   899,   900,   901,
    4433,  4434,  1493,  1573,  1574,  4475,  4476,  1136,  2572,   646,
    4054,  3098,  -664,  4529,  3506,  1498,  4054,   902,   521,   521,
    4615,  4616,  1503,  3357,  1515,  2898,  1405, -1540,  1883,  1883,
    4364,  4365,   545,  3734,  1521, -1540,  1523,  -664,  1197,  1198,
    3802,  4123,  4127,   521,  2542,  1525,  2576,  1211,  3638,  3639,
   -1540,  1528,  2143,  -871,  3987,  3988,  3838,  3839, -1540,   828,
     829,   830,   546,  1529,   833,   834,   896,   897,   836,   899,
     838,   901,  2573,  1533,  2525,  2526,  2527,  2143,  2144,  1736,
    1534,  1670,  4256,  1262,  3311,  3735,  1217,   699,  1535,   902,
    4000,  4001,  1538,  1539,  1542,   547,  1543,  1672,  1544, -1540,
    2574,  1591,   522,  2144,  1592,  1593,  1594, -1540,  1263,  2669,
    1597,  1599,  1600,  2669,  2669,  1618,  1264,  1881,  3043,  1222,
    1223,  1224,  1225,  1226,  1227,  1228,  1229,  1620,  1232,  1624,
    1631,   646,  1643,  1646,  2669,  1682,  1693,  1692,  1653,  1654,
    1655,  1656,  1657,  1694,   548,  1717,  1734,  1745,  1754,  3356,
    2428,   527,  3043,  2070,  2071,  1776,   953,  1770,  1796,  1801,
    3043,  1799,  1802, -1540,  3043,  1805,  3888,  1812,  3086,  2575,
    1815, -1540,  1808,   720,  1809, -1540, -1540,  1810,  1214,  1826,
    3370,  3371,  1265,  3373, -1540,  1811,  1831,  -805,  -805,  2073,
    1813,  2577,   699,  1814, -1540,  1827, -1540,  1828,  3435,  -805,
    1830,   636, -1540,  2227, -1540,  2076,  3491,  1266,  1836,  1838,
    1839,  1267,   508,  2595,  2077,  1847,  3501,  1848,  3043, -1540,
   -1540,  1858,  1861, -1540, -1540,  1869,  1888, -1540, -1540,  -664,
     724, -1540, -1540,  3510,  1219,  1220,  1889,   725,  2079,  1890,
    1658,  1659,  1660,  1661,  1891,  1895,  3521,  1248,  1268,  1898,
    2576,  1901,  1515,   636,  -664,  1902,  2080,  4005,  3417,  1904,
    1910,  3497,  1919,  1905,  3534,   730,  1269,  3421,  2577,   -64,
    1832,  3888,  1942,  2272,   549,  1945,  1833,  2276,   720,  1949,
    1270,  3222,  1979,  1977,  1736,  2085,  1978,  4256,  1980,  1982,
    1993,  1996,  2572,  2010,  4298,  3100,  2019,  2065,  2130,  1580,
    2147,  2300,  2148,   523,  2149,  2150,  1387,  3087,  3088,  3089,
    3090,  3091,  3092,  3093,  3094,  3436,  2175,  2151,  1387,  2152,
    2173,  2153,   524,   524,  2154,  2155,  2156,  2157,  1834,  1271,
    2197,  3643,  2158,  2159,   737,   724,  2160,  3790,  3791,  2161,
    2162,  2163,   725,  2164,  1835,   550,  2165,   524,  2166,  1662,
    3587,  1663,  1664,  1665,  1259,  4015,  2573,  2089,  2942,  2167,
    1666,  2168,  2169,  2170,  3513,  2090,  2171,  3523,  2572,   525,
     730,  -576,  2172,  2198,  1217,   526,  2213,  2214,  2215,  2203,
    2216,  2222,  2091,  2871,  2574,  2228,  1325,   646,   646,   646,
    1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,  2230,   748,
    1199,  2896,  2231,  1200,  2232,  2247,  2248,  2249,  2254,  1214,
     751,   551,  2256,  2255,   752,   753,  2536,   552,  -664,   527,
    2919,  3628,  2259,  2265,  3630,  2269,  2304,   528,   646,   646,
     646,  2273,  2573,  2277,  2295,  2296,   646,  2301,  1667,   737,
    2305,  2093,  2862,  -664,   553,  2316,  4480,  4352,  2317,   919,
     919,  2318,  1364,  2575,  2335,  2339, -1244,  1272,  2345,  2094,
    2574,  1229,  1365, -1366,  1115,  2355,  1273,  1167,  2375,   554,
    1171,  2386,  2577,  2417,  1366,  1737,  1293,  2387,  2409,  1214,
    2423,  1274,  2431,  3885,  2941,   555,  2669,  1367,  1368,  1369,
    2434,  2458,  2477,  1668,  1669,  2461,  2669,  2493,  3043,  1275,
    2496,  4166,  2498,  1370,   748,  2491,  1214,  2492,  1737,  2499,
    2497,  2500,  2509,  2098,  3043,  2511,   636,  2516,  2669,   752,
     753,  2100,  1219,  1220,  2530,  2533,  1405,  2545,  2544,  2575,
    1736,  2548,  2549,  4610,  2576,  4485,  4486,  2551,  4488,  4480,
    2021,  2555,  1276,  2557,  1736,  2562,  2558,  4619,  2559,  1736,
    2537,  2593,  4610,  2606,  1736,  2022,  2560,  4619,  2561,  2611,
    2615,  2616,  1294,  2592,  2618,  4221,  2070,  2071,  2612,  2538,
    2619,  2625,  2628,  1277,  2629,  2627,  2636,  2637,  2672,  2676,
    2539,  2678,  2641,  2647,  3648,  4525,  2642,  4526,  4527,  2648,
    3139,  2106,  2709,  1295,   512,  2657,  4336,   513,  1278,  2717,
    -805,  -805,  2073,  1292,  1293,  1217,   774,  1296,  1279,  1177,
    2576,  3889,  -805,  2739,  3890,  3789,  3789,  3789,  2076,  3860,
    2757,  2765,  2761,  2770,  2786,  2787,   824,  2077,  2788,  2363,
    1297,   646,   780,  1298,  2799,  2800,  2812,   782,  2834,  2841,
     783,  2849,  2858,  4341,  2859,  1670,  1299,  2869,  2107,  2108,
    2109,  2079,  2870,  4339,  1280,   824,  4166,  2110,  2874,  1201,
    1671,  1672,  4580,  2540,  2889,  1515,  2886,  2892,  1300,  2080,
    2899,  2891,  2903,  2111,  2905,  1217,  4595,  2112,  1222,  1223,
    1224,  1225,  1226,  1227,  1228,  1229,  3870,  2923,  4035,  4036,
    1294,  4038,  4039,  1301,  3891,  3892,  2924,  2900,  2085,  3848,
    1302,  2925,  1217,  1864,  1737,  2904,  2489,  2909,  2469,  3757,
    2468,   774,  1928,  2946,  1927,   646,  3889,  2956,  2947,  3890,
    2023,  1295,  2114,  1371,   646,  2966,  2970,  2971,  2972,  2973,
    2974,  2976,  3781,  2981,  2982,  1296,  2983,   780,  2999,  3003,
    1372,  1303,   782,  3004,  3017,   783,  3122,  3148,  3050,   590,
    3052,  3149,  3132,  1219,  1220,  3134,  2577,  3154,  1297,  3155,
    3153,  1298,  3789,  3156,  3128,  2099,  3180,  2223,  3200,  3189,
    2089,   636,  3203,  3202,  1299,  2541,  3193,  3260,  2090,  3175,
    3903,  1405,   824,  3195,  3261,  3204,  3898,   824,  3206,  3266,
    3207,  3250,  3303,  3264,  3268,  2091,  1300,  2024,  3273,  3891,
    3892,  3276,  3304,  3305,  3301,  3306,  3302,  3308,  2741,  3313,
    4622,   646,  1338,  3320,  3344,  3342,  3345,  3354,   824,  1047,
    1048,  1301,  2025,  1219,  1220,  3316,  3355,  3317,  1302,  3337,
    3331,  3346,  2577,  3363,   824,  3374,  3375,  3383,  3946,  3387,
    3643,  3388,  3420,  3402,  3401,  3950,  3334,  2542,  3403,  4015,
    1219,  1220,  3391,  3492,  2093,  3495,  2070,  2071,  3359,  3863,
    3360,  3432,  3414,  3521,  3499,  3424,  3433,  1373,  3498,  1303,
    3503,  3434,  2094,  1304,  3505,  3516,  1968,  3509,   824,   824,
     824,   824,  2026,  3517,  3506,  3896,   646,  3522,  2450,  3525,
    3531,   824,  2073,  1306,  3532,  3533,  2012,  3551,  4339,  3553,
    3557,  1307,  3558,  3566,  4404,  3565,  3578,  2322,  2076,  1308,
    1223,  1224,  1225,  1226,  1227,  1228,  1229,  2077,  3255,  4404,
    2092,  2067,  3594,  2398,  3598,  3607,  2098,  3609,  3612,  3618,
    1374,  3636,  3620,  4414,  2100,  3631,  3644,  1309,  3657,  3926,
    3649,  2079,  3650,  3658,  3670,   646,  3678,  2399,  1375,  3681,
    1310,  1311,  3682,  3687,  3703,  1515,  3696,  3751,  2922,  2080,
    3754,  2400,  2670,  3758,  3756,  3764,  3777,  3789,  3789,  3785,
    3789,  3789,  2401,  4166,  3768,  3778,  2027,  3779,  3956,  1222,
    1223,  1224,  1225,  1226,  1227,  1228,  1229,  3792,  2085,  3799,
    3782,  3783,  3803,  3795,  1405,  3796,  3797,  3798,  4592,  3805,
    3807,  1304,  3808,  1312,  2106,  1305,  3812,  3816,  1224,  1225,
    1226,  1227,  1228,  1229,  3817,  3818,  3827,  3826,  3833,  3835,
    3834,  1306,  2402,  2403,  4592,  3843,  3844,  3841,  3853,  1307,
    3856,  3358,  3861,  3857,  3862,  4624,  3864,  1308, -1452, -1457,
    3901,  3874,  1313,  4101,   636,  3883,  3884,  3904,  3886,  4404,
    2404,  3887,  3912,  3742,  3916,  3789,  3918,  3930,  3931,  4512,
    2089,  2107,  2108,  2109,  1314,  1309,  1315,  3936,  2090,  3937,
    2110,  3938,  3745,  3944,  4018,  3957,  3979,  3973,  1310,  1311,
    3958,  3983,  3984,  3985,  4003,  2091,  2111,  3989,   636,  4004,
    2112,  4153,  4007,  3998,  4008,  4044,  4021,  4023,  4050,   646,
    4105,  4056,  3283,   751,  4119,  3806,  4059,  4060,  4544,  4129,
    4133,  4096,  3284,  4134,  4135,  4136,  4146,  2405,   824,  4198,
    4130,  4149,  4200,  4218,  3285,  4178,  -349,  4404,  4180,  4404,
    4192,  1312,  4230,  4220,  4191,  2114,  4563,  3286,  3287,  3288,
    4241,  4248,  4265,  4266,  2093,  4263,  4404,  4204,  4274,  4278,
    4223,  4283,  4211,  3289,  4233,  4240,  4271,  4276,  4102,  3117,
    4303,  -367,  2094,  4306,  4333,  4331,  4334,  4335,  4357,  2406,
    1313,  4351,  4354,  4368,   824,   824,  4404,  4404,  4373,  4380,
    4390,  4600,  4393,   824,   824,   824,   824,   824,   824,   824,
    2742,  4400,  1314,  4394,  1315,  4401,  4413,   824,   824,  4405,
     824,   824,  4147,  4416,  4423,   824,   824,  4411,  4412,   824,
     824,   824,   824,  4437,   824,   824,  2098,  4438,  4439,  4440,
    1262,  4446,   824,   824,  2100,   824,   824,   824,   824,   824,
    1737,  4447,   824,   824,   824,   824,   824,   824,   824,   824,
     824,   824,   824,  4448,   824,  1263,  4449,   824,   824,  4367,
    4450,  4451,   824,  1264,  4452,  4459,   824,   824,   824,  4457,
    4461,  4462,  2922, -2382,  2922,  4465,  4471,  4484,  4487,   824,
     824,   824,  4489,  4490,  4503,  1378,  1293,  4500,   824,  4505,
    4513,  4514,  4300,  4519,  4522,   824,   824,   824,  4516,   824,
    4528,  4307,  4531,  4532,  2106,  4533,   824,   824,   824,  4537,
     824,   824,   824,   824,   824,  4538,   824,   824,   824,   824,
     824,   824,   824,   824,  4542,  4548,  4545,   824,   824,  1265,
    4549,  4235,  2684,  2685,  4550,  2692,  4552,  4556,  2695,  2696,
    2697,  2698,  2699,  2700,  2701,  4558,  4561,  2704,  4562,  2706,
    4564,  4567,  4571,  4574,  1266,  4153,  4572,  4597,  1267,  4581,
    2865,  2107,  2108,  2109,   646,  4596,  4601,  4611,  4621,   855,
    2110,  2708,  1294,  3767,  2867,  1071,  3766,  3011,  3961,  4231,
    4342,  4472,  3959,  3290,  1527,  4473,  2111,  4100,  3963,  4613,
    2112,  4576,   604,   966,  2459,  1268,  2382,  3297,  4071,  4072,
    3291,  4074,  4075,  1295,  4077,  4078,  4079,  4080,  4081,  4585,
    4082,  4497,  4398,  1269,  4498,  4085,  4470,  1296,  4086,  4410,
    4409,  4482,  1596,  4087,  2063,  3319,  2661,  1270,  3428,  2115,
    4108,  3846,  3611,  1867,  4356,  2114,  3324,  4422,  3849,  4148,
    1297,  4547,  4483,  1298,  4521,  1737,  4273,  2182,   684,  3784,
    2659,  3173,  3695,  3514,  2666,  3683,  1299,  3710,  3119,  4052,
    3711,  3752,  3897,  3935,  4421,   646,  3921,  3001,  3252,  3583,
    3581,  3579,  4286,   687,  2066,   686,  1271,   539,  1300,  2067,
     540,  2068,  4288,  2069,  4361,   824,  4289,  2212,  4238,  4245,
    4243,  2751,  4118,  4055,  2070,  2071,   977,  2663,   824,  1997,
    3107,  1097,  1995,  1301,  3900,  3684,  2906,  2176,  2139,  2442,
    1302,  3292,  3310,  3608,  2887,  2929,   824,   992,  2467,  2840,
    1392,  3590,  3275,  2784,  1691,  2072,   646,  3293,  3654,  2839,
    2073,  2074,  1129,  2994,  4285,  4184,  4492,  3765,  2075,  4493,
    2856,  3690,  3139,  3139,  4025,  1642,  2076,  4017,  1146,  4566,
    2936,  1303,  4502,  2013,  1798,  2077,  1507,  2755,  1855,  4510,
    1508,  2912,  3851,  2885,  2078,  3624,  3623,  4419,  1509,   980,
    3664,  1510,  2221,  1893,  1089,  2518,   962,  1983,  3610,  2079,
    1961,  2519,  4430,  4431,  2376,  3694,  1551,  4546,  4441,  1900,
    3294,  4565,  4491,  1515,  4620,  1191,  4614,  2080,  4623,  3929,
    2180,  3627,  2503,  2955,  1272,  2081,  2082,  3646,  3295,   921,
    2338,   922,  2083,  1273,  2953,  2952,  2945,  2465,  1903,  1381,
    2084,  1913,  2397,  2422,  -952,  4247,  2085,  4554,  1274,  2202,
    3595,   891,  4559,  4253,  1384,   678,   679,  2086,  4222,  3954,
    1075,  1076,  1077,     0,     0,     0,  1275,  1552,  1553,  1554,
    1555,  1556,  1557,  1558,  1559,  1560,  1561,  2087,  1562,  1563,
    1564,  1565,  1566,  1567,  1568,  1569,  1570,  4593,  1571,  1572,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1304,     0,     0,     0,  1379,     0,  1276,
       0,  1737,     0,  4593,     0,     0,  2088,     0,  2089,     0,
       0,   646,     0,  1306,     0,  1737,  2090,     0,     0,     0,
    1737,  1307,     0,     0,     0,  1737,     0,     0,     0,  1308,
    1277,     0,     0,  2091,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1278,  2092,  1309,     0,     0,
       0,     0,     0,     0,     0,  1279,     0,     0,     0,     0,
    1310,  1311,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2093,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,  1574,     0,     0,     0,     0,     0,
    2094,  1280,     0,     0,  2095,     0,     0,     0,     0,     0,
       0,     0,     0,  1312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,   824,   824,     0,     0,     0,     0,
       0,     0,  1550,     0,     0,     0,     0,     0,   824,     0,
       0,     0,  2096,     0,     0,     0,     0,  2097,     0,     0,
       0,     0,  1313,     0,  2098,     0,     0,     0,     0,  2099,
       0,     0,  2100,     0,   824,     0,     0,     0,     0,     0,
     824,     0,     0,   824,  1314,   824,  1315,     0,     0,     0,
       0,   824,     0,   824,   824,     0,     0,     0,  1622,  1623,
       0,     0,     0,  2101,     0,     0,     0,  1633,  1634,     0,
       0,  1637,  1638,  1639,     0,     0,     0,  2102,  2103,  2104,
    2105,  1647,  1648,     0,  1649,  1650,     0,     0,     0,  1675,
       0,     0,     0,  1684,  1685,  1686,  1687,     0,  1689,     0,
       0,     0,  2106,     0,     0,     0,  1697,  1698,     0,  1701,
    1702,     0,     0,     0,     0,     0,  1706,  1707,  1708,     0,
       0,  1711,  1712,  1713,  1714,  1715,  1716,     0,  1718,     0,
       0,  1721,  1722,     0,     0,     0,  1725,     0,   824,     0,
    1728,  1732,  1733,     0,     0,     0,     0,     0,     0,   824,
       0,     0,     0,  1740,  1741,  1742,     0,     0,     0,  2107,
    2108,  2109,  1750,     0,     0,     0,     0,     0,  2110,  1755,
    1756,  1757,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   824,     0,     0,  2111,     0,  3105,     0,  2112,     0,
       0,  2067,     0,  2068,     0,     0,     0,     0,     0,     0,
       0,   824,  1793,     1,     0,     2,  2070,  2071,   824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2113,     3,     0,     0,     0,     4,     0,     0,     0,     0,
       0,     0,     0,  2114,     0,     0,     0,  2072,     0,     5,
       6,     0,  2073,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     8,     9,     0,     0,     0,     0,  2076,     0,
       0,     0,     0,     0,     0,     0,     0,  2077,     0,     0,
      10,     0,     0,     0,     0,     0,  2078,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
       0,  2079,     0,     0,  -952,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1515,     0,     0,     0,  2080,
       0,    12,     0,     0,     0,     0,     0,  2081,     0,     0,
      13,    14,    15,     0,  3106,     0,     0,     0,     0,     0,
       0,     0,  2084,    16,    17,     0,     0,     0,  2085,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1912,
      19,     0,     0,     0,     0,     0,     0,     0,     0,  2087,
       0,     0,  1921,     0,     0,     0,     0,     0,    20,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1948,     0,     0,    21,     0,    22,     0,     0,     0,     0,
      23,     0,     0,    24,     0,     0,     0,     0,     0,     0,
    2089,     0,   824,     0,     0,     0,     0,     0,  2090,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,    26,
       0,     0,     0,     0,     0,  2091,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2092,     0,
       0,     0,     0,     0,    28,     0,     0,     0,    29,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   824,
       0,     0,     0,   824,  2093,     0,     0,     0,   824,   824,
       0,     0,     0,     0,     0,     0,     0,   824,     0,     0,
     824,     0,  2094,     0,     0,     0,  2095,     0,     0,     0,
     824,   824,     0,   824,   824,     0,   824,   824,   824,   824,
     824,     0,     0,   824,     0,     0,     0,     0,     0,     0,
       0,     0,   824,     0,     0,     0,     0,     0,     0,   824,
       0,   824,     0,   824,   824,     0,   824,   824,     0,  2097,
       0,   824,   824,   824,    30,     0,  2098,   824,   824,   824,
       0,   824,     0,   824,  2100,   824,     0,   824,     0,   824,
       0,    31,  2070,  2071,   824,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,  2233,
       0,     0,     0,   824,     0,    33,     0,     0,     0,     0,
     824,     0,     0,   824,     0,     0,  -805,  -805,  2073,   824,
    2103,     0,   824,     0,     0,     0,   824,    34,  -805,     0,
      35,     0,    36,     0,  2076,    37,     0,     0,    38,    39,
       0,     0,     0,  2077,  2106,     0,     0,     0,    40,     0,
      41,     0,     0,  1653,  1654,  1655,  1656,  1657,    42,     0,
       0,     0,     0,     0,    43,     0,     0,  2079,     0,     0,
       0,     0,    44,     0,     0,     0,     0,    45,     0,    46,
       0,  1515,     0,     0,     0,  2080,     0,     0,   824,     0,
       0,     0,     0,     0,     0,     0,     0,  2308,  2310,  2312,
       0,  2107,  2108,  2109,     0,     0,     0,     0,     0,    47,
    2110,     0,     0,     0,  2085,     0,     0,     0,     0,    48,
       0,     0,     0,     0,     0,     0,  2111,     0,     0,     0,
    2112,     0,     0,     0,     0,     0,     0,     0,  2347,     0,
       0,     0,     0,     0,     0,   824,     0,  2352,     0,  2353,
       0,     0,     0,     0,     0,  1658,  1659,  1660,  1661,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    49,     0,     0,  2114,     0,     0,     0,     0,
       0,     0,     0,     0,    50,     0,  2089,     0,    51,     0,
       0,    52,     0,     0,  2090,     0,     0,    53,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2091,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    54,     0,     0,     0,  3009,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      55,     0,  2436,     0,     0,     0,     0,  3009,  3009,     0,
       0,     0,     0,  2438,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1662,     0,  1663,  1664,  1665,     0,
    2093,     0,     0,     0,     0,  1666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2484,     0,     0,  2094,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2502,     0,     0,     0,     0,
       0,     0,  2484,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2098,     0,     0,     0,     0,     0,     0,     0,
    2100,     0,     4,  1667,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     6,     0,     0,
       0,     0,     0,     0,     7,     0,  3009,  3009,     0,     8,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    10,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1668,  1669,
       0,     0,     0,     0,     0,     0,    11,     0,     0,     0,
    2106,     0,     0,     0,     0,     0,     0,   824,     0,     0,
       0,   824,     0,     0,     0,     0,     0,     0,    12,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
       0,   824,   824,     0,     0,     0,     0,     0,     0,     0,
      16,    17,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   824,     0,     0,     0,     0,  2107,  2108,  2109,
       0,   824,     0,   824,     0,   824,  2110,    19,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2111,     0,     0,    20,  2112,     0,     0,     0,
       0,     0,   824,     0,     0,     0,  2677,   824,     0,     0,
      21,     0,    22,     0,     0,     0,     0,    23,     0,     0,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   824,     0,     0,     0,
       0,  2114,     0,     0,    25,     0,    26,     0,     0,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,  1671,  1672,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,  2764,     0,    29,     0,  2766,     0,     0,
       0,     0,  2768,  2769,     0,     0,     0,     0,     0,     0,
       0,  2782,     0,     0,     0,     0,     0,     0,   824,     0,
       0,     0,     0,     0,  2789,  2790,     0,  2791,     0,     0,
    2793,  2794,  2795,  2796,  2797,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,  2801,     0,     0,     0,
       0,     0,     0,  2802,     0,  2803,     0,  2804,  2805,     0,
    2806,     0,     0,     0,   824,  2809,  2810,  2811,     0,     0,
       0,  2813,  2814,  2815,     0,  2816,     0,  2818,     0,  2820,
       0,  2822,     0,  2823,     0,     0,     0,     0,  2824,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2844,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,  2854,     0,     0,  2857,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,    35,     0,    36,
       0,     0,    37,     0,     0,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,    41,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,   824,
     824,    43,     0,     0,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,    45,     0,    46,     0,     0,     0,
       0,     0,     0,     0,  3009,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3437,  3438,     0,     0,     0,    47,  3439,     0,  3440,
       0,  3441,  3442,     0,     0,     0,    48,     0,     0,     0,
       0,     0,   824,     0,     0,     0,     0,     0,     0,  3443,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   824,     0,     0,
       0,   824,   824,     0,   824,     0,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,   824,    49,
       0,   824,     0,   824,   824,     0,     0,     0,     0,     0,
    3444,    50,     0,  3445,     0,    51,     0,     0,    52,     0,
       0,  3446,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   824,     0,     0,     0,
    3447,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,     0,     0,     0,  3448,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    55,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3449,     0,  3450,     0,     0,     0,     0,
       0,     0,     0,     0,   824,     0,     0,     0,  3451,  3452,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3453,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   824,     0,     0,
       0,     0,     0,     0,     0,   824,     0,     0,     0,     0,
    3454,     0,     0,     0,     0,     0,     0,     0,     0,  3455,
    3456,     0,  3457,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3458,  3459,
    3460,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3185,     0,     0,     0,  3187,     0,  3461,  3462,  3463,
       0,     0,     0,     0,  3464,     0,     0,  3465,     0,     0,
       0,     0,     0,     0,     0,  3209,  3210,     0,     0,     0,
       0,     0,     0,     0,  3466,  3467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3232,     0,     0,     0,
     866,   924,     0,     0,     0,  3242,     0,  3244,     0,  3246,
       0,     0,     0,     0,     0,     0,     0,  3468,  3469,     0,
       0,     0,     0,     0,     0,     0,   925,   909,     0,     0,
       0,     0,     0,   926,     0,     0,     0,     0,     0,   927,
       0,     0,  3470,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   928,     0,   929,     0,     0,     0,     0,
    3307,     0,     0,     0,     0,   930,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3471,     0,     0,     0,
    3472,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,  3473,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1824,   931,     0,     0,     0,     0,   932,
       0,     0,   933,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2484,     0,     0,   824,   824,     0,     0,     0,
       0,     0,     0,     0,   824,     0,     0,     0,     0,     0,
       0,   934,     0,   935,  3377,     0,     0,     0,     0,     0,
     936,     0,   937,     0,  3474,     0,     0,     0,  3475,     0,
       0,  3476,  3477,  3478,  3479,     0,     0,     0,  3396,     0,
       0,     0,     0,     0,     0,   938,   939,   940,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     941,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3480,  3481,     0,     0,     0,     0,     0,     0,
       0,   942,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3482,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   943,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,     0,     0,     0,   824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3493,  3494,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   944,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   945,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   946,   947,  3538,     0,   948,   949,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   950,
       0,  3556,     0,     0,     0,  3560,  3561,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3568,     0,     0,
       0,     0,  3570,     0,     0,  3571,     0,  3572,  3573,     0,
       0,     0,     0,  4089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   951,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   952,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   824,
   -2424,     0,     0,     0,  3604,     0,   953,   824,     0,     0,
       0,     0,     0,     0,   824,     0,   824,     0,     0,     0,
       0,     0,     0,     0,   954,   955,     0,     0,  3604,     0,
       0,     0,     0,     0,     0,   956,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,     0,     0,     0,     0,     0,
    4089,  4089,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   957,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3604, -2424,     0,     0,     0,     0,     0,   958,  3675,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,     0,   824,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   824,     0,  4089,  4089,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,     0,  4089,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3604,
    4089,   824,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4089,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   824,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3872,
    3873,     0,     0,     0,     0,     0,     0,     0,  3396,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,  4089,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4089,  4089,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4089,     0,     0,     0,     0,     0,     0,   824,     0,     0,
    4089,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,  4089,     0,  4089,
       0,     0,     0,     0,     0,     0,     0,     0,  3396,  4089,
       0,     0,  3982,   824,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4089,     0,  4089,     0,
    4089,     0,     0,     0,     0,     0,     0,  4089,     0,  3604,
       0,     0,     0,     0,     0,     0,     0,  4089,     0,     0,
       0,     0,     0,     0,  3396,     0,     0,     0,     0,     0,
       0,  4089,  4089,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4089,  4089,     0,
       0,     0,  4089,     0,     0,     0,     0,     0,   824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4172,     0,     0,     0,     0,     0,     0,  4177,     0,
    4179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4199,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3396,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3396,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4301,     0,
    4302,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4402,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3604,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   137,     0,   695,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   696,     0,   147,   148,   149,   150,
     697,   152,     0,   153,  4455,     0,   698,   154,   699,   700,
     701,   155,   702,     0,   156,   157,   158,  1729,   159,     0,
     160,   161,     0,     0,   162,   703,   704,   163,   164,     0,
     165,   166,   705,   706,   168,     0,   169,   170,   171,   172,
     173,     0,   707,   175,     0,   708,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   709,   194,     0,   710,   711,
     195,  4504,     0,   196,   712,   197,   713,     0,   198,   714,
     715,     0,   199,   200,   201,   716,   717,   718,     0,     0,
       0,     0,   719,   204,   720,     0,     0,   721,   205,   206,
       0,   207,     0,     0,  4530,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   722,     0,   232,   233,   234,   235,   236,
     723,   724,   237,   238,     0,   239,   240,   241,   725,     0,
     242,     0,     0,     0,   726,   244,     0,   245,     0,   246,
       0,   247,   727,   249,   728,     0,   251,     0,   252,     0,
     729,     0,   253,   254,     0,   255,   730,     0,   256,   257,
       0,     0,     0,   731,   259,   260,   261,   732,     0,   262,
     263,   264,  4602,   265,     0,   266,     0,     0,     0,   733,
     267,   268,   734,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,  3604,  1730,   277,     0,   735,   278,   279,     0,
       0,     0,     0,     0,   736,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,   737,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   738,   307,   308,   309,   310,   739,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   740,
     318,     0,     0,   741,   320,   742,   321,     0,   322,   743,
     744,   745,   746,   747,   327,   328,   329,   330,   331,     0,
     748,   332,   333,     0,     0,   334,   335,   336,   337,   749,
     750,   751,   338,   339,     0,   752,   753,   340,     0,   341,
     342,   754,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
     755,   351,   352,     0,   353,   354,   756,   356,   357,   358,
     359,   757,   758,   362,   759,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   760,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,   761,   762,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   763,
       0,   764,   399,   400,   401,   402,   403,   765,   766,   406,
     407,   408,   409,     0,   767,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,   768,
     769,   441,   442,     0,   443,   444,   770,   446,   447,   448,
     771,   772,   449,   450,   451,   452,   773,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,   774,   460,   461,
       0,   462,   775,   776,   777,   778,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,  1731,   475,
     476,     0,   779,   780,   781,   478,   479,   480,   782,   481,
     482,   783,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   784,   491,   492,     0,
       0,   785,   786,   787,   788,   493,     0,     0,   494,   789,
       0,   790,   495,   496,   497,   791,   792,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   793,     0,     0,     0,   794,   795,     0,     0,     0,
       0,   796,   797,     0,     0,   798,   799,     0,     0,   800,
     801,   137,     0,   695,   139,   140,   141,   142,  2480,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   696,     0,
     147,   148,   149,   150,   697,   152,     0,   153,     0,     0,
    2481,   154,   699,   700,   701,   155,   702,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   703,
     704,   163,   164,     0,   165,   166,   705,   706,   168,     0,
     169,   170,   171,   172,   173,     0,   707,   175,     0,   708,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   709,
     194,     0,   710,   711,   195,     0,     0,   196,   712,   197,
     713,     0,   198,   714,   715,     0,   199,   200,   201,   716,
     717,   718,     0,     0,     0,     0,   719,   204,   720,     0,
       0,  2482,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   722,     0,   232,
     233,   234,   235,   236,   723,   724,   237,   238,     0,   239,
     240,   241,   725,     0,   242,     0,     0,     0,   726,   244,
       0,   245,     0,   246,     0,   247,   727,   249,   728,     0,
     251,     0,   252,     0,   729,     0,   253,   254,     0,   255,
     730,     0,   256,   257,     0,     0,     0,   731,   259,   260,
     261,   732,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,   733,   267,   268,   734,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
     735,   278,   279,     0,     0,     0,     0,     0,   736,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,   737,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   738,   307,   308,
     309,   310,   739,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   740,   318,     0,     0,   741,   320,   742,
     321,     0,   322,   743,   744,   745,   746,   747,   327,   328,
     329,   330,   331,     0,   748,   332,   333,     0,     0,   334,
     335,   336,   337,   749,   750,   751,   338,   339,     0,   752,
     753,   340,     0,   341,   342,   754,  2483,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,   755,   351,   352,     0,   353,   354,
     756,   356,   357,   358,   359,   757,   758,   362,   759,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   760,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
     761,   762,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   763,     0,   764,   399,   400,   401,   402,
     403,   765,   766,   406,   407,   408,   409,     0,   767,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,   768,   769,   441,   442,     0,   443,   444,
     770,   446,   447,   448,   771,   772,   449,   450,   451,   452,
     773,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,   774,   460,   461,     0,   462,   775,   776,   777,   778,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,   779,   780,   781,   478,
     479,   480,   782,   481,   482,   783,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     784,   491,   492,     0,     0,   785,   786,   787,   788,   493,
       0,     0,   494,   789,     0,   790,   495,   496,   497,   791,
     792,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,     0,   793,     0,     0,     0,   794,
     795,     0,     0,     0,     0,   796,   797,     0,     0,   798,
     799,     0,     0,   800,   801,   137,     0,   695,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   696,     0,   147,   148,   149,   150,   697,   152,
       0,   153,     0,     0,   698,   154,   699,   700,   701,   155,
     702,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   703,   704,   163,   164,     0,   165,   166,
     705,   706,   168,     0,   169,   170,   171,   172,   173,     0,
     707,   175,     0,   708,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   709,   194,     0,   710,   711,   195,     0,
       0,   196,   712,   197,   713,     0,   198,   714,   715,     0,
     199,   200,   201,   716,   717,   718,     0,     0,     0,     0,
     719,   204,   720,     0,     0,   721,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   722,     0,   232,   233,   234,   235,   236,   723,   724,
     237,   238,     0,   239,   240,   241,   725,     0,   242,     0,
       0,     0,   726,   244,  2307,   245,     0,   246,     0,   247,
     727,   249,   728,     0,   251,     0,   252,     0,   729,     0,
     253,   254,     0,   255,   730,     0,   256,   257,     0,     0,
       0,   731,   259,   260,   261,   732,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,   733,   267,   268,
     734,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,   735,   278,   279,     0,     0,     0,
       0,     0,   736,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,   737,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   738,   307,   308,   309,   310,   739,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   740,   318,     0,
       0,   741,   320,   742,   321,     0,   322,   743,   744,   745,
     746,   747,   327,   328,   329,   330,   331,     0,   748,   332,
     333,     0,     0,   334,   335,   336,   337,   749,   750,   751,
     338,   339,     0,   752,   753,   340,     0,   341,   342,   754,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,   755,   351,
     352,     0,   353,   354,   756,   356,   357,   358,   359,   757,
     758,   362,   759,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   760,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,   761,   762,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   763,     0,   764,
     399,   400,   401,   402,   403,   765,   766,   406,   407,   408,
     409,     0,   767,   411,     0,     0,     0,   412,   413,   414,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,   768,   769,   441,
     442,     0,   443,   444,   770,   446,   447,   448,   771,   772,
     449,   450,   451,   452,   773,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,   774,   460,   461,     0,   462,
     775,   776,   777,   778,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
     779,   780,   781,   478,   479,   480,   782,   481,   482,   783,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   784,   491,   492,     0,     0,   785,
     786,   787,   788,   493,     0,     0,   494,   789,     0,   790,
     495,   496,   497,   791,   792,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,     0,   793,
       0,     0,     0,   794,   795,     0,     0,     0,     0,   796,
     797,     0,     0,   798,   799,     0,     0,   800,   801,   137,
       0,   695,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   696,     0,   147,   148,
     149,   150,   697,   152,     0,   153,     0,     0,   698,   154,
     699,   700,   701,   155,   702,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   703,   704,   163,
     164,     0,   165,   166,   705,   706,   168,     0,   169,   170,
     171,   172,   173,     0,   707,   175,     0,   708,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   709,   194,     0,
     710,   711,   195,     0,     0,   196,   712,   197,   713,     0,
     198,   714,   715,     0,   199,   200,   201,   716,   717,   718,
       0,     0,     0,     0,   719,   204,   720,     0,     0,   721,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   722,     0,   232,   233,   234,
     235,   236,   723,   724,   237,   238,     0,   239,   240,   241,
     725,     0,   242,     0,     0,     0,   726,   244,  2309,   245,
       0,   246,     0,   247,   727,   249,   728,     0,   251,     0,
     252,     0,   729,     0,   253,   254,     0,   255,   730,     0,
     256,   257,     0,     0,     0,   731,   259,   260,   261,   732,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,   733,   267,   268,   734,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,   735,   278,
     279,     0,     0,     0,     0,     0,   736,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,   737,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   738,   307,   308,   309,   310,
     739,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   740,   318,     0,     0,   741,   320,   742,   321,     0,
     322,   743,   744,   745,   746,   747,   327,   328,   329,   330,
     331,     0,   748,   332,   333,     0,     0,   334,   335,   336,
     337,   749,   750,   751,   338,   339,     0,   752,   753,   340,
       0,   341,   342,   754,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,   755,   351,   352,     0,   353,   354,   756,   356,
     357,   358,   359,   757,   758,   362,   759,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     760,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,   761,   762,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   763,     0,   764,   399,   400,   401,   402,   403,   765,
     766,   406,   407,   408,   409,     0,   767,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,   768,   769,   441,   442,     0,   443,   444,   770,   446,
     447,   448,   771,   772,   449,   450,   451,   452,   773,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,   774,
     460,   461,     0,   462,   775,   776,   777,   778,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,   779,   780,   781,   478,   479,   480,
     782,   481,   482,   783,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   784,   491,
     492,     0,     0,   785,   786,   787,   788,   493,     0,     0,
     494,   789,     0,   790,   495,   496,   497,   791,   792,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   793,     0,     0,     0,   794,   795,     0,
       0,     0,     0,   796,   797,     0,     0,   798,   799,     0,
       0,   800,   801,   137,     0,   695,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     696,     0,   147,   148,   149,   150,   697,   152,     0,   153,
       0,     0,   698,   154,   699,   700,   701,   155,   702,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   703,   704,   163,   164,     0,   165,   166,   705,   706,
     168,     0,   169,   170,   171,   172,   173,     0,   707,   175,
       0,   708,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   709,   194,     0,   710,   711,   195,     0,     0,   196,
     712,   197,   713,     0,   198,   714,   715,     0,   199,   200,
     201,   716,   717,   718,     0,     0,     0,     0,   719,   204,
     720,     0,     0,   721,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   722,
       0,   232,   233,   234,   235,   236,   723,   724,   237,   238,
       0,   239,   240,   241,   725,     0,   242,     0,     0,     0,
     726,   244,  2311,   245,     0,   246,     0,   247,   727,   249,
     728,     0,   251,     0,   252,     0,   729,     0,   253,   254,
       0,   255,   730,     0,   256,   257,     0,     0,     0,   731,
     259,   260,   261,   732,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,   733,   267,   268,   734,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,   735,   278,   279,     0,     0,     0,     0,     0,
     736,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,   737,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   738,
     307,   308,   309,   310,   739,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   740,   318,     0,     0,   741,
     320,   742,   321,     0,   322,   743,   744,   745,   746,   747,
     327,   328,   329,   330,   331,     0,   748,   332,   333,     0,
       0,   334,   335,   336,   337,   749,   750,   751,   338,   339,
       0,   752,   753,   340,     0,   341,   342,   754,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,   755,   351,   352,     0,
     353,   354,   756,   356,   357,   358,   359,   757,   758,   362,
     759,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   760,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,   761,   762,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   763,     0,   764,   399,   400,
     401,   402,   403,   765,   766,   406,   407,   408,   409,     0,
     767,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,   768,   769,   441,   442,     0,
     443,   444,   770,   446,   447,   448,   771,   772,   449,   450,
     451,   452,   773,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,   774,   460,   461,     0,   462,   775,   776,
     777,   778,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,   779,   780,
     781,   478,   479,   480,   782,   481,   482,   783,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   784,   491,   492,     0,     0,   785,   786,   787,
     788,   493,     0,     0,   494,   789,     0,   790,   495,   496,
     497,   791,   792,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,     0,   793,     0,     0,
       0,   794,   795,     0,     0,     0,     0,   796,   797,     0,
       0,   798,   799,     0,     0,   800,   801,   137,     0,   695,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   696,     0,   147,   148,   149,   150,
     697,   152,     0,   153,     0,     0,   698,   154,   699,   700,
     701,   155,   702,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,   703,   704,   163,   164,     0,
     165,   166,   705,   706,   168,     0,   169,   170,   171,   172,
     173,     0,   707,   175,     0,   708,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   709,   194,     0,   710,   711,
     195,     0,     0,   196,   712,   197,   713,     0,   198,   714,
     715,     0,   199,   200,   201,   716,   717,   718,     0,     0,
       0,     0,   719,   204,   720,     0,     0,   721,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   722,     0,   232,   233,   234,   235,   236,
     723,   724,   237,   238,     0,   239,   240,   241,   725,     0,
     242,     0,     0,     0,   726,   244,     0,   245,     0,   246,
       0,   247,   727,   249,   728,     0,   251,     0,   252,     0,
     729,     0,   253,   254,     0,   255,   730,     0,   256,   257,
       0,     0,     0,   731,   259,   260,   261,   732,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,   733,
     267,   268,   734,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,   735,   278,   279,     0,
       0,     0,     0,     0,   736,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,   737,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   738,   307,   308,   309,   310,   739,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   740,
     318,     0,     0,   741,   320,   742,   321,     0,   322,   743,
     744,   745,   746,   747,   327,   328,   329,   330,   331,     0,
     748,   332,   333,     0,     0,   334,   335,   336,   337,   749,
     750,   751,   338,   339,     0,   752,   753,   340,     0,   341,
     342,   754,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
     755,   351,   352,     0,   353,   354,   756,   356,   357,   358,
     359,   757,   758,   362,   759,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   760,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,   761,   762,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   763,
       0,   764,   399,   400,   401,   402,   403,   765,   766,   406,
     407,   408,   409,     0,   767,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,   768,
     769,   441,   442,     0,   443,   444,   770,   446,   447,   448,
     771,   772,   449,   450,   451,   452,   773,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,   774,   460,   461,
       0,   462,   775,   776,   777,   778,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,   779,   780,   781,   478,   479,   480,   782,   481,
     482,   783,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   784,   491,   492,     0,
       0,   785,   786,   787,   788,   493,     0,     0,   494,   789,
       0,   790,   495,   496,   497,   791,   792,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   793,     0,     0,     0,   794,   795,     0,     0,     0,
       0,   796,   797,     0,     0,   798,   799,     0,     0,   800,
     801,   137,     0,   695,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   696,     0,
     147,   148,   149,   150,   697,   152,     0,   153,     0,     0,
     698,   154,   699,   700,   701,   155,   702,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   703,
     704,   163,   164,     0,   165,   166,   705,   706,   168,     0,
     169,   170,   171,   172,   173,     0,   707,   175,     0,   708,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   709,
     194,     0,   710,   711,   195,     0,     0,   196,   712,   197,
     713,     0,   198,   714,   715,     0,   199,   200,   201,   716,
     717,   718,     0,     0,     0,     0,   719,   204,   720,     0,
       0,   721,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   722,     0,   232,
     233,   234,   235,   236,   723,   724,   237,   238,     0,   239,
     240,   241,   725,     0,   242,     0,     0,     0,   726,   244,
       0,   245,     0,   246,     0,   247,   727,   249,   728,     0,
     251,     0,   252,     0,   729,     0,   253,   254,     0,   255,
     730,     0,   256,   257,     0,     0,     0,   731,   259,   260,
     261,   732,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,   733,   267,   268,   734,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
     735,   278,   279,     0,     0,     0,     0,     0,   736,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,   737,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   738,   307,   308,
     309,   310,   739,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   740,   318,     0,     0,   741,   320,   742,
     321,     0,   322,   743,   744,   745,   746,   747,   327,   328,
     329,   330,   331,     0,   748,   332,   333,     0,     0,   334,
     335,   336,   337,   749,   750,   751,   338,   339,     0,   752,
     753,   340,     0,   341,   342,   754,     0,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,   755,   351,   352,     0,   353,   354,
     756,   356,   357,   358,   359,   757,   758,   362,   759,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   760,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
     761,   762,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   763,     0,   764,   399,   400,   401,   402,
     403,   765,   766,   406,   407,   408,   409,     0,   767,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,   768,   769,   441,   442,     0,   443,   444,
     770,   446,   447,   448,   771,   772,   449,   450,   451,   452,
     773,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,   774,   460,   461,     0,   462,   775,   776,   777,   778,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,   779,   780,   781,   478,
     479,   480,   782,   481,   482,   783,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     784,   491,   492,     0,     0,   785,   786,   787,   788,   493,
       0,     0,   494,   789,     0,   790,   495,   496,   497,   791,
     792,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,     0,   793,     0,     0,     0,   794,
     795,     0,     0,     0,     0,   796,  1128,     0,     0,   798,
     799,     0,     0,   800,   801,   137,     0,   695,   139,   140,
     141,   142,  1764,     0,   143,     0,     0,     0,  1765,   145,
       0,     0,   696,     0,   147,   148,   149,   150,   697,   152,
       0,   153,     0,     0,   698,   154,   699,   700,   701,   155,
     702,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   703,   704,   163,   164,     0,   165,   166,
     705,   706,   168,     0,   169,   170,   171,   172,   173,     0,
     707,   175,     0,   708,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   709,   194,     0,   710,   711,   195,     0,
       0,   196,   712,   197,   713,     0,   198,   714,   715,     0,
     199,   200,   201,   716,   717,   718,     0,     0,     0,     0,
     719,   204,   720,     0,     0,   721,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   722,     0,   232,   233,   234,   235,   236,   723,   724,
     237,   238,     0,   239,   240,   241,   725,     0,   242,     0,
       0,     0,   726,   244,     0,   245,     0,   246,     0,   247,
     727,   249,   728,     0,   251,     0,   252,     0,   729,     0,
     253,   254,     0,   255,   730,     0,   256,   257,     0,     0,
       0,   731,   259,   260,   261,   732,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,   733,   267,   268,
     734,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,   735,   278,   279,     0,     0,     0,
       0,     0,   736,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,   737,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   738,   307,   308,   309,   310,   739,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   740,   318,     0,
       0,   741,   320,   742,   321,     0,   322,   743,   744,   745,
     746,   747,   327,   328,   329,   330,   331,     0,   748,   332,
     333,     0,     0,   334,   335,   336,   337,   749,     0,   751,
     338,   339,     0,   752,   753,   340,     0,   341,   342,   754,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,   755,   351,
     352,     0,   353,   354,   756,   356,   357,   358,   359,   757,
     758,   362,   759,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   760,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,   761,   762,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   763,     0,   764,
     399,   400,   401,   402,   403,   765,   766,   406,   407,   408,
     409,     0,   767,   411,     0,     0,     0,   412,   413,   414,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,   768,   769,   441,
     442,     0,   443,   444,   770,   446,   447,   448,   771,   772,
     449,   450,   451,   452,   773,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,   774,   460,   461,     0,   462,
     775,   776,   777,   778,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
     779,   780,   781,   478,   479,   480,   782,   481,   482,   783,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   784,   491,   492,     0,     0,   785,
     786,   787,   788,   493,     0,     0,   494,   789,     0,   790,
     495,   496,   497,   791,   792,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,     0,   793,
       0,     0,     0,   794,   795,     0,     0,     0,     0,   796,
     797,     0,     0,   798,   799,     0,     0,   800,   801,   137,
       0,   695,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   696,     0,   147,   148,
     149,   150,   697,   152,     0,   153,     0,     0,   698,   154,
     699,   700,   701,   155,   702,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   703,   704,   163,
     164,     0,   165,   166,   705,   706,   168,     0,   169,   170,
     171,   172,   173,     0,   707,   175,     0,   708,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   709,   194,     0,
     710,   711,   195,     0,     0,   196,   712,   197,   713,     0,
     198,   714,   715,     0,   199,   200,   201,   716,   717,   718,
       0,     0,     0,     0,   719,   204,   720,     0,     0,   721,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   722,     0,   232,   233,   234,
     235,   236,   723,   724,   237,   238,     0,   239,   240,   241,
     725,     0,   242,     0,     0,     0,   726,   244,     0,   245,
       0,   246,     0,   247,   727,   249,   728,     0,   251,     0,
     252,     0,   729,     0,   253,   254,     0,   255,   730,     0,
     256,   257,     0,     0,     0,   731,   259,   260,   261,   732,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,   733,   267,   268,  2763,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,   735,   278,
     279,     0,     0,     0,     0,     0,   736,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,   737,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   738,   307,   308,   309,   310,
     739,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   740,   318,     0,     0,   741,   320,   742,   321,     0,
     322,   743,   744,   745,   746,   747,   327,   328,   329,   330,
     331,     0,   748,   332,   333,     0,     0,   334,   335,   336,
     337,   749,   750,   751,   338,   339,     0,   752,   753,   340,
       0,   341,   342,   754,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,   755,   351,   352,     0,   353,   354,   756,   356,
     357,   358,   359,   757,   758,   362,   759,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     760,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,   761,   762,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   763,     0,   764,   399,   400,   401,   402,   403,   765,
     766,   406,   407,   408,   409,     0,   767,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,   768,   769,   441,   442,     0,   443,   444,   770,   446,
     447,   448,   771,   772,   449,   450,   451,   452,   773,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,   774,
     460,   461,     0,   462,   775,   776,   777,   778,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,   779,   780,   781,   478,   479,   480,
     782,   481,   482,   783,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   784,   491,
     492,     0,     0,   785,   786,   787,   788,   493,     0,     0,
     494,   789,     0,   790,   495,   496,   497,   791,   792,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   793,     0,     0,     0,   794,   795,     0,
       0,     0,     0,   796,   797,     0,     0,   798,   799,     0,
       0,   800,   801,   137,     0,   695,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     696,     0,   147,   148,   149,   150,   697,   152,     0,   153,
       0,     0,   698,   154,   699,   700,   701,   155,   702,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   703,   704,   163,   164,     0,   165,   166,   705,   706,
     168,     0,   169,   170,   171,   172,   173,     0,   707,   175,
       0,   708,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   709,   194,     0,   710,   711,   195,     0,     0,   196,
     712,   197,   713,     0,   198,   714,   715,     0,   199,   200,
     201,   716,   717,   718,     0,     0,     0,     0,   719,   204,
     720,     0,     0,   721,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   722,
       0,   232,   233,   234,   235,   236,   723,   724,   237,   238,
       0,   239,   240,   241,   725,     0,   242,     0,     0,     0,
     726,   244,     0,   245,     0,   246,     0,   247,   727,   249,
     728,     0,   251,     0,   252,     0,   729,     0,   253,   254,
       0,   255,   730,     0,   256,   257,     0,     0,     0,   731,
     259,   260,   261,   732,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,   733,   267,   268,  2808,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,   735,   278,   279,     0,     0,     0,     0,     0,
     736,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,   737,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   738,
     307,   308,   309,   310,   739,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   740,   318,     0,     0,   741,
     320,   742,   321,     0,   322,   743,   744,   745,   746,   747,
     327,   328,   329,   330,   331,     0,   748,   332,   333,     0,
       0,   334,   335,   336,   337,   749,   750,   751,   338,   339,
       0,   752,   753,   340,     0,   341,   342,   754,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,   755,   351,   352,     0,
     353,   354,   756,   356,   357,   358,   359,   757,   758,   362,
     759,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   760,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,   761,   762,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   763,     0,   764,   399,   400,
     401,   402,   403,   765,   766,   406,   407,   408,   409,     0,
     767,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,   768,   769,   441,   442,     0,
     443,   444,   770,   446,   447,   448,   771,   772,   449,   450,
     451,   452,   773,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,   774,   460,   461,     0,   462,   775,   776,
     777,   778,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,   779,   780,
     781,   478,   479,   480,   782,   481,   482,   783,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   784,   491,   492,     0,     0,   785,   786,   787,
     788,   493,     0,     0,   494,   789,     0,   790,   495,   496,
     497,   791,   792,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,     0,   793,     0,     0,
       0,   794,   795,     0,     0,     0,     0,   796,   797,     0,
       0,   798,   799,     0,     0,   800,   801,   137,     0,   695,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   696,     0,   147,   148,   149,   150,
     697,   152,     0,   153,     0,     0,   698,   154,   699,   700,
     701,   155,   702,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,   703,   704,   163,   164,     0,
     165,   166,   705,   706,   168,     0,   169,   170,   171,   172,
     173,     0,   707,   175,     0,   708,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   709,   194,     0,   710,   711,
     195,     0,     0,   196,   712,   197,   713,     0,   198,   714,
     715,     0,   199,   200,   201,   716,   717,   718,     0,     0,
       0,     0,   719,   204,   720,     0,     0,  3603,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   722,     0,   232,   233,   234,   235,   236,
     723,   724,   237,   238,     0,   239,   240,   241,   725,     0,
     242,     0,     0,     0,   726,   244,     0,   245,     0,   246,
       0,   247,   727,   249,   728,     0,   251,     0,   252,     0,
     729,     0,   253,   254,     0,   255,   730,     0,   256,   257,
       0,     0,     0,   731,   259,   260,   261,   732,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,   733,
     267,   268,   734,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,   735,   278,   279,     0,
       0,     0,     0,     0,   736,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,   737,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   738,   307,   308,   309,   310,   739,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   740,
     318,     0,     0,   741,   320,   742,   321,     0,   322,   743,
     744,   745,   746,   747,   327,   328,   329,   330,   331,     0,
     748,   332,   333,     0,     0,   334,   335,   336,   337,   749,
     750,   751,   338,   339,     0,   752,   753,   340,     0,   341,
     342,   754,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
     755,   351,   352,     0,   353,   354,   756,   356,   357,   358,
     359,   757,   758,   362,   759,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   760,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,   761,   762,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   763,
       0,   764,   399,   400,   401,   402,   403,   765,   766,   406,
     407,   408,   409,     0,   767,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,   768,
     769,   441,   442,     0,   443,   444,   770,   446,   447,   448,
     771,   772,   449,   450,   451,   452,   773,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,   774,   460,   461,
       0,   462,   775,   776,   777,   778,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,   779,   780,   781,   478,   479,   480,   782,   481,
     482,   783,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   784,   491,   492,     0,
       0,   785,   786,   787,   788,   493,     0,     0,   494,   789,
       0,   790,   495,   496,   497,   791,   792,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   793,     0,     0,     0,   794,   795,     0,     0,     0,
       0,   796,   797,     0,     0,   798,   799,     0,     0,   800,
     801,   137,     0,   695,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   696,     0,
     147,   148,   149,   150,   697,   152,     0,   153,     0,     0,
     698,   154,   699,   700,   701,   155,   702,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   703,
     704,   163,   164,     0,   165,   166,   705,   706,   168,     0,
     169,   170,   171,   172,   173,     0,   707,   175,     0,   708,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   709,
     194,     0,   710,   711,   195,     0,     0,   196,   712,   197,
     713,     0,   198,   714,   715,     0,   199,   200,   201,   716,
     717,   718,     0,     0,     0,     0,   719,   204,   720,     0,
       0,   721,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   722,     0,   232,
     233,   234,   235,   236,   723,   724,   237,   238,     0,   239,
     240,   241,   725,     0,   242,     0,     0,     0,   726,   244,
       0,   245,     0,   246,     0,   247,   727,   249,   728,     0,
     251,     0,   252,     0,   729,     0,   253,   254,     0,   255,
     730,     0,   256,   257,     0,     0,     0,   731,   259,   260,
     261,   732,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,   733,   267,   268,   734,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
     735,   278,   279,     0,     0,     0,     0,     0,   736,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,   737,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   738,   307,   308,
     309,   310,   739,   311,   312,  4477,     0,     0,     0,   313,
     314,   315,   316,   740,   318,     0,     0,   741,   320,   742,
     321,     0,   322,   743,   744,   745,   746,   747,   327,   328,
     329,   330,   331,     0,   748,   332,   333,     0,     0,   334,
     335,   336,   337,   749,     0,   751,   338,   339,     0,   752,
     753,   340,     0,   341,   342,   754,     0,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,   755,   351,   352,     0,   353,   354,
     756,   356,   357,   358,   359,   757,   758,   362,   759,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   760,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
     761,   762,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   763,     0,   764,   399,   400,   401,   402,
     403,   765,   766,   406,   407,   408,   409,     0,   767,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,   768,   769,   441,   442,     0,   443,   444,
     770,   446,   447,   448,   771,   772,   449,   450,   451,   452,
     773,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,   774,   460,   461,     0,   462,   775,   776,   777,   778,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,   779,   780,   781,   478,
     479,   480,   782,   481,   482,   783,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     784,   491,   492,     0,     0,   785,   786,   787,   788,   493,
       0,     0,   494,   789,     0,   790,   495,   496,   497,   791,
     792,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,     0,   793,     0,     0,     0,   794,
     795,     0,     0,     0,     0,   796,   797,     0,     0,   798,
     799,     0,     0,   800,   801,   137,     0,   695,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   696,     0,   147,   148,   149,   150,   697,   152,
       0,   153,     0,     0,   698,   154,   699,   700,   701,   155,
     702,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   703,   704,   163,   164,     0,   165,   166,
     705,   706,   168,     0,   169,   170,   171,   172,   173,     0,
     707,   175,     0,   708,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   709,   194,     0,   710,   711,   195,     0,
       0,   196,   712,   197,   713,     0,   198,   714,   715,     0,
     199,   200,   201,   716,   717,   718,     0,     0,     0,     0,
     719,   204,   720,     0,     0,   721,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   722,     0,   232,   233,   234,   235,   236,   723,   724,
     237,   238,     0,   239,   240,   241,   725,     0,   242,     0,
       0,     0,   726,   244,     0,   245,     0,   246,     0,   247,
     727,   249,   728,     0,   251,     0,   252,     0,   729,     0,
     253,   254,     0,   255,   730,     0,   256,   257,     0,     0,
       0,   731,   259,   260,   261,   732,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,   733,   267,   268,
     734,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,   735,   278,   279,     0,     0,     0,
       0,     0,   736,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,   737,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   738,   307,   308,   309,   310,   739,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   740,   318,     0,
       0,   741,   320,   742,   321,     0,   322,   743,   744,   745,
     746,   747,   327,   328,   329,   330,   331,     0,   748,   332,
     333,     0,     0,   334,   335,   336,   337,   749,     0,   751,
     338,   339,     0,   752,   753,   340,     0,   341,   342,   754,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,   755,   351,
     352,     0,   353,   354,   756,   356,   357,   358,   359,   757,
     758,   362,   759,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   760,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,   761,   762,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   763,     0,   764,
     399,   400,   401,   402,   403,   765,   766,   406,   407,   408,
     409,     0,   767,   411,     0,     0,     0,   412,   413,   414,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,   768,   769,   441,
     442,     0,   443,   444,   770,   446,   447,   448,   771,   772,
     449,   450,   451,   452,   773,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,   774,   460,   461,     0,   462,
     775,   776,   777,   778,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
     779,   780,   781,   478,   479,   480,   782,   481,   482,   783,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   784,   491,   492,     0,     0,   785,
     786,   787,   788,   493,     0,     0,   494,   789,     0,   790,
     495,   496,   497,   791,   792,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,     0,   793,
       0,     0,     0,   794,   795,     0,     0,     0,     0,   796,
     797,     0,     0,   798,   799,     0,     0,   800,   801,   137,
       0,   695,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   696,     0,   147,   148,
     149,   150,   697,   152,     0,   153,     0,     0,   698,   154,
     699,   700,   701,   155,   702,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   703,   704,   163,
     164,     0,   165,   166,   705,   706,   168,     0,   169,   170,
     171,   172,   173,     0,   707,   175,     0,   708,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   709,   194,     0,
     710,   711,   195,     0,     0,   196,   712,   197,   713,     0,
     198,   714,   715,     0,   199,   200,   201,   716,   717,   718,
       0,     0,     0,     0,   719,   204,   720,     0,     0,   721,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   722,     0,   232,   233,   234,
     235,   236,   723,   724,   237,   238,     0,   239,   240,   241,
     725,     0,   242,     0,     0,     0,   726,   244,     0,   245,
       0,   246,     0,   247,   727,   249,   728,     0,   251,     0,
     252,     0,   729,     0,   253,   254,     0,   255,   730,     0,
     256,   257,     0,     0,     0,   731,   259,   260,   261,   732,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,   733,   267,   268,  1779,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,   735,   278,
     279,     0,     0,     0,     0,     0,   736,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,   737,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   738,   307,   308,   309,   310,
     739,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   740,   318,     0,     0,   741,   320,   742,   321,     0,
     322,   743,   744,   745,   746,   747,   327,   328,   329,   330,
     331,     0,   748,   332,   333,     0,     0,   334,   335,   336,
     337,   749,     0,   751,   338,   339,     0,   752,   753,   340,
       0,   341,   342,   754,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,   755,   351,   352,     0,   353,   354,   756,   356,
     357,   358,   359,   757,   758,   362,   759,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     760,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,   761,   762,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   763,     0,   764,   399,   400,   401,   402,   403,   765,
     766,   406,   407,   408,   409,     0,   767,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,   768,   769,   441,   442,     0,   443,   444,   770,   446,
     447,   448,   771,   772,   449,   450,   451,   452,   773,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,   774,
     460,   461,     0,   462,   775,   776,   777,   778,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,   779,   780,   781,   478,   479,   480,
     782,   481,   482,   783,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   784,   491,
     492,     0,     0,   785,   786,   787,   788,   493,     0,     0,
     494,   789,     0,   790,   495,   496,   497,   791,   792,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   793,     0,     0,     0,   794,   795,     0,
       0,     0,     0,   796,   797,     0,     0,   798,   799,     0,
       0,   800,   801,   137,     0,   695,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     696,     0,   147,   148,   149,   150,   697,   152,     0,   153,
       0,     0,   698,   154,   699,   700,   701,   155,   702,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   703,   704,   163,   164,     0,   165,   166,   705,   706,
     168,     0,   169,   170,   171,   172,   173,     0,   707,   175,
       0,   708,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   709,   194,     0,   710,   711,   195,     0,     0,   196,
     712,   197,   713,     0,   198,   714,   715,     0,   199,   200,
     201,   716,   717,   718,     0,     0,     0,     0,   719,   204,
     720,     0,     0,   721,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   722,
       0,   232,   233,   234,   235,   236,   723,   724,   237,   238,
       0,   239,   240,   241,   725,     0,   242,     0,     0,     0,
     726,   244,     0,   245,     0,   246,     0,   247,   727,   249,
     728,     0,   251,     0,   252,     0,   729,     0,   253,   254,
       0,   255,   730,     0,   256,   257,     0,     0,     0,   731,
     259,   260,   261,   732,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,   733,   267,   268,  1781,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,   735,   278,   279,     0,     0,     0,     0,     0,
     736,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,   737,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   738,
     307,   308,   309,   310,   739,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   740,   318,     0,     0,   741,
     320,   742,   321,     0,   322,   743,   744,   745,   746,   747,
     327,   328,   329,   330,   331,     0,   748,   332,   333,     0,
       0,   334,   335,   336,   337,   749,     0,   751,   338,   339,
       0,   752,   753,   340,     0,   341,   342,   754,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,   755,   351,   352,     0,
     353,   354,   756,   356,   357,   358,   359,   757,   758,   362,
     759,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   760,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,   761,   762,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   763,     0,   764,   399,   400,
     401,   402,   403,   765,   766,   406,   407,   408,   409,     0,
     767,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,   768,   769,   441,   442,     0,
     443,   444,   770,   446,   447,   448,   771,   772,   449,   450,
     451,   452,   773,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,   774,   460,   461,     0,   462,   775,   776,
     777,   778,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,   779,   780,
     781,   478,   479,   480,   782,   481,   482,   783,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   784,   491,   492,     0,     0,   785,   786,   787,
     788,   493,     0,     0,   494,   789,     0,   790,   495,   496,
     497,   791,   792,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,     0,   793,     0,     0,
       0,   794,   795,     0,     0,     0,     0,   796,   797,     0,
       0,   798,   799,     0,     0,   800,   801,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,   699,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,  1817,     0,     0,
       0,     0,   203,   204,   720,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,   724,   237,   238,     0,   239,   240,   241,   725,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,   730,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,   737,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     748,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,   752,   753,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,   774,   460,   461,
       0,   462,  1818,   464,   465,  1819,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,   780,   477,   478,   479,   480,   782,   481,
     482,   783,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   505,     0,     0,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,   800,
     801,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,  2594,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,   521,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,  2143,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,  2144,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,  3169,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   351,   352,
    2099,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,  -481,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   524,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,     0,   505,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   146,  2665,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,  2594,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
     521,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,  2143,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
    2144,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   524,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   505,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,  2665,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,     0,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,  2450,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,     0,   505,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
    2913,     0,   144,   145,     0,     0,   146,   801,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   505,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   137,  4606,   138,   139,   140,   141,
     142,  4607,   801,   143,     0,     0,     0,   144,   145,     0,
       0,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,     0,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,     0,   505,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,  1132,
       0,     0,   144,   145,     0,     0,   146,   801,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,  1355,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   505,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,   562,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,     0,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,     0,   505,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,  2664,
       0,     0,   144,   145,     0,     0,   146,  2665,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   505,     0,     0,     0,     0,     0,  2875,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,   562,   144,   145,     0,     0,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,   204,     0,     0,     0,
       0,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,   214,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,   219,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,     0,   232,   233,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,     0,     0,   242,     0,     0,     0,   243,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,     0,   253,   254,     0,   255,     0,
       0,   256,   257,     0,     0,     0,   258,   259,   260,   261,
       0,     0,   262,   263,   264,     0,   265,     0,   266,     0,
       0,     0,     0,   267,   268,     0,     0,     0,   269,     0,
       0,     0,   270,   271,     0,   272,   273,     0,     0,     0,
     274,     0,     0,   275,   276,     0,     0,   277,     0,     0,
     278,   279,     0,     0,     0,     0,     0,   280,   281,     0,
     282,     0,   283,     0,   284,   285,     0,     0,     0,     0,
       0,     0,     0,   286,     0,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
     340,     0,   341,   342,   343,     0,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,   351,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
     397,     0,   398,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
       0,     0,   412,   413,   414,   415,     0,     0,     0,   416,
       0,     0,     0,   417,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
     427,   428,   429,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,   437,   438,   439,   440,
       0,     0,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,     0,   455,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,   466,     0,
       0,     0,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,     0,
       0,   494,     0,     0,     0,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
     503,   504,     0,     0,   505,     0,     0,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,  4607,   801,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   505,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
     562,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,   204,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     232,   233,   234,   631,   236,     0,     0,   237,   238,     0,
     239,   240,   241,     0,     0,   242,     0,     0,     0,   632,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,   253,   254,     0,
     255,     0,     0,   256,   257,     0,     0,     0,   258,   259,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,     0,     0,     0,     0,   267,   268,     0,     0,     0,
     269,     0,     0,     0,   270,   271,     0,   272,   273,     0,
       0,     0,   274,     0,     0,   275,   276,     0,     0,   277,
       0,     0,   278,   279,     0,     0,     0,     0,     0,   280,
     281,     0,   282,     0,   283,     0,   284,   285,     0,     0,
       0,     0,     0,     0,     0,   286,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,   340,     0,   341,   342,   343,     0,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   351,   352,     0,   633,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,   397,     0,   398,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,     0,     0,   412,   413,   414,   415,     0,     0,
       0,   416,     0,     0,     0,   417,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,   437,   438,
     439,   440,     0,     0,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,     0,   455,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
     466,     0,     0,     0,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,   503,   504,     0,     0,   505,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   146,   562,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   505,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
     801,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,   204,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     232,   233,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,     0,     0,   242,     0,     0,     0,   243,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,   253,   254,     0,
     255,     0,     0,   256,   257,     0,     0,     0,   258,   259,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,     0,     0,     0,     0,   267,   268,     0,     0,     0,
     269,     0,     0,     0,   270,   271,     0,   272,   273,     0,
       0,     0,   274,     0,     0,   275,   276,     0,     0,   277,
       0,     0,   278,   279,     0,     0,     0,     0,     0,   280,
     281,     0,   282,     0,   283,     0,   284,   285,     0,     0,
       0,     0,     0,     0,     0,   286,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,   340,     0,   341,   342,   343,     0,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,   397,     0,   398,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,     0,     0,   412,   413,   414,   415,     0,     0,
       0,   416,     0,     0,     0,   417,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,   437,   438,
     439,   440,     0,     0,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,     0,   455,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
     466,     0,     0,     0,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,   503,   504,     0,     0,   505,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   146,  2665,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   908,   909,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,   910,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   911,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   912,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   913,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   914,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   915,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   916,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   505,     0,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,   917,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,     0,   267,   268,     0,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,     0,   278,   279,   644,     0,     0,     0,     0,
     280,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,     0,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,   340,     0,   341,   342,   343,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   398,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,   134,   460,   461,     0,   462,   463,   464,
     465,   466,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,     0,   505,     0,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,  1409,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,   644,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,   134,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,     0,   505,     0,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,  1751,   146,     0,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,   164,     0,   165,   166,
     908,   909,   168,     0,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,   910,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   911,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,     0,   267,   268,
       0,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,     0,   278,   279,     0,     0,     0,
       0,     0,   280,   281,     0,   912,     0,   283,     0,   284,
     285,     0,     0,     0,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   913,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,   340,     0,   341,   342,   343,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,   351,
     352,     0,   353,   354,   914,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   398,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,     0,     0,   412,   413,   915,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
       0,     0,   477,   478,   479,   480,     0,   481,   482,     0,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,     0,     0,   494,     0,     0,     0,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,     0,   505,
       0,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,   917,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,     0,   267,   268,     0,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
       0,   278,   279,   644,     0,     0,     0,     0,   280,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,     0,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,   340,     0,   341,   342,   343,     0,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   398,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,   134,   460,   461,     0,   462,   463,   464,   465,   466,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,     0,     0,   477,   478,
     479,   480,     0,   481,   482,     0,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
       0,     0,   494,     0,     0,     0,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,     0,   505,     0,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,  3640,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,  1285,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
       0,   505,     0,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,  1286,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,     0,   267,   268,     0,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,     0,   278,   279,     0,     0,     0,     0,     0,
     280,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,     0,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,   340,     0,   341,   342,   343,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   398,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,     0,   505,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   145,     0,     0,  1286,     0,   147,   148,   149,
     150,   151,     0,     0,  -369,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  4062,     0,   163,   164,
       0,   165,   166,     0,     0,     0,     0,   169,   170,   171,
     172,  4063,     0,   174,   175,     0,   176,   177,     0,   178,
     179,     0,   181,     0,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,     0,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,     0,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,     0,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,  4064,   239,   240,   241,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,     0,   254,     0,     0,     0,     0,     0,
     257,     0,     0,     0,   258,   259,   260,   261,  4065,     0,
     262,   263,   264,     0,   265,     0,   266,     0,     0,     0,
       0,   267,     0,     0,     0,     0,   269,     0,     0,     0,
     270,   271,     0,   272,   273,  4066,     0,     0,   274,     0,
       0,     0,   276,     0,     0,   277,  4067,     0,   278,   279,
       0,     0,     0,     0,     0,   280,   281,     0,   282,     0,
     283,     0,   284,   285,     0,     0,     0,     0,  -324,     0,
       0,   286,     0,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,     0,   339,     0,     0,     0,   340,     0,
     341,   342,   343,     0,   344,   345,  4068,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,     0,     0,   388,     0,   390,  -324,     0,   391,
       0,     0,     0,   393,     0,     0,   395,   396,   397,  4069,
     398,     0,     0,     0,   400,   401,   402,   403,   404,   405,
     406,     0,   408,   409,     0,   410,     0,     0,     0,     0,
     412,   413,   414,     0,     0,     0,     0,   416,     0,     0,
       0,   417,     0,     0,   419,     0,   421,     0,   422,     0,
       0,   425,   426,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,     0,   436,   437,   438,   439,   440,     0,     0,
       0,     0,     0,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,     0,   455,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,   466,     0,     0,     0,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,     0,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,     0,     0,     0,     0,
     487,     0,     0,   488,     0,     0,     0,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,     0,     0,   494,
       0,     0,     0,   495,   496,   497,   498,   499,     0,     0,
    -324,     0,     0,     0,   500,     0,     0,   502,     0,   504,
       0,     0,   505,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,  4599,   144,   145,     0,     0,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,     0,   267,   268,     0,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,     0,   278,   279,     0,     0,     0,     0,     0,
     280,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,     0,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,   340,     0,   341,   342,   343,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   398,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,   137,   505,   138,   139,
     140,   141,   142,  2223,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,     0,   265,     0,   266,     0,     0,     0,     0,   267,
     268,     0,     0,     0,   269,     0,     0,     0,   270,   271,
       0,   272,   273,     0,     0,     0,   274,     0,     0,   275,
     276,     0,     0,   277,     0,     0,   278,   279,     0,     0,
       0,     0,     0,   280,   281,     0,   282,     0,   283,     0,
     284,   285,     0,     0,     0,     0,     0,     0,     0,   286,
       0,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,   340,     0,   341,   342,
     343,     0,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,   397,     0,   398,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,     0,     0,   412,   413,
     414,   415,     0,     0,     0,   416,     0,     0,     0,   417,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,   427,   428,   429,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,   437,   438,   439,   440,     0,     0,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,     0,
     455,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,   466,     0,     0,     0,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,     0,     0,   494,     0,     0,
       0,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,   503,   504,     0,   137,
     505,   138,   139,   140,   141,   142,  2943,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,   137,   505,   138,   139,   140,   141,   142,  3599,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,   204,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     232,   233,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,     0,     0,   242,     0,     0,     0,   243,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,   253,   254,     0,
     255,     0,     0,   256,   257,     0,     0,     0,   258,   259,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,     0,     0,     0,     0,   267,   268,     0,     0,     0,
     269,     0,     0,     0,   270,   271,     0,   272,   273,     0,
       0,     0,   274,     0,     0,   275,   276,     0,     0,   277,
       0,     0,   278,   279,     0,     0,     0,     0,     0,   280,
     281,     0,   282,     0,   283,     0,   284,   285,     0,     0,
       0,     0,     0,     0,     0,   286,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,   340,     0,   341,   342,   343,     0,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,   397,     0,   398,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,     0,     0,   412,   413,   414,   415,     0,     0,
       0,   416,     0,     0,     0,   417,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,   437,   438,
     439,   440,     0,     0,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,     0,   455,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
     466,     0,     0,     0,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,   503,   504,     0,   137,   505,   138,   139,   140,
     141,   142,  3645,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   146,     0,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,   164,     0,   165,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,  2572,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,  2573,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,  2574,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,     0,   267,   268,
       0,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,     0,   278,   279,     0,     0,     0,
       0,     0,   280,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,  2575,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,  1047,  1048,     0,
     338,   339,     0,     0,  2576,   340,     0,   341,   342,   343,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,   351,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   398,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,     0,     0,   412,   413,   414,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,  4586,   590,  4587,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
       0,     0,   477,   478,   479,   480,  2577,   481,   482,     0,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,     0,     0,   494,     0,     0,     0,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,   137,   505,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   145,     0,     0,   146,     0,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,  1398,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,   204,     0,     0,     0,  1399,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,  1400,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,     0,
       0,   242,     0,     0,     0,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,   253,   254,     0,   255,     0,     0,   256,
     257,     0,     0,     0,   258,   259,   260,   261,     0,     0,
     262,   263,   264,     0,   265,     0,   266,     0,     0,     0,
       0,   267,   268,     0,     0,     0,   269,     0,     0,     0,
     270,   271,     0,   272,   273,     0,     0,     0,   274,     0,
       0,   275,   276,     0,     0,   277,     0,     0,   278,   279,
     644,     0,     0,     0,     0,   280,   281,     0,   282,     0,
     283,     0,   284,   285,     0,     0,     0,     0,     0,     0,
       0,   286,     0,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,   340,     0,
     341,   342,   343,     0,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,   397,     0,
     398,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,     0,     0,
     412,   413,   414,   415,     0,     0,  1401,   416,     0,     0,
       0,   417,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,   437,   438,   439,   440,     0,     0,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,     0,   455,   456,   457,   458,   459,     0,   134,   460,
     461,     0,   462,   463,   464,   465,   466,     0,     0,     0,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,   477,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,     0,     0,   494,
       0,     0,     0,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,   503,   504,
       0,   137,   505,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
    1411,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,  1412,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,     0,   267,   268,     0,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
       0,   278,   279,   644,     0,     0,     0,     0,   280,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,     0,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,   340,     0,   341,   342,   343,     0,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   398,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,   134,   460,   461,     0,   462,   463,   464,   465,   466,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,     0,     0,   477,   478,
     479,   480,     0,   481,   482,     0,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
       0,     0,   494,     0,     0,     0,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,   137,   505,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,     0,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,  1962,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,  1963,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,   755,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,  1964,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,   137,   505,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  1398,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,  1399,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,   644,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,   134,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
     137,   505,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,     0,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,     0,   195,     0,     0,   196,     0,   197,  1004,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,   204,     0,     0,     0,
       0,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,   214,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,   219,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,     0,   232,   233,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,     0,     0,   242,     0,     0,     0,   243,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,     0,   253,   254,     0,   255,     0,
       0,   256,   257,     0,     0,     0,   258,   259,   260,   261,
       0,     0,   262,   263,   264,     0,   265,     0,   266,     0,
       0,     0,     0,   267,   268,     0,     0,     0,   269,     0,
       0,     0,   270,   271,     0,   272,   273,     0,     0,     0,
     274,     0,     0,   275,   276,     0,     0,   277,     0,     0,
     278,   279,   644,     0,     0,     0,     0,   280,   281,     0,
     282,     0,   283,     0,   284,   285,     0,     0,     0,     0,
       0,     0,     0,   286,     0,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
     340,     0,   341,   342,   343,     0,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,   351,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
     397,     0,   398,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
       0,     0,   412,   413,   414,   415,     0,     0,     0,   416,
       0,     0,     0,   417,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
     427,   428,   429,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,   437,   438,   439,   440,
       0,     0,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,     0,   455,   456,   457,   458,   459,     0,
     134,   460,   461,     0,   462,   463,   464,   465,   466,     0,
       0,     0,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,     0,
       0,   494,     0,     0,     0,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
     503,   504,     0,   137,   505,   138,   139,   140,   141,   142,
    1434,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,     0,   267,   268,     0,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,     0,   278,   279,   644,     0,     0,     0,     0,
     280,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,     0,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,   340,     0,   341,   342,   343,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   398,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,   134,   460,   461,     0,   462,   463,   464,
     465,   466,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,   137,   505,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   981,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,   982,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,     0,   265,     0,   266,     0,     0,     0,     0,   267,
     268,     0,     0,     0,   269,     0,     0,     0,   270,   271,
       0,   272,   273,     0,     0,     0,   274,     0,     0,   275,
     276,     0,     0,   277,     0,     0,   278,   279,     0,     0,
       0,     0,     0,   280,   281,     0,   282,     0,   283,     0,
     284,   285,     0,     0,     0,     0,     0,     0,     0,   286,
       0,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,   340,     0,   341,   342,
     343,     0,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,   397,     0,   398,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,     0,     0,   412,   413,
     414,   415,     0,     0,     0,   416,     0,     0,     0,   417,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,   427,   428,   429,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,   437,   438,   439,   440,     0,     0,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,     0,
     455,   456,   457,   458,   459,     0,   983,   460,   461,     0,
     462,   463,   464,   465,   466,     0,     0,     0,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,     0,     0,   494,     0,     0,
       0,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,   503,   504,     0,   137,
     505,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,  2486,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,   644,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,   134,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,   137,   505,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,  1398,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,   204,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     232,   233,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,     0,     0,   242,     0,     0,     0,   243,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,   253,   254,     0,
     255,     0,     0,   256,   257,     0,     0,     0,   258,   259,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,     0,     0,     0,     0,   267,   268,     0,     0,     0,
     269,     0,     0,     0,   270,   271,     0,   272,   273,     0,
       0,     0,   274,     0,     0,   275,   276,     0,     0,   277,
       0,     0,   278,   279,   644,     0,     0,     0,     0,   280,
     281,     0,   282,     0,   283,     0,   284,   285,     0,     0,
       0,     0,     0,     0,     0,   286,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,   340,     0,   341,   342,   343,     0,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,   397,     0,   398,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,     0,     0,   412,   413,   414,   415,     0,     0,
       0,   416,     0,     0,     0,   417,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,   437,   438,
     439,   440,     0,     0,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,     0,   455,   456,   457,   458,
     459,     0,   134,   460,   461,     0,   462,   463,   464,   465,
     466,     0,     0,     0,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,   503,   504,     0,   137,   505,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   146,     0,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,   164,     0,   165,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,     0,   267,   268,
       0,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,     0,   278,   279,   644,     0,     0,
       0,     0,   280,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,     0,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,   340,     0,   341,   342,   343,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,   351,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   398,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,     0,     0,   412,   413,   414,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,   134,   460,   461,     0,   462,
     463,   464,   465,   466,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
       0,     0,   477,   478,   479,   480,     0,   481,   482,     0,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,     0,     0,   494,     0,     0,     0,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,   137,   505,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   145,  2939,     0,   146,     0,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,   204,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,     0,
       0,   242,     0,     0,     0,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,   253,   254,     0,   255,     0,     0,   256,
     257,     0,     0,     0,   258,   259,   260,   261,     0,     0,
     262,   263,   264,     0,   265,     0,   266,     0,     0,     0,
       0,   267,   268,     0,     0,     0,   269,     0,     0,     0,
     270,   271,     0,   272,   273,     0,     0,     0,   274,     0,
       0,   275,   276,     0,     0,   277,     0,     0,   278,   279,
       0,     0,     0,     0,     0,   280,   281,     0,   282,     0,
     283,     0,   284,   285,     0,     0,     0,     0,     0,     0,
       0,   286,     0,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,   340,     0,
     341,   342,   343,     0,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,   397,     0,
     398,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,     0,     0,
     412,   413,   414,   415,     0,     0,     0,   416,     0,     0,
       0,   417,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,   437,   438,   439,   440,     0,     0,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,     0,   455,   456,   457,   458,   459,     0,   134,   460,
     461,     0,   462,   463,   464,   465,   466,     0,     0,     0,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,   477,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,     0,     0,   494,
       0,     0,     0,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,   503,   504,
       0,   137,   505,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,  4506,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,  4507,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,     0,   267,   268,     0,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
       0,   278,   279,     0,     0,     0,     0,     0,   280,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,     0,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,   340,     0,   341,   342,   343,     0,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   398,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,     0,     0,   477,   478,
     479,   480,     0,   481,   482,     0,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
       0,     0,   494,     0,     0,     0,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,   137,   505,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,     0,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,     0,
       0,     0,   590,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,   137,   505,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,  1084,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
     137,   505,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,     0,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,   204,     0,     0,     0,
     910,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,   214,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,   219,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,     0,   232,   233,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,     0,     0,   242,     0,     0,     0,   243,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,     0,   253,   254,     0,   255,     0,
       0,   256,   257,     0,     0,     0,   258,   259,   260,   261,
       0,     0,   262,   263,   264,     0,   265,     0,   266,     0,
       0,     0,     0,   267,   268,     0,     0,     0,   269,     0,
       0,     0,   270,   271,     0,   272,   273,     0,     0,     0,
     274,     0,     0,   275,   276,     0,     0,   277,     0,     0,
     278,   279,     0,     0,     0,     0,     0,   280,   281,     0,
     282,     0,   283,     0,   284,   285,     0,     0,     0,     0,
       0,     0,     0,   286,     0,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
     340,     0,   341,   342,   343,     0,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,   351,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,     0,     0,   363,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,   392,     0,   393,   394,     0,   395,   396,
     397,     0,   398,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
       0,     0,   412,   413,   414,   415,     0,     0,     0,   416,
       0,     0,     0,   417,     0,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
     427,   428,   429,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,   437,   438,   439,   440,
       0,     0,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,     0,   455,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,   466,     0,
       0,     0,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,     0,
       0,   494,     0,     0,     0,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
     503,   504,     0,   137,   505,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   166,   167,     0,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,   910,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,     0,   267,   268,     0,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
       0,     0,     0,   274,     0,     0,   275,   276,     0,     0,
     277,     0,     0,   278,   279,     0,     0,     0,     0,     0,
     280,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,     0,     0,     0,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,   340,     0,   341,   342,   343,     0,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   351,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
       0,     0,   363,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,   392,     0,   393,   394,
       0,   395,   396,   397,     0,   398,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,     0,     0,   412,   413,   414,   415,     0,
       0,     0,   416,     0,     0,     0,   417,     0,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,   437,
     438,   439,   440,     0,     0,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,  1939,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,   503,   504,     0,   137,   505,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,   204,     0,     0,     0,  2136,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
     264,     0,   265,     0,   266,     0,     0,     0,     0,   267,
     268,     0,     0,     0,   269,     0,     0,     0,   270,   271,
       0,   272,   273,     0,     0,     0,   274,     0,     0,   275,
     276,     0,     0,   277,     0,     0,   278,   279,     0,     0,
       0,     0,     0,   280,   281,     0,   282,     0,   283,     0,
     284,   285,     0,     0,     0,     0,     0,     0,     0,   286,
       0,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,   340,     0,   341,   342,
     343,     0,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
     351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,     0,     0,   363,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,   392,
       0,   393,   394,     0,   395,   396,   397,     0,   398,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,     0,     0,   412,   413,
     414,   415,     0,     0,     0,   416,     0,     0,     0,   417,
       0,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,   427,   428,   429,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,   437,   438,   439,   440,     0,     0,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,     0,
     455,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,   466,     0,     0,     0,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,     0,     0,   494,     0,     0,
       0,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,   503,   504,     0,   137,
     505,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,  3031,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,   268,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,     0,     0,     0,   274,
       0,     0,   275,   276,     0,     0,   277,     0,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,     0,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   351,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,     0,     0,   363,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,   392,     0,   393,   394,     0,   395,   396,   397,
       0,   398,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,     0,
       0,   412,   413,   414,   415,     0,     0,     0,   416,     0,
       0,     0,   417,     0,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   437,   438,   439,   440,     0,
       0,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,   503,
     504,     0,   137,   505,   138,   139,   140,   141,   142,  3039,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,   204,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     232,   233,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,     0,     0,   242,     0,     0,     0,   243,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,   253,   254,     0,
     255,     0,     0,   256,   257,     0,     0,     0,   258,   259,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,     0,     0,     0,     0,   267,   268,     0,     0,     0,
     269,     0,     0,     0,   270,   271,     0,   272,   273,     0,
       0,     0,   274,     0,     0,   275,   276,     0,     0,   277,
       0,     0,   278,   279,     0,     0,     0,     0,     0,   280,
     281,     0,   282,     0,   283,     0,   284,   285,     0,     0,
       0,     0,     0,     0,     0,   286,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,   340,     0,   341,   342,   343,     0,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   351,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
       0,   363,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,   392,     0,   393,   394,     0,
     395,   396,   397,     0,   398,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,     0,     0,   412,   413,   414,   415,     0,     0,
       0,   416,     0,     0,     0,   417,     0,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,   437,   438,
     439,   440,     0,     0,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,     0,   455,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
     466,     0,     0,     0,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,   503,   504,     0,   137,   505,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   146,     0,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,   164,     0,   165,   166,
     167,     0,   168,     0,   169,   170,   171,   172,   173,     0,
     174,   175,     0,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,  3063,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,     0,   267,   268,
       0,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,     0,     0,     0,   274,     0,     0,   275,   276,
       0,     0,   277,     0,     0,   278,   279,     0,     0,     0,
       0,     0,   280,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,     0,     0,     0,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,   340,     0,   341,   342,   343,
       0,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,   351,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,     0,     0,   363,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,   392,     0,
     393,   394,     0,   395,   396,   397,     0,   398,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,     0,     0,   412,   413,   414,
     415,     0,     0,     0,   416,     0,     0,     0,   417,     0,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,   437,   438,   439,   440,     0,     0,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
       0,     0,   477,   478,   479,   480,     0,   481,   482,     0,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,     0,     0,   494,     0,     0,     0,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,   503,   504,     0,   137,   505,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   145,     0,     0,   146,     0,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,   204,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,     0,
       0,   242,     0,     0,     0,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,   253,   254,     0,   255,     0,     0,   256,
     257,     0,     0,     0,   258,   259,   260,   261,     0,     0,
     262,   263,   264,     0,   265,     0,   266,     0,     0,     0,
       0,   267,   268,     0,     0,     0,   269,     0,     0,     0,
     270,   271,     0,   272,   273,     0,     0,     0,   274,     0,
       0,   275,   276,     0,     0,   277,     0,     0,   278,   279,
       0,     0,     0,     0,     0,   280,   281,     0,   282,     0,
     283,     0,   284,   285,     0,     0,     0,     0,     0,     0,
       0,   286,     0,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,   340,     0,
     341,   342,   343,     0,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,   351,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,     0,     0,   363,   364,   365,
    3135,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,   392,     0,   393,   394,     0,   395,   396,   397,     0,
     398,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,     0,     0,
     412,   413,   414,   415,     0,     0,     0,   416,     0,     0,
       0,   417,     0,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,   437,   438,   439,   440,     0,     0,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,     0,   455,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,   466,     0,     0,     0,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,   477,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,     0,     0,   494,
       0,     0,     0,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,   503,   504,
       0,   137,   505,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   146,     0,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,   164,     0,   165,   166,   167,     0,   168,     0,
     169,   170,   171,   172,   173,     0,   174,   175,     0,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,     0,   267,   268,     0,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,     0,     0,
       0,   274,     0,     0,   275,   276,     0,     0,   277,     0,
       0,   278,   279,     0,     0,     0,     0,     0,   280,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,     0,
       0,     0,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,   340,     0,   341,   342,   343,     0,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,   351,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,     0,     0,
     363,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,   392,     0,   393,   394,     0,   395,
     396,   397,     0,   398,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
       0,     0,     0,   412,   413,   414,   415,     0,     0,     0,
     416,     0,     0,     0,   417,     0,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,   437,   438,   439,
     440,     0,     0,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,   134,   460,   461,     0,   462,   463,   464,   465,   466,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,     0,     0,   477,   478,
     479,   480,     0,   481,   482,     0,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
       0,     0,   494,     0,     0,     0,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,   503,   504,     0,   137,   505,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,     0,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
     204,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,     0,   239,   240,   241,     0,     0,   242,     0,     0,
       0,   243,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,   253,
     254,     0,   255,     0,     0,   256,   257,     0,     0,     0,
     258,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,     0,     0,     0,   274,     0,     0,   275,   276,     0,
       0,   277,     0,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,     0,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   351,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,     0,     0,   363,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,   392,     0,   393,
     394,     0,   395,   396,   397,     0,   398,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,     0,     0,   412,   413,   414,   415,
       0,     0,     0,   416,     0,     0,     0,   417,     0,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     437,   438,   439,   440,     0,     0,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,   477,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,   503,   504,     0,   137,   505,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,  1850,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,   268,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,     0,     0,     0,   274,     0,     0,
     275,   276,     0,     0,   277,     0,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,     0,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,  1851,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   351,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,     0,     0,   363,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
     392,     0,   393,   394,     0,   395,   396,   397,     0,   398,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,     0,     0,   412,
     413,   414,   415,     0,     0,     0,   416,     0,     0,     0,
     417,     0,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,   437,   438,   439,   440,     0,     0,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,   503,   504,     0,
     137,   505,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,     0,     0,     0,   147,
     148,   149,   150,   151,     0,     0,  -369,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  4062,     0,
     163,   164,     0,   165,   166,     0,     0,     0,     0,   169,
     170,   171,   172,  4063,     0,   174,   175,     0,   176,   177,
       0,   178,   179,     0,   181,     0,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,     0,   194,
       0,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,     0,     0,     0,
       0,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
       0,   215,   216,   217,     0,  -339,  -339,   218,     0,  -339,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,     0,     0,     0,   232,   233,
     234,   235,   236,     0,     0,   237,   238,  4064,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,     0,     0,   254,     0,     0,     0,
       0,     0,   257,     0,     0,     0,   258,   259,   260,   261,
    4065,     0,   262,   263,   264,     0,   265,     0,   266,     0,
       0,     0,     0,   267,     0,     0,     0,     0,   269,     0,
       0,     0,   270,   271,     0,   272,   273,  4066,     0,     0,
     274,     0,     0,     0,   276,     0,     0,   277,  4067,     0,
     278,   279,     0,     0,     0,     0,     0,   280,   281,     0,
     282,     0,   283,     0,   284,   285,     0,     0,     0,     0,
    -324,     0,     0,   286,     0,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,     0,   339,     0,     0,     0,
     340,     0,   341,   342,   343,     0,   344,   345,  4068,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,     0,     0,   388,     0,   390,  -324,
       0,   391,     0,     0,     0,   393,     0,     0,   395,   396,
     397,  4069,   398,     0,     0,     0,   400,   401,   402,   403,
     404,   405,   406,     0,   408,   409,     0,   410,     0,     0,
       0,     0,   412,   413,   414,     0,     0,     0,     0,   416,
       0,     0,     0,   417,     0,     0,   419,     0,   421,     0,
     422,     0,     0,   425,   426,     0,     0,     0,     0,     0,
     427,   428,   429,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,     0,   436,   437,   438,   439,   440,
       0,     0,     0,     0,     0,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,     0,   455,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,   466,     0,
       0,     0,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,     0,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,     0,
       0,     0,   487,     0,     0,   488,     0,     0,     0,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,     0,
       0,   494,     0,     0,     0,   495,   496,   497,   498,   499,
       0,     0,  -324,     0,     0,     0,   500,     0,     0,   502,
       0,   504,     0,   137,   505,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
       0,     0,   147,   148,   149,   150,   151,     0,     0,  -369,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  4062,     0,   163,   164,     0,   165,   166,     0,     0,
       0,     0,   169,   170,   171,   172,  4063,     0,   174,   175,
       0,   176,   177,     0,   178,   179,     0,   181,     0,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,     0,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,     0,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,   215,   216,   217,     0,  -360,     0,
     218,     0,  -360,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,     0,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
    4064,   239,   240,   241,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,     0,   254,
       0,     0,     0,     0,     0,   257,     0,     0,     0,   258,
     259,   260,   261,  4065,     0,   262,   263,   264,     0,   265,
       0,   266,     0,     0,     0,     0,   267,     0,     0,     0,
       0,   269,     0,     0,     0,   270,   271,     0,   272,   273,
    4066,     0,     0,   274,     0,     0,     0,   276,     0,     0,
     277,  4067,     0,   278,   279,     0,     0,     0,     0,     0,
     280,   281,     0,   282,     0,   283,     0,   284,   285,     0,
       0,     0,     0,  -324,     0,     0,   286,     0,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,     0,   339,
       0,     0,     0,   340,     0,   341,   342,   343,     0,   344,
     345,  4068,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,     0,     0,   364,   365,     0,   366,     0,   367,   368,
     369,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,     0,     0,   376,   377,   378,   379,   380,     0,     0,
     381,   382,   383,   384,   385,     0,   386,     0,     0,   388,
       0,   390,  -324,     0,   391,     0,     0,     0,   393,     0,
       0,   395,   396,   397,  4069,   398,     0,     0,     0,   400,
     401,   402,   403,   404,   405,   406,     0,   408,   409,     0,
     410,     0,     0,     0,     0,   412,   413,   414,     0,     0,
       0,     0,   416,     0,     0,     0,   417,     0,     0,   419,
       0,   421,     0,   422,     0,     0,   425,   426,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,     0,   436,   437,
     438,   439,   440,     0,     0,     0,     0,     0,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,     0,   455,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,     0,     0,     0,     0,   467,   468,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
       0,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,     0,     0,     0,   487,     0,     0,   488,     0,
       0,     0,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   495,   496,
     497,   498,   499,  -360,     0,  -324,     0,     0,     0,   500,
       0,     0,   502,     0,   504,     0,   137,   505,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -369,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4062,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4063,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,     0,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,     0,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,     0,     0,     0,   215,   216,   217,
       0,  -357,     0,   218,     0,  -357,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,     0,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,  4064,   239,   240,   241,     0,     0,     0,
       0,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,     0,   254,     0,     0,     0,     0,     0,   257,     0,
       0,     0,   258,   259,   260,   261,  4065,     0,   262,   263,
     264,     0,   265,     0,   266,     0,     0,     0,     0,   267,
       0,     0,     0,     0,   269,     0,     0,     0,   270,   271,
       0,   272,   273,  4066,     0,     0,   274,     0,     0,     0,
     276,     0,     0,   277,  4067,     0,   278,   279,     0,     0,
       0,     0,     0,   280,   281,     0,   282,     0,   283,     0,
     284,   285,     0,     0,     0,     0,  -324,     0,     0,   286,
       0,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,     0,   339,     0,     0,     0,   340,     0,   341,   342,
     343,     0,   344,   345,  4068,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,     0,     0,   364,   365,     0,   366,
       0,   367,   368,   369,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,     0,     0,   376,   377,   378,   379,
     380,     0,     0,   381,   382,   383,   384,   385,     0,   386,
       0,     0,   388,     0,   390,  -324,     0,   391,     0,     0,
       0,   393,     0,     0,   395,   396,   397,  4069,   398,     0,
       0,     0,   400,   401,   402,   403,   404,   405,   406,     0,
     408,   409,     0,   410,     0,     0,     0,     0,   412,   413,
     414,     0,     0,     0,     0,   416,     0,     0,     0,   417,
       0,     0,   419,     0,   421,     0,   422,     0,     0,   425,
     426,     0,     0,     0,     0,     0,   427,   428,   429,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
       0,   436,   437,   438,   439,   440,     0,     0,     0,     0,
       0,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,     0,
     455,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,   466,     0,     0,     0,     0,   467,
     468,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,     0,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,     0,     0,     0,     0,   487,     0,
       0,   488,     0,     0,     0,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,     0,     0,   494,     0,     0,
       0,   495,   496,   497,   498,   499,  -357,     0,  -324,     0,
       0,     0,   500,     0,     0,   502,     0,   504,     0,   137,
     505,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,     0,     0,   147,   148,
     149,   150,   151,     0,     0,  -369,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  4062,     0,   163,
     164,     0,   165,   166,     0,     0,     0,     0,   169,   170,
     171,   172,  4063,     0,   174,   175,     0,   176,   177,     0,
     178,   179,     0,   181,     0,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,     0,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,     0,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,  4403,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,     0,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,  4064,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,   257,     0,     0,     0,   258,   259,   260,   261,  4065,
       0,   262,   263,   264,     0,   265,     0,   266,     0,     0,
       0,     0,   267,     0,     0,     0,     0,   269,     0,     0,
       0,   270,   271,     0,   272,   273,  4066,     0,     0,   274,
       0,     0,     0,   276,     0,     0,   277,  4067,     0,   278,
     279,     0,     0,     0,     0,     0,   280,   281,     0,   282,
       0,   283,     0,   284,   285,     0,     0,     0,     0,  -324,
       0,     0,   286,     0,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,     0,   339,     0,     0,     0,   340,
       0,   341,   342,   343,     0,   344,   345,  4068,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,     0,     0,   364,
     365,     0,   366,     0,   367,   368,   369,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,     0,     0,   376,
     377,   378,   379,   380,     0,     0,   381,   382,   383,   384,
     385,     0,   386,     0,     0,   388,     0,   390,  -324,     0,
     391,     0,     0,     0,   393,     0,     0,   395,   396,   397,
    4069,   398,     0,     0,     0,   400,   401,   402,   403,   404,
     405,   406,     0,   408,   409,     0,   410,     0,     0,     0,
       0,   412,   413,   414,     0,     0,     0,     0,   416,     0,
       0,     0,   417,     0,     0,   419,     0,   421,     0,   422,
       0,     0,   425,   426,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,     0,   436,   437,   438,   439,   440,     0,
       0,     0,     0,     0,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,     0,   455,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,     0,     0,
       0,     0,   467,   468,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,     0,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,     0,     0,     0,
       0,   487,     0,     0,   488,     0,     0,     0,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   495,   496,   497,   498,   499,     0,
       0,  -324,     0,     0,     0,   500,     0,     0,   502,     0,
     504,     0,   137,   505,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,     0,
       0,   147,   148,   149,   150,   151,     0,     0,  -369,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    4062,     0,   163,   164,     0,   165,   166,     0,     0,     0,
       0,   169,   170,   171,   172,  4063,     0,   174,   175,     0,
     176,   177,     0,   178,   179,     0,   181,     0,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
       0,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,     0,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,  -362,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,     0,     0,     0,
     232,   233,   234,   235,   236,     0,     0,   237,   238,  4064,
     239,   240,   241,     0,     0,     0,     0,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,   257,     0,     0,     0,   258,   259,
     260,   261,  4065,     0,   262,   263,   264,     0,   265,     0,
     266,     0,     0,     0,     0,   267,     0,     0,     0,     0,
     269,     0,     0,     0,   270,   271,     0,   272,   273,  4066,
       0,     0,   274,     0,     0,     0,   276,     0,     0,   277,
    4067,     0,   278,   279,     0,     0,     0,     0,     0,   280,
     281,     0,   282,     0,   283,     0,   284,   285,     0,     0,
       0,     0,  -324,     0,     0,   286,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,     0,   339,     0,
       0,     0,   340,     0,   341,   342,   343,     0,   344,   345,
    4068,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
       0,     0,   364,   365,     0,   366,     0,   367,   368,   369,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
       0,     0,   376,   377,   378,   379,   380,     0,     0,   381,
     382,   383,   384,   385,     0,   386,     0,     0,   388,     0,
     390,  -324,     0,   391,     0,     0,     0,   393,     0,     0,
     395,   396,   397,  4069,   398,     0,     0,     0,   400,   401,
     402,   403,   404,   405,   406,     0,   408,   409,     0,   410,
       0,     0,     0,     0,   412,   413,   414,     0,     0,     0,
       0,   416,     0,     0,     0,   417,     0,     0,   419,     0,
     421,     0,   422,     0,     0,   425,   426,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,     0,   436,   437,   438,
     439,   440,     0,     0,     0,     0,     0,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,     0,   455,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
     466,     0,     0,     0,     0,   467,   468,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   495,   496,   497,
     498,   499,     0,     0,  -324,     0,     0,     0,   500,     0,
       0,   502,     0,   504,     0,   137,   505,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,     0,     0,   147,   148,   149,   150,   151,     0,
       0,  -369,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  4062,     0,   163,   164,     0,   165,   166,
       0,     0,     0,     0,   169,   170,   171,   172,  4063,     0,
     174,   175,     0,   176,   177,     0,   178,   179,     0,   181,
       0,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,     0,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,     0,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,  4511,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
       0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,  4064,   239,   240,   241,     0,     0,     0,     0,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,   257,     0,     0,
       0,   258,   259,   260,   261,  4065,     0,   262,   263,   264,
       0,   265,     0,   266,     0,     0,     0,     0,   267,     0,
       0,     0,     0,   269,     0,     0,     0,   270,   271,     0,
     272,   273,  4066,     0,     0,   274,     0,     0,     0,   276,
       0,     0,   277,  4067,     0,   278,   279,     0,     0,     0,
       0,     0,   280,   281,     0,   282,     0,   283,     0,   284,
     285,     0,     0,     0,     0,  -324,     0,     0,   286,     0,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
       0,   339,     0,     0,     0,   340,     0,   341,   342,   343,
       0,   344,   345,  4068,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,     0,     0,   364,   365,     0,   366,     0,
     367,   368,   369,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,     0,     0,   376,   377,   378,   379,   380,
       0,     0,   381,   382,   383,   384,   385,     0,   386,     0,
       0,   388,     0,   390,  -324,     0,   391,     0,     0,     0,
     393,     0,     0,   395,   396,   397,  4069,   398,     0,     0,
       0,   400,   401,   402,   403,   404,   405,   406,     0,   408,
     409,     0,   410,     0,     0,     0,     0,   412,   413,   414,
       0,     0,     0,     0,   416,     0,     0,     0,   417,     0,
       0,   419,     0,   421,     0,   422,     0,     0,   425,   426,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,     0,
     436,   437,   438,   439,   440,     0,     0,     0,     0,     0,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,     0,   455,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,     0,     0,     0,     0,   467,   468,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
       0,     0,     0,   478,   479,   480,     0,   481,   482,     0,
     483,   484,     0,     0,     0,     0,     0,   487,     0,     0,
     488,     0,     0,     0,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,     0,     0,   494,     0,     0,     0,
     495,   496,   497,   498,   499,     0,     0,  -324,     0,     0,
       0,   500,     0,     0,   502,     0,   504,     0,   137,   505,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   145,     0,     0,     0,     0,   147,   148,   149,
     150,   151,     0,     0,  -369,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  4062,     0,   163,   164,
       0,   165,   166,     0,     0,     0,     0,   169,   170,   171,
     172,  4063,     0,   174,   175,     0,   176,   177,     0,   178,
     179,     0,   181,     0,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,     0,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,     0,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,     0,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,  4557,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,     0,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,  4064,   239,   240,   241,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,     0,   254,     0,     0,     0,     0,     0,
     257,     0,     0,     0,   258,   259,   260,   261,  4065,     0,
     262,   263,   264,     0,   265,     0,   266,     0,     0,     0,
       0,   267,     0,     0,     0,     0,   269,     0,     0,     0,
     270,   271,     0,   272,   273,  4066,     0,     0,   274,     0,
       0,     0,   276,     0,     0,   277,  4067,     0,   278,   279,
       0,     0,     0,     0,     0,   280,   281,     0,   282,     0,
     283,     0,   284,   285,     0,     0,     0,     0,  -324,     0,
       0,   286,     0,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,     0,   339,     0,     0,     0,   340,     0,
     341,   342,   343,     0,   344,   345,  4068,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,     0,     0,   364,   365,
       0,   366,     0,   367,   368,   369,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,     0,     0,   376,   377,
     378,   379,   380,     0,     0,   381,   382,   383,   384,   385,
       0,   386,     0,     0,   388,     0,   390,  -324,     0,   391,
       0,     0,     0,   393,     0,     0,   395,   396,   397,  4069,
     398,     0,     0,     0,   400,   401,   402,   403,   404,   405,
     406,     0,   408,   409,     0,   410,     0,     0,     0,     0,
     412,   413,   414,     0,     0,     0,     0,   416,     0,     0,
       0,   417,     0,     0,   419,     0,   421,     0,   422,     0,
       0,   425,   426,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,     0,   436,   437,   438,   439,   440,     0,     0,
       0,     0,     0,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,     0,   455,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,   466,     0,     0,     0,
       0,   467,   468,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,     0,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,     0,     0,     0,     0,
     487,     0,     0,   488,     0,     0,     0,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,     0,     0,   494,
       0,     0,     0,   495,   496,   497,   498,   499,     0,     0,
    -324,     0,     0,     0,   500,     0,     0,   502,     0,   504,
       0,   137,   505,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,     0,     0,
     147,   148,   149,   150,   151,     0,     0,  -369,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  4062,
       0,   163,   164,     0,   165,   166,     0,     0,     0,     0,
     169,   170,   171,   172,  4063,     0,   174,   175,     0,   176,
     177,     0,   178,   179,     0,   181,     0,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,     0,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
    -343,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,  4064,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,  4065,     0,   262,   263,   264,     0,   265,     0,   266,
       0,     0,     0,     0,   267,     0,     0,     0,     0,   269,
       0,     0,     0,   270,   271,     0,   272,   273,  4066,     0,
       0,   274,     0,     0,     0,   276,     0,     0,   277,  4067,
       0,   278,   279,     0,     0,     0,     0,     0,   280,   281,
       0,   282,     0,   283,     0,   284,   285,     0,     0,     0,
       0,  -324,     0,     0,   286,     0,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,   340,     0,   341,   342,   343,     0,   344,   345,  4068,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,     0,
       0,   364,   365,     0,   366,     0,   367,   368,   369,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,     0,
       0,   376,   377,   378,   379,   380,     0,     0,   381,   382,
     383,   384,   385,     0,   386,     0,     0,   388,     0,   390,
    -324,     0,   391,     0,     0,     0,   393,     0,     0,   395,
     396,   397,  4069,   398,     0,     0,     0,   400,   401,   402,
     403,   404,   405,   406,     0,   408,   409,     0,   410,     0,
       0,     0,     0,   412,   413,   414,     0,     0,     0,     0,
     416,     0,     0,     0,   417,     0,     0,   419,     0,   421,
       0,   422,     0,     0,   425,   426,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,     0,   436,   437,   438,   439,
     440,     0,     0,     0,     0,     0,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,     0,   455,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
       0,     0,     0,     0,   467,   468,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,     0,     0,     0,   478,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
       0,     0,     0,   487,     0,     0,   488,     0,     0,     0,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
       0,     0,   494,     0,     0,     0,   495,   496,   497,   498,
     499,     0,     0,  -324,     0,     0,     0,   500,     0,     0,
     502,     0,   504,     0,   137,   505,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,     0,     0,   147,   148,   149,   150,   151,     0,     0,
    -369,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  4062,     0,   163,   164,     0,   165,   166,     0,
       0,     0,     0,   169,   170,   171,   172,  4063,     0,   174,
     175,     0,   176,   177,     0,   178,   179,     0,   181,     0,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,     0,   194,     0,     0,     0,   195,     0,     0,
     196,     0,   197,     0,     0,   198,     0,     0,     0,   199,
     200,   201,     0,     0,   202,     0,     0,     0,     0,   203,
       0,     0,     0,     0,     0,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,     0,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,     0,
       0,     0,   232,   233,   234,   235,   236,     0,     0,   237,
     238,  4064,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,     0,     0,
     254,     0,     0,     0,     0,     0,   257,     0,     0,     0,
     258,   259,   260,   261,  4065,     0,   262,   263,   264,     0,
     265,     0,   266,     0,     0,     0,     0,   267,     0,     0,
       0,     0,   269,     0,     0,     0,   270,   271,     0,   272,
     273,  4066,     0,     0,   274,     0,     0,     0,   276,     0,
       0,   277,  4067,     0,   278,   279,     0,     0,     0,     0,
       0,   280,   281,     0,   282,     0,   283,     0,   284,   285,
       0,     0,     0,     0,  -324,     0,     0,   286,     0,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,     0,
     339,     0,     0,     0,   340,     0,   341,   342,   343,     0,
     344,   345,  4068,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,     0,     0,   364,   365,     0,   366,     0,   367,
     368,   369,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,     0,     0,   376,   377,   378,   379,   380,     0,
       0,   381,   382,   383,   384,   385,     0,   386,     0,     0,
     388,     0,   390,  -324,     0,   391,     0,     0,     0,   393,
       0,     0,   395,   396,   397,  4069,   398,     0,     0,     0,
     400,   401,   402,   403,   404,   405,   406,     0,   408,   409,
       0,   410,     0,     0,     0,     0,   412,   413,   414,     0,
       0,     0,     0,   416,     0,     0,     0,   417,     0,     0,
     419,     0,   421,     0,   422,     0,     0,   425,   426,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,     0,   436,
     437,   438,   439,   440,     0,     0,     0,     0,     0,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,     0,   455,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,   466,     0,     0,     0,     0,   467,   468,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
       0,     0,   478,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,     0,     0,     0,   487,     0,     0,   488,
       0,     0,     0,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   495,
     496,   497,   498,   499,     0,     0,  -324,     0,     0,     0,
     500,     0,     0,   502,     0,   504,     0,   137,   505,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,     0,     0,   147,   148,   149,   150,
     151,     0,     0,  -369,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  4062,     0,   163,   164,     0,
     165,   166,     0,     0,     0,     0,   169,   170,   171,   172,
    4063,     0,   174,   175,     0,   176,   177,     0,   178,   179,
       0,   181,     0,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,     0,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,     0,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,     0,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,     0,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,  4064,   239,   240,   241,     0,     0,
       0,     0,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,     0,   254,     0,     0,     0,     0,     0,   257,
       0,     0,     0,   258,   259,   260,   261,  4065,     0,   262,
     263,   264,     0,   265,     0,   266,     0,     0,     0,     0,
     267,     0,     0,     0,     0,   269,     0,     0,     0,   270,
     271,     0,   272,   273,  4066,     0,     0,   274,     0,     0,
       0,   276,     0,     0,   277,  4067,     0,   278,   279,     0,
       0,     0,     0,     0,   280,   281,     0,   282,     0,   283,
       0,   284,   285,     0,     0,     0,     0,  -324,     0,     0,
     286,     0,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,     0,   339,     0,     0,     0,   340,     0,   341,
     342,   343,     0,   344,   345,  4068,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,     0,     0,   364,   365,     0,
     366,     0,   367,   368,   369,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,     0,     0,   376,   377,   378,
     379,   380,     0,     0,   381,   382,   383,   384,   385,     0,
     386,     0,     0,   388,     0,   390,  -324,     0,   391,     0,
       0,     0,   393,     0,     0,   395,   396,   397,  4069,   398,
       0,     0,     0,   400,   401,   402,   403,   404,   405,   406,
       0,   408,   409,     0,   410,     0,     0,     0,     0,   412,
     413,   414,     0,     0,     0,     0,   416,     0,     0,     0,
     417,     0,     0,   419,     0,   421,     0,   422,     0,     0,
     425,   426,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,     0,   436,   437,   438,   439,   440,     0,     0,     0,
       0,     0,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
       0,   455,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,     0,     0,     0,     0,
     467,   468,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,     0,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,     0,     0,     0,   487,
       0,     0,  4406,     0,     0,     0,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   495,   496,   497,   498,   499,     0,     0,  -324,
       0,     0,     0,   500,     0,     0,   502,     0,   504,     0,
     137,   505,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,     0,     0,     0,   147,
     148,   149,   150,   151,     0,     0,     0,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,     0,     0,     0,     0,   169,
     170,   171,   172,     0,     0,   174,   175,     0,   176,   177,
       0,   178,   179,     0,   181,     0,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,     0,   194,
       0,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,     0,     0,     0,     0,
       0,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,     0,     0,     0,   232,   233,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,     0,     0,   254,     0,     0,     0,
       0,     0,   257,     0,     0,     0,   258,   259,   260,   261,
       0,     0,   262,   263,   264,     0,   265,     0,   266,     0,
       0,     0,     0,   267,     0,     0,     0,     0,   269,     0,
       0,     0,   270,   271,     0,   272,   273,     0,     0,     0,
     274,     0,     0,     0,   276,     0,     0,   277,     0,     0,
     278,   279,     0,     0,     0,     0,     0,   280,   281,     0,
     282,     0,   283,     0,   284,   285,     0,     0,     0,     0,
       0,     0,     0,   286,     0,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,     0,   339,     0,     0,     0,
     340,     0,   341,   342,   343,     0,   344,   345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,     0,     0,
     364,   365,     0,   366,     0,   367,   368,   369,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,     0,     0,
     376,   377,   378,   379,   380,     0,     0,   381,   382,   383,
     384,   385,     0,   386,     0,     0,   388,     0,   390,     0,
       0,   391,     0,     0,     0,   393,     0,     0,   395,   396,
     397,     0,   398,     0,     0,     0,   400,   401,   402,   403,
     404,   405,   406,     0,   408,   409,     0,   410,     0,     0,
       0,     0,   412,   413,   414,     0,     0,     0,     0,   416,
       0,     0,     0,   417,     0,     0,   419,     0,   421,     0,
     422,     0,     0,   425,   426,     0,     0,     0,     0,     0,
     427,   428,   429,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,     0,   436,   437,   438,   439,   440,
       0,     0,     0,     0,     0,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,     0,   455,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,   466,     0,
       0,     0,     0,   467,   468,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,     0,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,     0,
       0,     0,   487,     0,     0,   488,     0,     0,     0,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,     0,
       0,   494,     0,     0,     0,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,     0,     0,   502,
       0,   504,     0,     0,   505
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-3942)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       6,   678,   679,   668,   997,   603,   998,   624,   602,   603,
     892,   122,   602,    19,   913,   914,  1913,    23,  1347,  1615,
    1347,    11,  1088,  1748,   923,  1182,    32,    20,  1182,   542,
    1437,  1547,  1869,    39,  1285,   640,    42,    30,  1082,  1083,
      46,  1129,  1334,    36,   738,  2017,  2018,    53,   653,     6,
     958,  1417,  1545,  1915,  1536,  2099,  2626,   927,  1536,  1205,
     930,  2170,  2034,  1285,  2454,  2410,  1212,  3393,  2239,   817,
     940,  2554,  2920,  2244,  2513,  2514,  1119,   698,  1002,  2051,
    2052,  1536,  1152,   932,  2978,   955,   956,   957,    94,   959,
    1340,  1002,  2062,  1526,  2542,  2067,  2062,  1821,  2070,  2071,
     520,  2073,   664,   665,  2076,  2077,  2335,  2744,  2080,   958,
     116,  2066,   118,  2085,  1902,   121,   122,   123,  2090,  2091,
    2092,  2093,  2094,  2045,     4,  2199,  2098,  2472,  2100,  1944,
    1993,    23,  3127,  2627,  2106,  2107,  2108,  2109,   886,  2199,
    2112,   806,  2114,  1213,  1214,  2621,  3625,  1217,  1218,  1219,
    1220,  1516,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,
    2535,   118,  3398,  1596,   121,  1449,  2778,  2373,  2543,  3182,
      34,  2599,    17,   794,   795,   796,  2772,  2068,  3456,  3457,
    2776,  2072,  3460,  1467,  1526,  3265,   807,  1526,  1530,    47,
    1532,  1530,  2083,  1532,  1478,  1479,    22,    20,  2521,    51,
       9,  3479,    94,   978,  2095,    61,  1252,  3485,    16,    17,
    3416,  2183,  2184,  2185,  2186,    10,    20,    16,    17,  2036,
      29,    20,   109,    25,    36,  1911,    35,    74,  2150,  2199,
    2152,  2153,   837,  2199,    60,    61,  2158,  2159,  2125,    20,
      16,    17,    51,    22,    79,  2167,  2168,  3673,  2188,   125,
    2172,  2583,  2584,    21,  1596,    34,  2746,  1596,    17,   129,
      16,    17,   197,   683,   197,   125,   373,   872,    82,    48,
    2874,   364,    72,  2054,    32,    11,   150,    16,    17,   368,
     156,    60,    61,    63,  2775,    78,   217,  4228,  4101,  2008,
     144,   125,   319,  3027,   195,  3621,   156,    87,   379,    52,
     280,  3683,    30,   146,   226,  3121,    22,   391,   268,  2836,
      63,   156,    16,    17,   150,    56,    16,    17,    34,   422,
      85,  2925,   409,   132,   361,    30,   111,   455,    16,    17,
      25,   184,    48,   156,   253,   490,   529,   160,    24,    22,
      16,    17,    16,    17,    60,    61,    16,    17,    16,    17,
     447,    34,   207,  2222,   226,   439,   160,   139,   128,    16,
      17,    36,   342,   131,   853,    48,   555,   269,   555,  3730,
      63,   960,  1594,   125,    12,   250,    69,    60,    61,   160,
    2712,  2713,  2329,  1060,  1061,  1062,   492,   360,   524,   555,
     269,   127,    12,   595,    21,    16,    17,   230,   253,    16,
      17,  2323,   214,   358,   156,    34,   259,    16,    17,    41,
     194,    35,   523,   167,   286,   584,    83,    16,    17,  4232,
     422,    86,   517,   256,  1118,    16,    17,   514,    35,    16,
      17,   233,    61,  3711,   130,  2758,   156,  2760,  1132,   608,
     105,   443,  3720,   197,   599,   230,   555,    16,    17,   651,
     405,    16,    17,   150,  3670,   566,    78,   230,   125,   554,
     244,   191,   255,   650,   437,  3743,  1028,   266,   657,   130,
    3748,   577,    16,    17,   409,   477,   409,   379,    16,    17,
     616,   148,   168,    25,   650,   640,   244,  3966,   681,   390,
     194,   980,   579,   530,    16,    17,  1395,   190,  1490,    40,
     379,   133,   140,    71,   131,   286,   194,   360,    16,    17,
     268,  1410,    71,   315,   163,  3841,   286,   523,   185,   525,
     140,   286,   275,   445,   379,   628,   194,    16,    17,   363,
     658,    20,  4473,   620,   453,    16,    17,  2985,   233,   214,
     383,   547,   324,  1208,   524,   551,   418,   422,    64,   269,
    1916,   658,  3788,    16,    17,   652,   562,    21,   651,   156,
     566,   191,   568,   652,  3047,    16,    17,  2083,   652,  3930,
     378,   652,  1442,   381,  2720,  1445,   237,  2602,   584,   378,
     380,  1451,   381,   124,   621,  2913,  2587,   145,  1101,  1102,
     491,  1285,  1516,   524,  3810,  1216,   602,  3025,  2642,  2468,
     452,  3029,  3030,  2036,   610,  1516,  3422,  2930,  2931,  1122,
    1480,  1481,  1233,   548,   409,   548,   158,  2587,  1131,   360,
     315,  2587,   378,   650,   630,   381,  2548,   417,   482,  2062,
    1143,  1144,  1145,   255,   640,    51,   642,    66,  1151,   378,
    3856,   422,   381,  3879,  2616,   381,  2720,   653,   654,   655,
     430,  1902,  3665,  1502,   660,   469,   662,  2629,   664,   665,
    2720,  4043,  2117,   669,   670,   671,   626,   131,   160,   675,
    3404,  1595,   269,   431,   378,    16,    17,   381,   378,   685,
    1902,   381,   688,   689,  1595,  3175,  2608,   693,  2610,   457,
     378,   233,  3586,   381,  2036,  2617,  1258,  2036,   655,  3303,
    3304,  3305,   378,  1987,   378,   381,  1776,   381,   378,  2631,
     378,   381,  2054,   381,   407,  2054,  2638,  1787,  2605,   514,
    1790,   378,  2609,   834,   381,   160,  4539,  1770,  2650,  2651,
    2652,   194,   738,   620,  2656,   251,  2623,  2624,    16,    17,
    3344,  3345,  3346,   555,  4223,  3981,  2718,   556,  2635,  2566,
    2720,   625,   587,  1799,  2720,  2188,  2678,   378,  3964,   615,
     381,   378,   654,   567,   381,  4191,  2199,   593,   660,   378,
     628,   580,   381,   315,  2714,  1337,  4012,  2664,   587,   378,
     656,  3171,   381,   628,   579,  3865,   650,   378,  2474,   625,
     381,   378,  1354,   799,   381,   801,   656,    16,    17,  3326,
     652,  1406,   913,   650,  2585,  1580,   917,   918,   567,   378,
     680,   656,   381,   378,   593,  2534,   381,  2182,  3150,   361,
     931,   827,   828,   829,   830,   620,   832,   833,   834,   637,
     836,   837,  3444,   656,   378,   628,   842,   381,   637,   567,
     378,  1446,   848,   381,  3440,  3858,  2188,   655,  3054,  2188,
     652,   636,   633,   652,   860,  2742,   378,  2199,  3181,   381,
    2199,   637,   567,  3475,  3476,  4344,   872,   873,  3395,   608,
     378,   877,   829,   381,  2711,   643,   833,   593,  3474,   836,
     555,   637,  4118,    16,    17,   996,  3482,  1476,  2757,   378,
    2837,    74,   381,  3489,   160,   651,   652,   378,   637,   160,
     381,   907,   618,   596,   656,   601,   626,   913,    16,    17,
     593,   917,   918,   652,  4130,   378,   474,  4195,   381,  4197,
    3414,   545,   652,  2416,   548,   931,  1520,   378,   625,  1534,
     381,   614,   615,   637,   650,  3383,   656,   637,   545,  3387,
     601,   548,  3332,    16,    17,    16,    17,  3438,  3439,   637,
    2546,   651,   652,  4169,  3430,  3446,   524,    25,  3449,  3450,
    2857,   637,   584,   637,   652,   524,  3961,   637,   860,   637,
      16,    17,   978,   622,  3402,  3466,   652,   651,   652,   176,
     637,   873,   652,   651,   864,   877,   608,   528,   530,  3480,
     996,   483,   998,   457,  3485,  3486,  3487,  3488,   628,  1693,
    2897,  3026,  3347,    16,    17,  3151,  1426,  3335,  3383,   122,
    4246,   130,  3387,   554,  3015,  2541,   637,    16,    17,   535,
     637,   176,  1028,  1922,   176,    25,  4352,  3631,   637,   626,
     651,   652,   841,   286,   651,   652,   452,   378,   637,  4275,
     381,    43,   651,   652,   585,  3015,   637,    68,   483,  3015,
     637,   253,   651,   652,    16,    17,   392,    11,   156,   656,
     651,   652,   264,   492,   651,   652,  2903,   372,   637,  3392,
      46,   365,   637,  1981,  1080,   308,  4037,  3151,  1084,   621,
     372,    16,    17,   652,  1195,  2601,  2602,   652,    16,    17,
     158,  3151,   650,   637,    16,    17,   654,   325,   628,   637,
     378,    78,   271,   381,  1974,  2013,  2513,  2514,   652,  2972,
     652,   631,  1118,   160,   652,   637,  1986,  1794,   237,  1989,
    1990,  1232,   652,  3949,    16,    17,  1132,    72,   226,   637,
     652,   394,  1981,  2566,   250,  2923,   189,   130,   194,  2954,
      16,    17,   153,   103,   652,   137,  2870,  3784,   637,  3378,
    3105,    16,    17,   164,  2587,   194,   637,   189,  2224,   378,
     152,   127,   381,  3050,  2013,   233,   658,   474,  1789,   422,
     283,   652,   466,   226,   637,  1286,  1182,   713,  2660,   130,
     397,  3151,  2660,  2433,  1604,  3151,   637,  1864,  1080,  1195,
      16,    17,  1084,   285,   226,    16,    17,  1802,   123,  2269,
    2346,   652,   241,    16,    17,  2660,   671,  3044,  1902,  3657,
    3658,    16,    17,   269,  3874,  3106,   347,   483,     6,  2907,
     165,   418,   483,   658,  2566,  4186,  1232,  2566,   411,   468,
      59,  1237,  1343,   233,  1839,   211,  2565,  1243,  2522,   370,
    4066,  4067,  1804,  2585,   237,   378,  2585,   315,   381,   785,
    4098,   364,  1258,  2978,  2583,  2584,   191,   459,  2182,   122,
      16,    17,  4110,   418,  2352,  2353,   418,    16,    17,    57,
     378,  2182,   160,   381,  4066,  4067,   427,   243,   255,  1285,
    1286,  2714,  4176,  1888,  1889,   520,   237,  2720,   474,   474,
      16,    17,   555,   361,   463,  3339,   637,  2454,  4624,  1904,
      16,    17,  2345,   191,    19,   378,   422,   378,   381,  2997,
     381,   652,  2355,    12,   650,   315,  1322,   242,  1324,    34,
    1326,    16,    17,   186,   278,   553,   445,   235,   633,   678,
     679,  1337,   378,    16,    17,   381,   244,  1343,   269,  3261,
     379,   633,   158,   650,    59,   347,  1936,   445,  1354,  1355,
     125,  1243,   444,  3792,  2424,   474,   144,    16,    17,   637,
     588,   361,   545,   122,   139,   378,   377,   832,   381,    16,
      17,   492,  2714,   141,   652,  2714,  3547,  1383,  2720,   378,
     633,  2720,   381,  2712,  2713,  1391,   548,  2544,  4214,  4215,
    2544,  1397,   658,    58,  2887,   578,  3786,   658,    16,    17,
    1406,   422,    16,    17,    16,    17,    16,    17,    16,    17,
    1416,  1417,  1523,  3250,    16,    17,   378,   233,   637,   381,
     283,  1427,  1428,  1429,  1430,  1431,  1432,    16,    17,    16,
      17,  1437,  2180,   652,  1326,   380,   483,  1443,  1444,   590,
    1446,   140,   397,   378,  1450,   141,   381,  1327,   379,    12,
     378,   606,   445,   381,   606,   652,   378,    16,    17,   381,
    2986,  2987,   530,  1355,   650,   650,   112,  1473,  1004,   115,
    1427,  1428,  1429,   586,  1431,     0,   384,   608,   158,   308,
    2637,   474,   601,  2637,   156,  4311,   378,  1444,   194,   381,
     555,   467,   474,  1450,   445,   122,   369,   652,   125,   424,
    4326,   364,   378,   404,   637,   381,    16,    17,    16,    17,
    3026,   176,   127,   378,  4340,   180,   381,  1523,  4178,   652,
    4180,   394,   160,   474,   283,  3412,   191,   204,  1534,   637,
     530,   650,  4015,  1539,   436,   627,  1542,  1543,  1430,   122,
    1432,  1421,   167,   554,   652,   361,    17,  3434,   233,   324,
     474,   108,   378,   621,   607,   381,   474,   378,   656,   186,
     381,   160,    16,    17,   637,   378,   637,   128,   381,   337,
     358,  4397,   197,   378,  1580,   607,   381,   140,  3968,   652,
     651,  1473,  3015,  4409,  4410,   650,  3508,   214,   417,   211,
    3106,   637,   548,   308,  1600,   483,  1602,  1603,   275,  1605,
    1606,  4194,  2501,   186,   644,   364,   652,   532,   601,    16,
      17,   651,  1618,   515,  1620,    16,    17,  4409,  4410,    16,
      17,   621,   378,    51,   637,   381,    16,    17,   243,   378,
    4456,  3802,   381,   421,   256,   423,   207,     8,   637,   652,
    4466,   337,   179,    16,    17,  1602,  1603,  1539,   354,  1529,
     601,  1543,   378,   652,   215,   381,   283,   650,   323,   216,
     158,    64,   378,   492,   595,   381,    16,    17,   650,  4014,
     141,   474,  2923,    60,    61,   637,   361,  4503,  1027,  4505,
     167,   361,   555,   378,   194,    72,   381,  1693,  1694,  4515,
     652,   474,   127,  2759,  1805,   378,    16,    17,   381,   650,
     283,  2923,   637,  2995,    16,    17,  4532,  2853,  4534,   637,
    4536,   474,    16,    17,   530,   637,   651,  4543,  3151,   378,
      16,    17,   381,   586,   652,   286,   650,  4553,  2349,  1078,
     652,   378,   650,  2246,   381,   233,   654,   364,    16,    17,
      25,  4567,  4568,   651,    12,   637,    12,  2260,  1754,    16,
      17,  2908,     8,   418,  2908,    16,    17,  4583,  4584,   651,
     378,   637,  4588,   381,   378,   100,   378,   381,   378,   381,
     378,   381,   637,   381,    30,   651,   378,    16,    17,   381,
    2293,   364,  3891,  3892,    16,    17,   651,   357,   358,   378,
    1796,   378,   381,    78,   381,  3850,  1802,  3279,  1804,  1805,
    3278,  4371,   479,    16,    17,   621,    78,    11,  1919,  3151,
    1816,   637,  3151,   184,   270,  1821,   637,   273,  3311,   378,
    1826,  3150,   381,  3878,   637,   651,   363,   586,   385,   567,
     651,  3746,   637,  1839,  3749,  3672,   652,   394,   651,    16,
      17,    16,    17,   525,   401,   530,   651,   650,   251,  2362,
     530,  1857,  3896,   235,   658,  1861,   108,  4450,  4451,   275,
    2481,  3586,   244,   361,   525,   526,   337,   650,   378,   551,
     378,   381,   140,   381,   140,   643,   644,   645,   646,   647,
     648,   637,  1888,  1889,  1890,  1891,   158,   650,   637,  3804,
      16,    17,   177,   211,   122,   651,  1902,   225,  1904,   234,
      16,    17,   651,   545,   108,  3827,   548,    16,    17,   191,
    1916,   637,  2506,  1919,   560,   167,  2506,   563,   253,   348,
     608,   637,    17,   127,   378,   651,  4237,   381,    17,   264,
    1936,  4242,   360,  4244,   244,   651,   621,   207,   256,   496,
      78,   621,   637,  3256,  1950,   197,   362,  3260,   233,   645,
     646,   647,   648,   356,   637,   265,   651,    78,   186,   586,
    2657,   233,   604,   419,   652,  1857,   293,   294,   651,  1861,
     658,   378,    93,    25,   381,   751,    78,   378,   637,   548,
     381,   378,  1988,   230,   381,   552,    12,   652,   378,    69,
     637,   381,   651,   197,  2000,  1875,   278,   773,  1890,  1891,
    3366,  2007,   384,   586,   651,   378,  1886,   608,   381,   474,
     786,   787,   347,   225,   485,   486,    42,   482,   596,   637,
     158,  2615,   226,   637,   452,   637,    78,   637,   378,   637,
     315,   381,   530,   651,   650,   637,   608,   651,  2920,   651,
     230,   651,   658,   651,   581,   230,   205,   604,   637,   651,
     637,   652,   141,  2961,   482,   283,   644,   658,   378,  2967,
     597,   381,   651,   651,   651,  1945,   378,   207,    94,   381,
     355,   135,    98,   650,   378,   279,   361,   381,   637,   651,
     652,   658,   378,   355,    39,   381,  2197,  3379,   241,   361,
    2201,    46,   651,   373,  2993,   233,  1988,  3185,   545,  2969,
     378,   548,    47,   381,   558,  2111,   158,   434,   435,   651,
     652,   378,  2961,   516,   381,  2007,   191,   378,  2967,  2125,
     381,  3209,  3210,   621,   459,   177,   555,   637,  2239,   637,
     191,   233,   535,  2244,   194,   615,   364,   258,   618,   378,
    4112,  2021,   381,   651,  3232,    31,   378,   612,   613,   381,
    2030,  2031,   613,   312,   313,   286,   428,   409,   317,   318,
     589,  2041,  2042,  2043,  2044,   378,  2046,  2047,   381,   482,
     641,   642,   643,   644,   645,   646,   647,   648,   222,  3336,
     224,   233,  2859,   637,  4156,   650,   656,  4159,  4160,  4161,
    4162,  2197,   651,    78,    80,  2201,   531,  2203,   160,  4357,
    2206,   378,  4360,   378,   381,   409,   381,  2213,  2214,  2215,
    2216,  4073,   658,  2219,   335,   474,   602,   355,  4140,  4141,
    4142,  4143,   248,   361,   651,   652,   111,  2338,   657,  2923,
     637,   634,   375,  2239,  3391,   514,   637,  3391,  2244,   360,
     637,   650,  2509,   190,   651,   530,     6,   637,   337,  2206,
     651,  4148,   378,   355,   651,   381,   445,  2368,   530,   361,
      75,   651,   378,   315,   637,   381,   179,  3424,   154,   378,
    3424,  2151,   381,   158,  2154,  2155,   480,  2157,   651,    11,
    2160,  2161,  2162,  2163,  2164,  2165,  2166,   637,   650,  2169,
     428,  2171,   650,  4265,  4266,   650,   548,   558,   324,   420,
    2905,   651,  4274,   355,   650,  1014,  1015,   629,   630,   361,
     618,   619,  4149,   621,  4236,   623,   650,   637,  4476,   591,
     655,  2213,  2214,  2215,   650,   637,   428,   579,   652,    34,
     652,   651,  2338,   637,   650,  2848,   621,  3034,   171,   651,
    2607,   637,   546,   650,   548,   230,  1055,   651,   650,   621,
     100,   651,   652,   612,   613,   651,    61,  2363,   586,   637,
     650,   387,  2368,  3407,  3408,   658,  2633,  2634,   620,   650,
     637,  3068,   370,   651,  3446,   190,   637,  3449,  3450,  3076,
     652,  2387,   226,  3080,   651,  3792,   650,  2393,  2394,   608,
    2396,   650,   530,   514,  3466,   650,   485,   486,   637,   650,
     604,  3705,  3706,   651,   652,   637,  3494,   112,    12,   650,
     115,   555,   651,   650,  3718,   230,   650,  2423,   123,   651,
      32,  3725,   651,   652,   637,   651,   652,    58,   530,   314,
    3329,  3682,  4269,  1840,   651,   652,  1843,  3134,   651,  1846,
     650,   256,  2553,  2554,   357,   358,  3750,   332,  2454,  3753,
     363,  4176,  2458,   591,   651,   652,   650,  2463,  2464,  2465,
     637,   497,   637,  3620,    16,    17,  3620,   650,  3534,  2475,
     355,  2477,   650,   499,   651,    49,   651,   650,   530,  3730,
      12,   651,   652,   621,   234,   651,   652,   650,   120,   591,
     650,    26,  4215,    60,    61,   651,   652,    75,    20,   650,
    2506,  2393,  2394,   253,  2396,   650,    20,  2513,  2514,   651,
     652,   637,  4028,  4029,   264,  2626,   542,   650,   404,   621,
     650,   637,   650,   100,    29,   651,   651,   652,   637,   141,
      29,   651,   652,   650,    69,   651,   140,    72,  2544,   650,
     426,    76,   651,    78,   650,   176,   650,  2553,  2554,   180,
     650,  4147,   641,   642,   643,   644,   645,   646,   647,   648,
     191,    25,   650,   122,   651,   652,  3558,   651,   652,   621,
     280,  2463,  2464,  2465,   460,    30,   391,   650,   100,   651,
     652,   650,  1094,  1095,  1096,   650,   100,   650,  2594,   221,
     125,   650,   407,  2599,  1106,  2475,   122,   347,  2604,  2605,
     652,   650,  2595,  2609,   650,  2611,   280,  2597,   140,   651,
     652,   215,   190,  2606,    78,  2621,   650,  2623,  2624,  2612,
    2626,  2627,   651,   652,    49,  1137,  2632,   186,  1140,  2635,
     650,  2637,   244,   519,   156,   651,   652,   122,   160,   650,
    2646,   650,   156,  2636,   349,   530,   160,   650,  2641,  1161,
    1162,  2657,   230,  1165,  2647,  2648,   268,   234,  2664,  2665,
     186,   546,   650,   222,   650,   224,   650,   189,   581,   191,
    2676,  1183,  1184,   650,  4397,   650,   253,   191,   256,   651,
     652,   651,   652,   215,   597,   207,   650,   264,   214,   650,
     212,   650,   323,   207,   158,   327,   150,   151,   212,   331,
     650,   186,   651,   652,   226,   468,   338,  3220,   650,   459,
     651,   652,   234,   177,   122,   651,   652,   125,   650,   241,
     234,   256,   651,   652,   283,   337,   650,   241,  4625,   214,
      81,   253,    83,  2613,  2614,  2741,  2742,  3974,  3975,   253,
     650,  2394,   264,  2396,   650,   357,   358,   269,   651,   652,
     264,   651,   652,   650,  2646,   269,   278,   283,   650,  3272,
    2640,   651,   652,   650,   278,   595,   160,   161,   650,   233,
     347,  3365,   293,   294,   125,  3365,   651,   652,   186,   650,
    4503,   531,  4505,   650,   416,   490,   650,   418,   651,   652,
     651,   652,   650,   370,   650,    63,   650,   148,   283,   652,
     141,    69,    69,   645,   198,   364,   214,    75,   658,  4532,
    2463,  2464,  2465,   651,   652,   209,   482,    84,   658,   431,
      63,    89,   357,   358,   166,   347,    69,   650,   363,   407,
    2710,   269,    75,   347,   185,   370,  1169,  1170,   364,  3516,
     472,   108,   651,   652,  4567,  4568,    89,   191,   370,  2741,
     545,   315,   651,   652,   524,   249,   370,   379,   563,    84,
     651,   652,   651,   652,  2870,   379,   260,   166,  2874,   651,
     652,   524,   407,   485,   486,   283,   651,   652,   280,   364,
    2886,   157,   459,   108,   652,  4122,   498,   409,    88,  4126,
     652,   355,   371,   287,   599,   409,   652,   361,  2904,  2905,
     651,   652,  2908,   244,   508,   509,   510,   511,   512,   513,
     651,   652,   541,   434,   435,   651,   652,  2923,   122,  2925,
    3912,   125,   190,   651,   652,   651,  3918,   531,   196,   196,
     651,   652,   156,  2939,   125,  4005,  3047,   459,  4267,  4268,
    4267,  4268,   167,   478,   111,   459,   657,   190,    16,    17,
    3544,  4188,  4189,   196,   531,     6,   364,   351,  3349,  3350,
     482,   650,   230,   230,  3828,  3829,  3601,  3602,   482,   544,
     545,   546,   197,   110,   549,   550,   508,   509,   553,   511,
     555,   513,   186,     4,   505,   506,   507,   230,   256,  4146,
     652,   623,  4146,    34,  2886,   530,   337,    36,   394,   531,
    3838,  3839,   473,   620,   244,   230,   652,   639,   391,   531,
     214,    56,   279,   256,   437,   171,   650,   531,    59,  3025,
     111,   223,   652,  3029,  3030,   652,    67,   586,  3034,   641,
     642,   643,   644,   645,   646,   647,   648,   658,    72,    12,
     625,  3047,   651,   651,  3050,   140,   652,     9,   116,   117,
     118,   119,   120,   658,   279,   651,   651,   651,   658,  2939,
     586,   596,  3068,    26,    27,   268,   530,   650,   658,   158,
    3076,   652,   652,   595,  3080,   657,   115,    49,   429,   283,
     652,   595,   280,   122,   280,   607,   608,   280,   141,   652,
    2970,  2971,   133,  2973,   608,   280,   462,    60,    61,    62,
     280,   586,    36,   280,   626,   160,   628,   408,  3114,    72,
     462,  3117,   626,  1625,   628,    78,  3122,   158,   376,   545,
     370,   162,  3128,   391,    87,   370,  3132,   652,  3134,   651,
     652,   275,   652,   655,   656,   392,   652,   651,   652,   407,
     179,   655,   656,  3149,   485,   486,   567,   186,   111,   652,
     218,   219,   220,   221,   567,   391,  3162,   621,   199,    12,
     364,   652,   125,  3169,   407,   160,   129,  3844,  3048,   370,
     652,  3128,    72,   370,  3180,   214,   217,  3057,   586,   404,
     546,   115,   652,  1695,   409,   244,   552,  1699,   122,   645,
     231,   244,   181,   247,  4351,   158,   543,  4351,   191,   652,
     600,   495,   122,   395,  4196,   125,   136,   174,   370,   652,
     651,  1723,   652,   480,   160,   160,  4098,   568,   569,   570,
     571,   572,   573,   574,   575,  3117,   602,   160,  4110,   160,
     652,   160,   500,   500,   160,   160,   160,   160,   604,   280,
     632,  3352,   160,   160,   283,   179,   160,  3532,  3533,   160,
     160,   160,   186,   160,   620,   480,   160,   500,   160,   327,
    3266,   329,   330,   331,   839,  3859,   186,   230,  3274,   160,
     338,   160,   160,   160,  3154,   238,   160,  3169,   122,   546,
     214,   548,   160,   607,   337,   552,   370,   370,   370,   197,
     652,   194,   255,  3299,   214,   651,  3302,  3303,  3304,  3305,
     641,   642,   643,   644,   645,   646,   647,   648,   651,   348,
     378,  3317,   651,   381,   651,   651,   645,   651,   651,   141,
     359,   546,   194,   651,   363,   364,   100,   552,   596,   596,
    3336,  3337,   652,   644,  3340,   650,   652,   604,  3344,  3345,
    3346,   651,   186,   651,   651,   651,  3352,   651,   416,   283,
     652,   314,  3358,   596,   579,   651,  4426,  4256,   651,  3365,
    3366,   651,    55,   283,   595,   483,   650,   408,   650,   332,
     214,   648,    65,   651,   555,   650,   417,   555,   652,   604,
     555,   545,   586,   232,    77,  3391,    13,   650,   626,   141,
     650,   432,   537,  3678,  3274,   620,  3402,    90,    91,    92,
      11,   650,   658,   471,   472,   652,  3412,   266,  3414,   450,
     652,  4009,   658,   106,   348,   650,   141,   650,  3424,   658,
     652,   658,   194,   386,  3430,   651,  3432,   417,  3434,   363,
     364,   394,   485,   486,   604,   194,  3547,   652,   482,   283,
    4597,   652,   191,  4597,   364,  4437,  4438,    47,  4440,  4519,
      78,   345,   493,   514,  4611,   473,   514,  4611,   514,  4616,
     234,    75,  4616,   391,  4621,    93,   514,  4621,   514,   391,
     567,   136,    99,   394,   254,  4092,    26,    27,   391,   253,
     546,   254,   546,   524,   136,   391,   391,    47,   440,   650,
     264,   650,   391,   391,  3374,  4487,   393,  4489,  4490,   391,
    3506,   464,   651,   130,   545,   391,   134,   548,   549,   279,
      60,    61,    62,    12,    13,   337,   555,   144,   559,   555,
     364,   560,    72,   650,   563,  3531,  3532,  3533,    78,  3640,
     608,   651,   658,   154,   651,   240,   542,    87,   240,   658,
     167,  3547,   581,   170,   651,   651,   651,   586,   651,   651,
     589,   651,   651,  4230,   652,   623,   183,   160,   521,   522,
     523,   111,   652,  4228,   605,   571,  4164,   530,   567,   637,
     638,   639,  4564,   347,   555,   125,   652,   275,   205,   129,
      47,   633,   160,   546,   567,   337,  4579,   550,   641,   642,
     643,   644,   645,   646,   647,   648,   370,   160,  3883,  3884,
      99,  3886,  3887,   230,   643,   644,   205,   650,   158,  3615,
     237,   194,   337,   650,  3620,   650,  3727,   650,   241,  3499,
     194,   555,   422,   555,   250,  3631,   560,   652,   555,   563,
     258,   130,   595,   326,  3640,   364,   160,   160,   652,   160,
     394,   479,  3522,   253,   253,   144,   382,   581,   328,   111,
     343,   278,   586,   111,   174,   589,   658,   375,   256,   503,
     256,   207,   650,   485,   486,   650,   586,    20,   167,   455,
     555,   170,  3678,   650,   567,   391,   658,   645,   242,   650,
     230,  3687,   651,   242,   183,   459,   650,   652,   238,   652,
    3696,  3802,   698,   650,   652,   651,  3689,   703,   651,   658,
     651,   650,   567,   651,   651,   255,   205,   335,   651,   643,
     644,   651,   567,   567,   658,   650,   658,   370,   268,   226,
    4619,  3727,   270,   391,   194,   376,   194,   601,   734,   357,
     358,   230,   360,   485,   486,   651,   244,   652,   237,   658,
     652,   194,   586,   422,   750,   160,   126,   253,  3754,   253,
    3861,   370,   628,   256,   650,  3761,   651,   531,   256,  4353,
     485,   486,   652,   405,   314,   370,    26,    27,   651,  3649,
     651,   650,   652,  3779,    78,   652,   651,   470,   370,   278,
      20,   652,   332,   410,   651,   370,  3792,   650,   794,   795,
     796,   797,   420,   370,   652,  3687,  3802,   497,   474,   651,
     650,   807,    62,   430,   650,   650,   379,   364,  4473,   651,
      47,   438,   476,   628,  4311,   651,   651,   266,    78,   446,
     642,   643,   644,   645,   646,   647,   648,    87,   457,  4326,
     278,    11,   422,   160,   645,   147,   386,   262,   651,   651,
     533,   207,   652,  4340,   394,   194,   484,   474,   253,  3729,
     160,   111,   396,   253,   652,  3861,   650,   184,   551,   125,
     487,   488,   125,   548,   403,   125,   650,   650,  3874,   129,
     658,   198,    82,   143,   492,   651,   469,  3883,  3884,    20,
    3886,  3887,   209,  4481,   497,   651,   514,   652,  3768,   641,
     642,   643,   644,   645,   646,   647,   648,   269,   158,    34,
     651,   651,    34,   651,  4015,   651,   651,   651,  4573,   651,
     651,   410,   651,   540,   464,   414,   651,   334,   643,   644,
     645,   646,   647,   648,   258,   417,   652,   651,   175,   205,
     278,   430,   259,   260,  4599,   241,   650,   652,   651,   438,
      47,   658,   652,   212,   334,  4622,   160,   446,   608,   608,
     651,   650,   579,  3959,  3960,   650,   650,   311,   650,  4456,
     287,   650,   650,   618,   618,  3971,   650,   601,   125,  4466,
     230,   521,   522,   523,   601,   474,   603,   256,   238,   256,
     530,   363,    34,   364,  3864,   651,   364,   650,   487,   488,
     652,   334,   173,   651,   256,   255,   546,   376,  4004,   548,
     550,  4007,   650,   628,   612,   241,   608,   608,   370,  4015,
     455,   628,    55,   359,   364,   652,   613,   518,  4515,   651,
     651,   628,    65,   555,   555,   555,   601,   354,  1034,    84,
     652,   536,   155,    31,    77,   650,   625,  4534,   650,  4536,
    4046,   540,   191,   659,   650,   595,  4543,    90,    91,    92,
     389,   376,   136,   136,   314,   557,  4553,  4063,   158,    74,
     651,   191,  4068,   106,   651,   651,   650,   409,  3960,   430,
     625,    31,   332,   194,    63,   651,   376,    63,   650,   406,
     579,   652,   651,   537,  1090,  1091,  4583,  4584,    14,   271,
       5,  4588,   370,  1099,  1100,  1101,  1102,  1103,  1104,  1105,
     650,   241,   601,   370,   603,   154,   134,  1113,  1114,   656,
    1116,  1117,  4004,   143,   650,  1121,  1122,   376,   376,  1125,
    1126,  1127,  1128,    47,  1130,  1131,   386,    47,   153,    47,
      34,    47,  1138,  1139,   394,  1141,  1142,  1143,  1144,  1145,
    4146,    47,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,
    1156,  1157,  1158,   650,  1160,    59,   650,  1163,  1164,  4270,
     601,   130,  1168,    67,   625,   225,  1172,  1173,  1174,   154,
     285,   656,  4178,   659,  4180,   124,   149,   650,    47,  1185,
    1186,  1187,    47,    47,   558,    12,    13,    53,  1194,   143,
     656,   465,  4198,   652,   364,  1201,  1202,  1203,   463,  1205,
     651,  4207,   154,   558,   464,   652,  1212,  1213,  1214,   210,
    1216,  1217,  1218,  1219,  1220,   652,  1222,  1223,  1224,  1225,
    1226,  1227,  1228,  1229,   656,   651,   223,  1233,  1234,   133,
     651,  4111,  2154,  2155,   652,  2157,    53,   154,  2160,  2161,
    2162,  2163,  2164,  2165,  2166,   191,   191,  2169,   191,  2171,
      47,   558,   444,   125,   158,  4261,   627,   650,   162,   226,
    4371,   521,   522,   523,  4270,   364,   193,   482,   652,   571,
     530,  2173,    99,  3509,  2375,   679,  3508,  2582,  3777,  4103,
    4231,  4416,  3775,   326,  1011,  4417,   546,  3958,  3779,  4599,
     550,  4561,    46,   604,  1901,   199,  1826,  2870,  3949,  3949,
     343,  3949,  3949,   130,  3949,  3949,  3949,  3949,  3949,  4569,
    3949,  4453,  4304,   217,  4453,  3949,  4410,   144,  3949,  4330,
    4329,  4432,  1053,  3949,  1532,  2899,  2124,   231,  3074,  1536,
    3967,  3614,  3317,  1340,  4261,   595,  2904,  4355,  3617,  4005,
     167,  4519,  4434,   170,  4481,  4351,  4164,  1595,   533,  3525,
    2117,  2742,  3434,  3155,  2125,  3412,   183,  3457,  2667,  3910,
    3457,  3490,  3688,  3737,  4353,  4371,  3727,  2553,  2826,  3260,
    3257,  3252,  4185,   538,     6,   537,   280,    11,   205,    11,
      11,    13,  4188,    15,  4264,  1391,  4189,  1609,  4114,  4126,
    4122,  2211,  3971,  3918,    26,    27,   607,  2124,  1404,  1487,
    2660,   703,  1483,   230,  3693,  3413,  2449,  1590,  1543,  1890,
     237,   454,  2886,  3312,  2416,  2466,  1422,   625,  1910,  2331,
     904,  3274,  2859,  2245,  1132,    57,  4432,   470,  3381,  2330,
      62,    63,   734,  2545,  4183,  4031,  4448,  3506,    70,  4449,
    2356,  3424,  4448,  4449,  3875,  1106,    78,  3861,   750,  4550,
    2471,   278,  4458,  1502,  1244,    87,   997,  2216,  1326,  4465,
     997,  2453,  3620,  2411,    96,  3331,  3330,  4351,   997,   614,
    3391,   997,  1618,  1355,   694,  1982,   603,  1464,  3315,   111,
    1435,  1983,  4362,  4363,  1815,  3432,   227,  4517,  4378,  1362,
     533,  4546,  4444,   125,  4616,   797,  4607,   129,  4621,  3730,
    1594,  3336,  1939,  2504,   408,   137,   138,  3365,   551,   602,
    1751,   602,   144,   417,  2497,  2496,  2490,  1905,  1378,   889,
     152,  1391,  1848,  1861,   156,  4138,   158,  4533,   432,  1600,
    3299,   596,  4538,  4144,   891,   529,   529,   169,  4093,  3763,
     679,   679,   679,    -1,    -1,    -1,   450,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   189,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  4573,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   410,    -1,    -1,    -1,   414,    -1,   493,
      -1,  4597,    -1,  4599,    -1,    -1,   228,    -1,   230,    -1,
      -1,  4607,    -1,   430,    -1,  4611,   238,    -1,    -1,    -1,
    4616,   438,    -1,    -1,    -1,  4621,    -1,    -1,    -1,   446,
     524,    -1,    -1,   255,    -1,  1631,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   549,   278,   474,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,    -1,    -1,
     487,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   434,   435,    -1,    -1,    -1,    -1,    -1,
     332,   605,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1729,  1730,  1731,    -1,    -1,    -1,    -1,
      -1,    -1,  1034,    -1,    -1,    -1,    -1,    -1,  1744,    -1,
      -1,    -1,   374,    -1,    -1,    -1,    -1,   379,    -1,    -1,
      -1,    -1,   579,    -1,   386,    -1,    -1,    -1,    -1,   391,
      -1,    -1,   394,    -1,  1770,    -1,    -1,    -1,    -1,    -1,
    1776,    -1,    -1,  1779,   601,  1781,   603,    -1,    -1,    -1,
      -1,  1787,    -1,  1789,  1790,    -1,    -1,    -1,  1090,  1091,
      -1,    -1,    -1,   425,    -1,    -1,    -1,  1099,  1100,    -1,
      -1,  1103,  1104,  1105,    -1,    -1,    -1,   439,   440,   441,
     442,  1113,  1114,    -1,  1116,  1117,    -1,    -1,    -1,  1121,
      -1,    -1,    -1,  1125,  1126,  1127,  1128,    -1,  1130,    -1,
      -1,    -1,   464,    -1,    -1,    -1,  1138,  1139,    -1,  1141,
    1142,    -1,    -1,    -1,    -1,    -1,  1148,  1149,  1150,    -1,
      -1,  1153,  1154,  1155,  1156,  1157,  1158,    -1,  1160,    -1,
      -1,  1163,  1164,    -1,    -1,    -1,  1168,    -1,  1874,    -1,
    1172,  1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,  1885,
      -1,    -1,    -1,  1185,  1186,  1187,    -1,    -1,    -1,   521,
     522,   523,  1194,    -1,    -1,    -1,    -1,    -1,   530,  1201,
    1202,  1203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1917,    -1,    -1,   546,    -1,     6,    -1,   550,    -1,
      -1,    11,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1937,  1234,    13,    -1,    15,    26,    27,  1944,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   595,    -1,    -1,    -1,    57,    -1,    49,
      50,    -1,    62,    -1,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   111,    -1,    -1,   656,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
      -1,   121,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
     130,   131,   132,    -1,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   143,   144,    -1,    -1,    -1,   158,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1391,
     170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,  1404,    -1,    -1,    -1,    -1,    -1,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1422,    -1,    -1,   203,    -1,   205,    -1,    -1,    -1,    -1,
     210,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,
     230,    -1,  2148,    -1,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,   239,
      -1,    -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,   274,    -1,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2225,
      -1,    -1,    -1,  2229,   314,    -1,    -1,    -1,  2234,  2235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2243,    -1,    -1,
    2246,    -1,   332,    -1,    -1,    -1,   336,    -1,    -1,    -1,
    2256,  2257,    -1,  2259,  2260,    -1,  2262,  2263,  2264,  2265,
    2266,    -1,    -1,  2269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2278,    -1,    -1,    -1,    -1,    -1,    -1,  2285,
      -1,  2287,    -1,  2289,  2290,    -1,  2292,  2293,    -1,   379,
      -1,  2297,  2298,  2299,   374,    -1,   386,  2303,  2304,  2305,
      -1,  2307,    -1,  2309,   394,  2311,    -1,  2313,    -1,  2315,
      -1,   391,    26,    27,  2320,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,  1631,
      -1,    -1,    -1,  2339,    -1,   415,    -1,    -1,    -1,    -1,
    2346,    -1,    -1,  2349,    -1,    -1,    60,    61,    62,  2355,
     440,    -1,  2358,    -1,    -1,    -1,  2362,   437,    72,    -1,
     440,    -1,   442,    -1,    78,   445,    -1,    -1,   448,   449,
      -1,    -1,    -1,    87,   464,    -1,    -1,    -1,   458,    -1,
     460,    -1,    -1,   116,   117,   118,   119,   120,   468,    -1,
      -1,    -1,    -1,    -1,   474,    -1,    -1,   111,    -1,    -1,
      -1,    -1,   482,    -1,    -1,    -1,    -1,   487,    -1,   489,
      -1,   125,    -1,    -1,    -1,   129,    -1,    -1,  2424,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1729,  1730,  1731,
      -1,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,   519,
     530,    -1,    -1,    -1,   158,    -1,    -1,    -1,    -1,   529,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,    -1,
     550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1770,    -1,
      -1,    -1,    -1,    -1,    -1,  2481,    -1,  1779,    -1,  1781,
      -1,    -1,    -1,    -1,    -1,   218,   219,   220,   221,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,    -1,    -1,   595,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,   230,    -1,   598,    -1,
      -1,   601,    -1,    -1,   238,    -1,    -1,   607,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   635,    -1,    -1,    -1,  2565,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     650,    -1,  1874,    -1,    -1,    -1,    -1,  2583,  2584,    -1,
      -1,    -1,    -1,  1885,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   327,    -1,   329,   330,   331,    -1,
     314,    -1,    -1,    -1,    -1,   338,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1917,    -1,    -1,   332,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1937,    -1,    -1,    -1,    -1,
      -1,    -1,  1944,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,    -1,    35,   416,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,  2712,  2713,    -1,    62,
      63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,   472,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     464,    -1,    -1,    -1,    -1,    -1,    -1,  2763,    -1,    -1,
      -1,  2767,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,  2787,  2788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2808,    -1,    -1,    -1,    -1,   521,   522,   523,
      -1,  2817,    -1,  2819,    -1,  2821,   530,   170,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   188,   550,    -1,    -1,    -1,
      -1,    -1,  2848,    -1,    -1,    -1,  2148,  2853,    -1,    -1,
     203,    -1,   205,    -1,    -1,    -1,    -1,   210,    -1,    -1,
     213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2882,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   237,    -1,   239,    -1,    -1,    -1,
     623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   257,   638,   639,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,    -1,  2225,    -1,   278,    -1,  2229,    -1,    -1,
      -1,    -1,  2234,  2235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2243,    -1,    -1,    -1,    -1,    -1,    -1,  2954,    -1,
      -1,    -1,    -1,    -1,  2256,  2257,    -1,  2259,    -1,    -1,
    2262,  2263,  2264,  2265,  2266,    -1,    -1,    -1,    -1,    -1,
    2976,    -1,    -1,    -1,    -1,    -1,  2278,    -1,    -1,    -1,
      -1,    -1,    -1,  2285,    -1,  2287,    -1,  2289,  2290,    -1,
    2292,    -1,    -1,    -1,  3000,  2297,  2298,  2299,    -1,    -1,
      -1,  2303,  2304,  2305,    -1,  2307,    -1,  2309,    -1,  2311,
      -1,  2313,    -1,  2315,    -1,    -1,    -1,    -1,  2320,    -1,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2339,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   404,    -1,  2355,    -1,    -1,  2358,    -1,    -1,    -1,
      -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   437,    -1,    -1,   440,    -1,   442,
      -1,    -1,   445,    -1,    -1,   448,   449,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   458,    -1,   460,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   468,    -1,    -1,    -1,  3125,
    3126,   474,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,
      -1,    -1,    -1,    -1,   487,    -1,   489,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,   519,    39,    -1,    41,
      -1,    43,    44,    -1,    -1,    -1,   529,    -1,    -1,    -1,
      -1,    -1,  3188,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3213,    -1,    -1,
      -1,  3217,  3218,    -1,  3220,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3229,    -1,    -1,    -1,    -1,  3234,   582,
      -1,  3237,    -1,  3239,  3240,    -1,    -1,    -1,    -1,    -1,
     112,   594,    -1,   115,    -1,   598,    -1,    -1,   601,    -1,
      -1,   123,    -1,    -1,   607,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3272,    -1,    -1,    -1,
     142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   635,    -1,    -1,    -1,    -1,   159,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,
    3306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,    -1,   187,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3330,    -1,    -1,    -1,   200,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3393,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3401,    -1,    -1,    -1,    -1,
     272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2763,    -1,    -1,    -1,  2767,    -1,   339,   340,   341,
      -1,    -1,    -1,    -1,   346,    -1,    -1,   349,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2787,  2788,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2808,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,  2817,    -1,  2819,    -1,  2821,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,   400,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    -1,    99,    -1,    -1,    -1,    -1,
    2882,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,    -1,    -1,    -1,  3621,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   157,   158,    -1,    -1,    -1,    -1,   163,
      -1,    -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2954,    -1,    -1,  3661,  3662,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3670,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,   197,  2976,    -1,    -1,    -1,    -1,    -1,
     204,    -1,   206,    -1,   556,    -1,    -1,    -1,   560,    -1,
      -1,   563,   564,   565,   566,    -1,    -1,    -1,  3000,    -1,
      -1,    -1,    -1,    -1,    -1,   229,   230,   231,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   639,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3810,    -1,    -1,    -1,  3814,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3125,  3126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3841,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   373,
    3856,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   408,   409,  3188,    -1,   412,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,
      -1,  3213,    -1,    -1,    -1,  3217,  3218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3229,    -1,    -1,
      -1,    -1,  3234,    -1,    -1,  3237,    -1,  3239,  3240,    -1,
      -1,    -1,    -1,  3949,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4005,
     524,    -1,    -1,    -1,  3306,    -1,   530,  4013,    -1,    -1,
      -1,    -1,    -1,    -1,  4020,    -1,  4022,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   548,   549,    -1,    -1,  3330,    -1,
      -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4060,    -1,    -1,    -1,    -1,    -1,
    4066,  4067,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3393,   616,    -1,    -1,    -1,    -1,    -1,   622,  3401,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4200,    -1,  4202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4212,    -1,  4214,  4215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4241,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4309,    -1,  4311,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3621,
    4326,  4327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4340,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4352,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3661,
    3662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3670,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4396,  4397,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4409,  4410,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4456,    -1,    -1,    -1,    -1,    -1,    -1,  4463,    -1,    -1,
    4466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4496,    -1,    -1,    -1,    -1,    -1,    -1,  4503,    -1,  4505,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3810,  4515,
      -1,    -1,  3814,  4519,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4532,    -1,  4534,    -1,
    4536,    -1,    -1,    -1,    -1,    -1,    -1,  4543,    -1,  3841,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4553,    -1,    -1,
      -1,    -1,    -1,    -1,  3856,    -1,    -1,    -1,    -1,    -1,
      -1,  4567,  4568,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4583,  4584,    -1,
      -1,    -1,  4588,    -1,    -1,    -1,    -1,    -1,  4594,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4624,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4013,    -1,    -1,    -1,    -1,    -1,    -1,  4020,    -1,
    4022,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4060,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4169,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4200,    -1,
    4202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4309,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4327,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,  4396,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    45,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,  4463,    -1,   101,   102,   103,   104,    -1,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,  4496,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,   183,   184,   185,   186,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,    -1,   210,   211,    -1,   213,   214,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,  4594,   231,    -1,   233,    -1,    -1,    -1,   237,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,  4624,   261,   262,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,    -1,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,   555,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,   609,   610,   611,   612,   613,    -1,    -1,   616,   617,
      -1,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,   643,   644,    -1,    -1,    -1,
      -1,   649,   650,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,    -1,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,    -1,   210,   211,    -1,   213,
     214,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,   237,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
     264,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,    -1,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,   609,   610,   611,   612,   613,
      -1,    -1,   616,   617,    -1,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,   643,
     644,    -1,    -1,    -1,    -1,   649,   650,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,    -1,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,   183,   184,   185,   186,    -1,   188,    -1,
      -1,    -1,   192,   193,   194,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,   208,    -1,
     210,   211,    -1,   213,   214,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,   237,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,    -1,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,   555,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,   609,
     610,   611,   612,   613,    -1,    -1,   616,   617,    -1,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,   643,   644,    -1,    -1,    -1,    -1,   649,
     650,    -1,    -1,   653,   654,    -1,    -1,   657,   658,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,    -1,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
     186,    -1,   188,    -1,    -1,    -1,   192,   193,   194,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,    -1,   210,   211,    -1,   213,   214,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,    -1,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,   555,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,   609,   610,   611,   612,   613,    -1,    -1,
     616,   617,    -1,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,   643,   644,    -1,
      -1,    -1,    -1,   649,   650,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,    -1,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
     192,   193,   194,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,   208,    -1,   210,   211,
      -1,   213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,    -1,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,   555,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,   609,   610,   611,
     612,   613,    -1,    -1,   616,   617,    -1,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,   643,   644,    -1,    -1,    -1,    -1,   649,   650,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,    -1,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,   183,   184,   185,   186,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,    -1,   210,   211,    -1,   213,   214,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,   237,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,    -1,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,   555,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,   609,   610,   611,   612,   613,    -1,    -1,   616,   617,
      -1,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,   643,   644,    -1,    -1,    -1,
      -1,   649,   650,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,    -1,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,    -1,   210,   211,    -1,   213,
     214,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,   237,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
     264,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,    -1,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,   609,   610,   611,   612,   613,
      -1,    -1,   616,   617,    -1,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,   643,
     644,    -1,    -1,    -1,    -1,   649,   650,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,    -1,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,   183,   184,   185,   186,    -1,   188,    -1,
      -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,   208,    -1,
     210,   211,    -1,   213,   214,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,   237,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,    -1,    -1,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,   555,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,   609,
     610,   611,   612,   613,    -1,    -1,   616,   617,    -1,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,   643,   644,    -1,    -1,    -1,    -1,   649,
     650,    -1,    -1,   653,   654,    -1,    -1,   657,   658,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,    -1,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
     186,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,    -1,   210,   211,    -1,   213,   214,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,    -1,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,   555,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,   609,   610,   611,   612,   613,    -1,    -1,
     616,   617,    -1,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,   643,   644,    -1,
      -1,    -1,    -1,   649,   650,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,    -1,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,   208,    -1,   210,   211,
      -1,   213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,    -1,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,   555,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,   609,   610,   611,
     612,   613,    -1,    -1,   616,   617,    -1,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,   643,   644,    -1,    -1,    -1,    -1,   649,   650,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,    -1,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,   181,    -1,   183,   184,   185,   186,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,    -1,   210,   211,    -1,   213,   214,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,   237,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,    -1,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
     388,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,   555,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,   609,   610,   611,   612,   613,    -1,    -1,   616,   617,
      -1,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,   643,   644,    -1,    -1,    -1,
      -1,   649,   650,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,    -1,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,    -1,   210,   211,    -1,   213,
     214,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,   237,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
     264,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,   348,   349,   350,    -1,    -1,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,   609,   610,   611,   612,   613,
      -1,    -1,   616,   617,    -1,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,   643,
     644,    -1,    -1,    -1,    -1,   649,   650,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,    -1,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,   183,   184,   185,   186,    -1,   188,    -1,
      -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,   208,    -1,
     210,   211,    -1,   213,   214,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,   237,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
     350,    -1,    -1,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,   388,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,   555,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,   609,
     610,   611,   612,   613,    -1,    -1,   616,   617,    -1,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,   643,   644,    -1,    -1,    -1,    -1,   649,
     650,    -1,    -1,   653,   654,    -1,    -1,   657,   658,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,    -1,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
     186,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,    -1,   210,   211,    -1,   213,   214,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,   348,   349,   350,    -1,    -1,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,    -1,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,   388,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,   555,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,   609,   610,   611,   612,   613,    -1,    -1,
     616,   617,    -1,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,   643,   644,    -1,
      -1,    -1,    -1,   649,   650,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,    -1,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,   208,    -1,   210,   211,
      -1,   213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,   348,   349,   350,    -1,
      -1,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
      -1,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,   388,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,   555,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,   609,   610,   611,
     612,   613,    -1,    -1,   616,   617,    -1,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,   643,   644,    -1,    -1,    -1,    -1,   649,   650,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    36,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,    -1,   183,   184,   185,   186,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,   214,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
     348,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,   555,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,   657,
     658,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,   196,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,   230,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,   268,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,   500,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,    -1,   639,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,   658,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
     196,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,   230,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,   500,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,   658,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,    -1,   639,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
     651,    -1,    18,    19,    -1,    -1,    22,   658,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,   651,     7,     8,     9,    10,
      11,   657,   658,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,    -1,   639,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,   650,
      -1,    -1,    18,    19,    -1,    -1,    22,   658,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,   241,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,   658,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,    -1,   639,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,   650,
      -1,    -1,    18,    19,    -1,    -1,    22,   658,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,   645,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,   658,    18,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,
      -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,
     195,    -1,   197,    -1,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
     255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,
     325,   326,   327,   328,    -1,    -1,   331,   332,    -1,   334,
      -1,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,
     355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,
     365,    -1,   367,   368,   369,    -1,   371,   372,   373,    -1,
     375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,   386,   387,    -1,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
     455,    -1,   457,    -1,    -1,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,   472,   473,    -1,
      -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,
      -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
     505,   506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,
     515,    -1,    -1,   518,   519,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,
     535,   536,   537,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,    -1,   549,   550,   551,   552,   553,    -1,
      -1,   556,   557,    -1,   559,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,    -1,   639,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,   657,   658,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
     658,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
     103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,
     213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,
     323,   324,   325,   326,   327,   328,    -1,    -1,   331,   332,
      -1,   334,    -1,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,
      -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,   455,    -1,   457,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,
      -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
     553,    -1,    -1,   556,   557,    -1,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,
      -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,    -1,   639,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,   658,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
     658,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
     103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,
     213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,
     323,   324,   325,   326,   327,   328,    -1,    -1,   331,   332,
      -1,   334,    -1,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,
      -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,   455,    -1,   457,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,
      -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
     553,    -1,    -1,   556,   557,    -1,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,
      -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,    -1,   639,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,   658,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,   657,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,
      -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,
      -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,    -1,   334,    -1,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
      -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,   361,
      -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,   555,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,   657,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,   555,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,   657,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,
      -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,
     210,   211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,
     360,   361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,    -1,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,   657,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,
      -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,    -1,
     334,    -1,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,
     354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,
      -1,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,    -1,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,   657,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,   657,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,
      -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,
      -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,    -1,   334,    -1,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
      -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,   361,
      -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,    -1,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,   657,    -1,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    -1,
      87,    88,    -1,    90,    91,    92,    -1,    94,    -1,    -1,
      -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,    -1,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,    -1,    -1,    -1,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,   184,   185,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,    -1,
     197,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,
     217,    -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,    -1,   250,   251,   252,    -1,    -1,   255,    -1,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,
     327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,   356,
      -1,    -1,    -1,    -1,   361,    -1,    -1,    -1,   365,    -1,
     367,   368,   369,    -1,   371,   372,   373,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,
     387,    -1,    -1,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,    -1,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,    -1,    -1,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,   450,    -1,    -1,   453,   454,   455,   456,
     457,    -1,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,   472,    -1,    -1,    -1,    -1,
     477,   478,   479,    -1,    -1,    -1,    -1,   484,    -1,    -1,
      -1,   488,    -1,    -1,   491,    -1,   493,    -1,   495,    -1,
      -1,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,
     507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,
      -1,   518,    -1,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,    -1,   530,    -1,   532,   533,   534,   535,   536,
     537,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,   556,
     557,    -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,    -1,    -1,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
     597,    -1,    -1,   600,    -1,    -1,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,
     627,    -1,    -1,    -1,   631,    -1,    -1,   634,    -1,   636,
      -1,    -1,   639,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,   652,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,
      -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,
      -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,    -1,   334,    -1,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
      -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,   361,
      -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,    -1,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,   645,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,    98,
      -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,
      -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
      -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,   328,
      -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,
      -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,   368,
     369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,   455,    -1,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,
     479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,
      -1,   490,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,
     509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
     529,   530,    -1,   532,   533,   534,   535,   536,   537,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,    -1,
     549,   550,   551,   552,   553,    -1,    -1,   556,   557,    -1,
     559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,
     569,   570,   571,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,
      -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,   645,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,   645,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
     103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,
     213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,
     323,   324,   325,   326,   327,   328,    -1,    -1,   331,   332,
      -1,   334,    -1,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,
      -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,   455,    -1,   457,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,
      -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
     553,    -1,    -1,   556,   557,    -1,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,
      -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,   645,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,
      -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,    -1,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,   186,    -1,   188,    -1,
      -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,
     210,   211,    -1,   213,   214,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,    -1,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,    -1,    -1,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,    -1,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    60,    -1,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    -1,    90,    91,    92,    93,    94,    -1,    -1,
      -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,
     197,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,
      -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,
     327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,   356,
      -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,
     367,   368,   369,    -1,   371,   372,   373,    -1,   375,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,
     387,    -1,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,   455,    -1,
     457,    -1,    -1,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,
     477,   478,   479,   480,    -1,    -1,   483,   484,    -1,    -1,
      -1,   488,    -1,   490,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,
     507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,
      -1,   518,   519,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,   529,   530,    -1,   532,   533,   534,   535,   536,
     537,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,    -1,   549,   550,   551,   552,   553,    -1,   555,   556,
     557,    -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,
     597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,
      -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,    -1,
     334,    -1,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,
     354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,
      -1,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,    -1,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,   283,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,   364,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,   555,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,   104,
      -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,
     195,    -1,   197,    -1,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
     255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,
     325,   326,   327,   328,    -1,    -1,   331,   332,    -1,   334,
      -1,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,
     355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,
     365,    -1,   367,   368,   369,    -1,   371,   372,   373,    -1,
     375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,   386,   387,    -1,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
     455,    -1,   457,    -1,    -1,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,   472,   473,    -1,
      -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,
      -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
     505,   506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,
     515,    -1,    -1,   518,   519,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,
     535,   536,   537,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,    -1,   549,   550,   551,   552,   553,    -1,
     555,   556,   557,    -1,   559,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      12,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,
      -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,
      -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,    -1,   334,    -1,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
      -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,   361,
      -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,   555,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,    98,
      -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,
      -1,   210,   211,    -1,   213,   214,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
      -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,   328,
      -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,
      -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,   368,
     369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,   455,    -1,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,
     479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,
      -1,   490,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,
     509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
     529,   530,    -1,   532,   533,   534,   535,   536,   537,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,    -1,
     549,   550,   551,   552,   553,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,
     569,   570,   571,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,
      -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,   555,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
     103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,
     213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,
     323,   324,   325,   326,   327,   328,    -1,    -1,   331,   332,
      -1,   334,    -1,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,
      -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,   455,    -1,   457,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,
      -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
     553,    -1,   555,   556,   557,    -1,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,
      -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,
      -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,
     210,   211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,
     360,   361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,   555,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    20,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    60,    -1,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    -1,    90,    91,    92,    93,    94,    -1,    -1,
      -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,
     127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,
     197,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,
      -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,
     327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,   356,
      -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,
     367,   368,   369,    -1,   371,   372,   373,    -1,   375,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,
     387,    -1,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,   455,    -1,
     457,    -1,    -1,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,
     477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,
      -1,   488,    -1,   490,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,
     507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,
      -1,   518,   519,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,   529,   530,    -1,   532,   533,   534,   535,   536,
     537,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,    -1,   549,   550,   551,   552,   553,    -1,   555,   556,
     557,    -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,
     597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    95,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,
      -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,    -1,
     334,    -1,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,
     354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,
      -1,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,    -1,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,    -1,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,    -1,
      -1,    -1,   503,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,   194,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,
      -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,
     195,    -1,   197,    -1,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
     255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,
     325,   326,   327,   328,    -1,    -1,   331,   332,    -1,   334,
      -1,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,
     355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,
     365,    -1,   367,   368,   369,    -1,   371,   372,   373,    -1,
     375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,   386,   387,    -1,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
     455,    -1,   457,    -1,    -1,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,    -1,   472,   473,    -1,
      -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,
      -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
     505,   506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,
     515,    -1,    -1,   518,   519,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,
     535,   536,   537,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,    -1,   549,   550,   551,   552,   553,    -1,
      -1,   556,   557,    -1,   559,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,
      -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,
      -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,    -1,   334,    -1,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
      -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,   361,
      -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,    -1,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,    98,
      -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,   126,   127,    -1,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,
      -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
      -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,   328,
      -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,
      -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,   368,
     369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,   455,    -1,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,
     479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,
      -1,   490,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,
     509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
     529,   530,    -1,   532,   533,   534,   535,   536,   537,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,    -1,
     549,   550,   551,   552,   553,    -1,    -1,   556,   557,    -1,
     559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,
     569,   570,   571,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,
      -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,   455,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,    -1,    -1,
      -1,   477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,   490,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
     103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
     193,    -1,   195,    -1,   197,    -1,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,
     213,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,
     323,   324,   325,   326,   327,   328,    -1,    -1,   331,   332,
      -1,   334,    -1,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,
      -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,   455,    -1,   457,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,    -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,
      -1,   484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
     553,    -1,    -1,   556,   557,    -1,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,
     583,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,
      -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,
      -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,
     210,   211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,
     360,   361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,
     480,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
     490,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,    -1,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    60,    -1,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    -1,    90,    91,    92,    93,    94,    -1,    -1,
      -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,
     127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,
     197,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,    -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,
      -1,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,
     327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,   356,
      -1,    -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,
     367,   368,   369,    -1,   371,   372,   373,    -1,   375,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,
     387,    -1,   389,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,   455,    -1,
     457,    -1,    -1,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,
     477,   478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,
      -1,   488,    -1,   490,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,
     507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,
      -1,   518,   519,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,   529,   530,    -1,   532,   533,   534,   535,   536,
     537,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,   556,
     557,    -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,
     597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,
      -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,    -1,    -1,   210,   211,    -1,   213,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,    -1,
     334,    -1,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,
     354,   355,   356,    -1,    -1,    -1,   360,   361,    -1,    -1,
      -1,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,   386,   387,    -1,   389,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,   455,    -1,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
      -1,    -1,    -1,   477,   478,   479,   480,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,   490,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,   529,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,   210,
     211,    -1,   213,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,   360,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,   455,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,    -1,    -1,    -1,   477,   478,   479,   480,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,   490,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,   210,   211,    -1,   213,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,   360,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,   455,    -1,   457,
      -1,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,    -1,    -1,    -1,   477,
     478,   479,   480,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,   490,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,   529,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    90,    91,    92,    -1,    94,
      -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,
      -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,   146,   147,   148,    -1,   150,   151,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,    -1,    -1,    -1,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,   184,
     185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,    -1,   197,    -1,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,
      -1,    -1,   217,    -1,    -1,    -1,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,    -1,   250,   251,   252,    -1,    -1,
     255,    -1,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,
     325,   326,   327,   328,    -1,    -1,   331,   332,    -1,   334,
      -1,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,
     355,   356,    -1,    -1,    -1,    -1,   361,    -1,    -1,    -1,
     365,    -1,   367,   368,   369,    -1,   371,   372,   373,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   386,   387,    -1,    -1,   390,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,    -1,    -1,   441,    -1,   443,   444,
      -1,   446,    -1,    -1,    -1,   450,    -1,    -1,   453,   454,
     455,   456,   457,    -1,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,   472,    -1,    -1,
      -1,    -1,   477,   478,   479,    -1,    -1,    -1,    -1,   484,
      -1,    -1,    -1,   488,    -1,    -1,   491,    -1,   493,    -1,
     495,    -1,    -1,   498,   499,    -1,    -1,    -1,    -1,    -1,
     505,   506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,
     515,    -1,    -1,   518,    -1,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,    -1,   530,    -1,   532,   533,   534,
     535,   536,   537,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,    -1,   549,   550,   551,   552,   553,    -1,
      -1,   556,   557,    -1,   559,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
      -1,    -1,   627,    -1,    -1,    -1,   631,    -1,    -1,   634,
      -1,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    59,    -1,    -1,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    -1,    87,    88,    -1,    90,    91,
      92,    -1,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,
      -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,    -1,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,   146,   147,   148,    -1,   150,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,    -1,    -1,
      -1,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,   184,   185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,    -1,   197,    -1,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,    -1,    -1,    -1,   211,
      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,
     252,    -1,    -1,   255,    -1,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,
      -1,   323,   324,   325,   326,   327,   328,    -1,    -1,   331,
     332,    -1,   334,    -1,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,    -1,    -1,   349,   350,    -1,
      -1,   353,   354,   355,   356,    -1,    -1,    -1,    -1,   361,
      -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   386,   387,    -1,    -1,   390,    -1,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,    -1,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,    -1,    -1,   441,
      -1,   443,   444,    -1,   446,    -1,    -1,    -1,   450,    -1,
      -1,   453,   454,   455,   456,   457,    -1,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
     472,    -1,    -1,    -1,    -1,   477,   478,   479,    -1,    -1,
      -1,    -1,   484,    -1,    -1,    -1,   488,    -1,    -1,   491,
      -1,   493,    -1,   495,    -1,    -1,   498,   499,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,
     512,    -1,    -1,   515,    -1,    -1,   518,    -1,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,    -1,   530,    -1,
     532,   533,   534,   535,   536,   537,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,    -1,   549,   550,   551,
     552,   553,    -1,    -1,   556,   557,    -1,   559,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,
     572,   573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,
      -1,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,   600,    -1,
      -1,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,    -1,   627,    -1,    -1,    -1,   631,
      -1,    -1,   634,    -1,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    -1,    87,    88,
      -1,    90,    91,    92,    -1,    94,    -1,    -1,    -1,    98,
      -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,   126,   127,    -1,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,
      -1,   150,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,    -1,    -1,    -1,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,   184,   185,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,    -1,   197,    -1,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,
      -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,   217,    -1,
      -1,    -1,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,   251,   252,    -1,    -1,   255,    -1,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
      -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,   328,
      -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,    -1,    -1,
     349,   350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,
      -1,    -1,   361,    -1,    -1,    -1,   365,    -1,   367,   368,
     369,    -1,   371,   372,   373,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,   387,    -1,
      -1,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,    -1,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
      -1,    -1,   441,    -1,   443,   444,    -1,   446,    -1,    -1,
      -1,   450,    -1,    -1,   453,   454,   455,   456,   457,    -1,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,   472,    -1,    -1,    -1,    -1,   477,   478,
     479,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,
      -1,    -1,   491,    -1,   493,    -1,   495,    -1,    -1,   498,
     499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,
     509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,
      -1,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
      -1,   530,    -1,   532,   533,   534,   535,   536,   537,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,    -1,
     549,   550,   551,   552,   553,    -1,    -1,   556,   557,    -1,
     559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,
     569,   570,   571,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,
      -1,   600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,    -1,   627,    -1,
      -1,    -1,   631,    -1,    -1,   634,    -1,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      -1,    87,    88,    -1,    90,    91,    92,    -1,    94,    -1,
      -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,
     106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,   184,   185,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
      -1,   197,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,
      -1,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,    -1,   250,   251,   252,    -1,    -1,   255,
      -1,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,
     326,   327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,
     356,    -1,    -1,    -1,    -1,   361,    -1,    -1,    -1,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     386,   387,    -1,    -1,   390,    -1,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,    -1,    -1,   441,    -1,   443,   444,    -1,
     446,    -1,    -1,    -1,   450,    -1,    -1,   453,   454,   455,
     456,   457,    -1,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,   472,    -1,    -1,    -1,
      -1,   477,   478,   479,    -1,    -1,    -1,    -1,   484,    -1,
      -1,    -1,   488,    -1,    -1,   491,    -1,   493,    -1,   495,
      -1,    -1,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,
      -1,    -1,   518,    -1,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,    -1,   530,    -1,   532,   533,   534,   535,
     536,   537,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,
     556,   557,    -1,   559,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,   572,   573,   574,   575,
      -1,   577,   578,    -1,    -1,    -1,    -1,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,
      -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,
      -1,   627,    -1,    -1,    -1,   631,    -1,    -1,   634,    -1,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    59,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    -1,    87,    88,    -1,    90,    91,    92,
      -1,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
     103,    -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,    -1,    -1,    -1,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,   184,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,    -1,   197,    -1,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,    -1,    -1,    -1,   211,    -1,
      -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,   221,   222,
     223,   224,   225,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,    -1,   250,   251,   252,
      -1,    -1,   255,    -1,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,
     323,   324,   325,   326,   327,   328,    -1,    -1,   331,   332,
      -1,   334,    -1,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,
     353,   354,   355,   356,    -1,    -1,    -1,    -1,   361,    -1,
      -1,    -1,   365,    -1,   367,   368,   369,    -1,   371,   372,
     373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   386,   387,    -1,    -1,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
      -1,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,    -1,    -1,   441,    -1,
     443,   444,    -1,   446,    -1,    -1,    -1,   450,    -1,    -1,
     453,   454,   455,   456,   457,    -1,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,   472,
      -1,    -1,    -1,    -1,   477,   478,   479,    -1,    -1,    -1,
      -1,   484,    -1,    -1,    -1,   488,    -1,    -1,   491,    -1,
     493,    -1,   495,    -1,    -1,   498,   499,    -1,    -1,    -1,
      -1,    -1,   505,   506,   507,    -1,   509,   510,    -1,   512,
      -1,    -1,   515,    -1,    -1,   518,    -1,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,    -1,   530,    -1,   532,
     533,   534,   535,   536,   537,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,    -1,   549,   550,   551,   552,
     553,    -1,    -1,   556,   557,    -1,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,    -1,    -1,
     583,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,   597,    -1,    -1,   600,    -1,    -1,
      -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,
     623,   624,    -1,    -1,   627,    -1,    -1,    -1,   631,    -1,
      -1,   634,    -1,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    59,
      -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    -1,    87,    88,    -1,
      90,    91,    92,    -1,    94,    -1,    -1,    -1,    98,    -1,
      -1,   101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,    -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
      -1,    -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,   184,   185,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,    -1,   197,    -1,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,
      -1,   211,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,
      -1,   221,   222,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,
     250,   251,   252,    -1,    -1,   255,    -1,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,    -1,
      -1,    -1,    -1,   323,   324,   325,   326,   327,   328,    -1,
      -1,   331,   332,    -1,   334,    -1,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,    -1,    -1,   349,
     350,    -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,
      -1,   361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   386,   387,    -1,    -1,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,    -1,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,    -1,
      -1,   441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,
     450,    -1,    -1,   453,   454,   455,   456,   457,    -1,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,   472,    -1,    -1,    -1,    -1,   477,   478,   479,
      -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,
      -1,   491,    -1,   493,    -1,   495,    -1,    -1,   498,   499,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,
     510,    -1,   512,    -1,    -1,   515,    -1,    -1,   518,    -1,
     520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,    -1,
     530,    -1,   532,   533,   534,   535,   536,   537,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,    -1,   549,
     550,   551,   552,   553,    -1,    -1,   556,   557,    -1,   559,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,
     570,   571,   572,   573,   574,   575,    -1,   577,   578,    -1,
      -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,
     600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,    -1,    -1,   627,    -1,    -1,
      -1,   631,    -1,    -1,   634,    -1,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    59,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    -1,
      87,    88,    -1,    90,    91,    92,    -1,    94,    -1,    -1,
      -1,    98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,    -1,    -1,    -1,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,   184,   185,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,    -1,
     197,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,
     217,    -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,    -1,   250,   251,   252,    -1,    -1,   255,    -1,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,
     327,   328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
      -1,    -1,   349,   350,    -1,    -1,   353,   354,   355,   356,
      -1,    -1,    -1,    -1,   361,    -1,    -1,    -1,   365,    -1,
     367,   368,   369,    -1,   371,   372,   373,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,
     387,    -1,    -1,   390,    -1,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,    -1,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,    -1,    -1,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,   450,    -1,    -1,   453,   454,   455,   456,
     457,    -1,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,   472,    -1,    -1,    -1,    -1,
     477,   478,   479,    -1,    -1,    -1,    -1,   484,    -1,    -1,
      -1,   488,    -1,    -1,   491,    -1,   493,    -1,   495,    -1,
      -1,   498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,
     507,    -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,
      -1,   518,    -1,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,    -1,   530,    -1,   532,   533,   534,   535,   536,
     537,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,    -1,   549,   550,   551,   552,   553,    -1,    -1,   556,
     557,    -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,   568,   569,   570,   571,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,    -1,    -1,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
     597,    -1,    -1,   600,    -1,    -1,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,
     627,    -1,    -1,    -1,   631,    -1,    -1,   634,    -1,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    55,    56,    -1,    58,    59,    -1,    -1,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    -1,    87,    88,    -1,    90,    91,    92,    -1,
      94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,
      -1,    -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
      -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,    -1,    -1,    -1,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
     184,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,    -1,   197,    -1,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,    -1,    -1,    -1,   211,    -1,    -1,
      -1,    -1,    -1,   217,    -1,    -1,    -1,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,   251,   252,    -1,
      -1,   255,    -1,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,
     324,   325,   326,   327,   328,    -1,    -1,   331,   332,    -1,
     334,    -1,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,
     354,   355,   356,    -1,    -1,    -1,    -1,   361,    -1,    -1,
      -1,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   386,   387,    -1,    -1,   390,    -1,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,    -1,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,    -1,    -1,   441,    -1,   443,
     444,    -1,   446,    -1,    -1,    -1,   450,    -1,    -1,   453,
     454,   455,   456,   457,    -1,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,   472,    -1,
      -1,    -1,    -1,   477,   478,   479,    -1,    -1,    -1,    -1,
     484,    -1,    -1,    -1,   488,    -1,    -1,   491,    -1,   493,
      -1,   495,    -1,    -1,   498,   499,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,   509,   510,    -1,   512,    -1,
      -1,   515,    -1,    -1,   518,    -1,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,    -1,   530,    -1,   532,   533,
     534,   535,   536,   537,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,    -1,   549,   550,   551,   552,   553,
      -1,    -1,   556,   557,    -1,   559,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,    -1,    -1,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,
      -1,    -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,    -1,    -1,   627,    -1,    -1,    -1,   631,    -1,    -1,
     634,    -1,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    59,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    -1,    87,    88,    -1,    90,
      91,    92,    -1,    94,    -1,    -1,    -1,    98,    -1,    -1,
     101,    -1,   103,    -1,    -1,   106,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,    -1,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,    -1,
      -1,    -1,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,   184,   185,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,    -1,   197,    -1,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,    -1,    -1,    -1,
     211,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
     221,   222,   223,   224,   225,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,    -1,   250,
     251,   252,    -1,    -1,   255,    -1,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,    -1,    -1,
      -1,    -1,   323,   324,   325,   326,   327,   328,    -1,    -1,
     331,   332,    -1,   334,    -1,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,    -1,    -1,   349,   350,
      -1,    -1,   353,   354,   355,   356,    -1,    -1,    -1,    -1,
     361,    -1,    -1,    -1,   365,    -1,   367,   368,   369,    -1,
     371,   372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   386,   387,    -1,    -1,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,    -1,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,    -1,    -1,
     441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,   450,
      -1,    -1,   453,   454,   455,   456,   457,    -1,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,   472,    -1,    -1,    -1,    -1,   477,   478,   479,    -1,
      -1,    -1,    -1,   484,    -1,    -1,    -1,   488,    -1,    -1,
     491,    -1,   493,    -1,   495,    -1,    -1,   498,   499,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,   509,   510,
      -1,   512,    -1,    -1,   515,    -1,    -1,   518,    -1,   520,
     521,   522,   523,   524,    -1,    -1,    -1,    -1,    -1,   530,
      -1,   532,   533,   534,   535,   536,   537,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,    -1,   549,   550,
     551,   552,   553,    -1,    -1,   556,   557,    -1,   559,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
      -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,   600,
      -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,    -1,    -1,   627,    -1,    -1,    -1,
     631,    -1,    -1,   634,    -1,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    -1,    87,
      88,    -1,    90,    91,    92,    -1,    94,    -1,    -1,    -1,
      98,    -1,    -1,   101,    -1,   103,    -1,    -1,   106,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,    -1,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,    -1,    -1,    -1,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,   184,   185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,    -1,   197,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
      -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,    -1,   250,   251,   252,    -1,    -1,   255,    -1,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,    -1,    -1,    -1,    -1,   323,   324,   325,   326,   327,
     328,    -1,    -1,   331,   332,    -1,   334,    -1,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
      -1,   349,   350,    -1,    -1,   353,   354,   355,   356,    -1,
      -1,    -1,    -1,   361,    -1,    -1,    -1,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,   387,
      -1,    -1,   390,    -1,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,    -1,    -1,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,    -1,    -1,   441,    -1,   443,   444,    -1,   446,    -1,
      -1,    -1,   450,    -1,    -1,   453,   454,   455,   456,   457,
      -1,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,   472,    -1,    -1,    -1,    -1,   477,
     478,   479,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,
     488,    -1,    -1,   491,    -1,   493,    -1,   495,    -1,    -1,
     498,   499,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
      -1,   509,   510,    -1,   512,    -1,    -1,   515,    -1,    -1,
     518,    -1,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      -1,    -1,   530,    -1,   532,   533,   534,   535,   536,   537,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
      -1,   549,   550,   551,   552,   553,    -1,    -1,   556,   557,
      -1,   559,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,   572,   573,   574,   575,    -1,   577,
     578,    -1,    -1,    -1,    -1,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,   597,
      -1,    -1,   600,    -1,    -1,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,    -1,    -1,   627,
      -1,    -1,    -1,   631,    -1,    -1,   634,    -1,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    -1,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    -1,    87,    88,    -1,    90,    91,    92,    -1,    94,
      -1,    -1,    -1,    98,    -1,    -1,   101,    -1,   103,    -1,
      -1,   106,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,    -1,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,    -1,    -1,    -1,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,    -1,   197,    -1,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,
      -1,    -1,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
     255,    -1,    -1,    -1,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,    -1,    -1,    -1,    -1,   323,   324,
     325,   326,   327,   328,    -1,    -1,   331,   332,    -1,   334,
      -1,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,    -1,    -1,   349,   350,    -1,    -1,   353,   354,
     355,   356,    -1,    -1,    -1,    -1,   361,    -1,    -1,    -1,
     365,    -1,   367,   368,   369,    -1,   371,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   386,   387,    -1,    -1,   390,    -1,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,    -1,    -1,   441,    -1,   443,    -1,
      -1,   446,    -1,    -1,    -1,   450,    -1,    -1,   453,   454,
     455,    -1,   457,    -1,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,   472,    -1,    -1,
      -1,    -1,   477,   478,   479,    -1,    -1,    -1,    -1,   484,
      -1,    -1,    -1,   488,    -1,    -1,   491,    -1,   493,    -1,
     495,    -1,    -1,   498,   499,    -1,    -1,    -1,    -1,    -1,
     505,   506,   507,    -1,   509,   510,    -1,   512,    -1,    -1,
     515,    -1,    -1,   518,    -1,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,    -1,   530,    -1,   532,   533,   534,
     535,   536,   537,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,    -1,   549,   550,   551,   552,   553,    -1,
      -1,   556,   557,    -1,   559,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,   568,   569,   570,   571,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,    -1,    -1,   634,
      -1,   636,    -1,    -1,   639
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      80,    99,   121,   130,   131,   132,   143,   144,   156,   170,
     188,   203,   205,   210,   213,   237,   239,   257,   274,   278,
     374,   391,   404,   415,   437,   440,   442,   445,   448,   449,
     458,   460,   468,   474,   482,   487,   489,   519,   529,   582,
     594,   598,   601,   607,   635,   650,   661,   664,   665,   666,
     667,   668,   670,   675,   677,   684,   718,   745,   752,   753,
     872,  1042,  1084,  1086,  1100,  1103,  1108,  1110,  1111,  1116,
    1119,  1124,  1131,  1143,  1144,  1302,  1304,  1319,  1322,  1347,
    1355,  1366,  1373,  1387,  1391,  1394,  1404,  1410,  1415,  1417,
    1418,  1470,  1500,  1507,  1509,  1516,  1519,  1546,  1552,  1553,
    1554,  1555,  1612,  1620,  1621,    11,   108,   127,   197,   226,
     279,   409,   480,   546,   604,  1080,  1577,  1578,  1579,  1582,
     275,   362,  1118,  1547,   555,  1461,   230,     5,     7,     8,
       9,    10,    11,    14,    18,    19,    22,    24,    25,    26,
      27,    28,    29,    31,    35,    39,    42,    43,    44,    46,
      48,    49,    52,    55,    56,    58,    59,    60,    62,    64,
      65,    66,    67,    68,    70,    71,    73,    74,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    87,    88,
      90,    91,    92,    93,    94,    98,   101,   103,   106,   110,
     111,   112,   115,   120,   121,   126,   127,   129,   133,   135,
     136,   137,   138,   139,   143,   146,   147,   148,   152,   154,
     155,   157,   158,   159,   162,   163,   165,   166,   167,   168,
     169,   170,   173,   174,   175,   176,   177,   180,   181,   183,
     184,   185,   188,   192,   193,   195,   197,   199,   200,   201,
     202,   204,   206,   210,   211,   213,   216,   217,   221,   222,
     223,   224,   227,   228,   229,   231,   233,   238,   239,   243,
     247,   248,   250,   251,   255,   258,   259,   262,   265,   266,
     272,   273,   275,   277,   279,   280,   288,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   308,   309,   310,   312,   313,   314,
     315,   317,   318,   323,   324,   325,   326,   327,   328,   331,
     332,   334,   336,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   349,   350,   353,   354,   355,   356,   360,   361,
     365,   367,   368,   369,   371,   372,   373,   375,   385,   386,
     387,   389,   390,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   404,   405,   406,   408,   410,   411,   412,
     413,   414,   416,   417,   418,   421,   425,   426,   427,   428,
     429,   432,   433,   434,   435,   436,   438,   439,   441,   442,
     443,   446,   448,   450,   451,   453,   454,   455,   457,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     472,   473,   477,   478,   479,   480,   484,   488,   490,   491,
     492,   493,   495,   496,   497,   498,   499,   505,   506,   507,
     509,   510,   512,   515,   518,   519,   520,   521,   522,   523,
     524,   529,   530,   532,   533,   534,   535,   536,   537,   540,
     541,   542,   543,   545,   546,   549,   550,   551,   552,   553,
     556,   557,   559,   560,   561,   562,   563,   568,   569,   570,
     571,   572,   573,   574,   575,   577,   578,   582,   583,   584,
     585,   587,   588,   590,   591,   593,   594,   597,   600,   602,
     604,   605,   606,   613,   616,   620,   621,   622,   623,   624,
     631,   632,   634,   635,   636,   639,   712,  1459,  1464,  1468,
    1469,   308,   545,   548,  1503,  1503,   631,  1548,    69,    84,
     108,   196,   279,   480,   500,   546,   552,   596,   604,   693,
     695,   924,   925,   926,  1016,  1017,  1018,  1019,  1020,  1021,
    1022,  1356,  1303,    84,   108,   167,   197,   230,   279,   409,
     480,   546,   552,   579,   604,   620,  1315,  1464,  1118,   103,
     754,   711,   658,  1456,  1458,  1464,   676,  1320,   397,    87,
     417,  1416,   111,   230,   636,  1423,    35,   545,  1501,  1503,
    1118,   873,  1464,  1411,   468,   604,  1503,  1118,  1323,  1405,
     503,   742,   746,   747,  1464,   711,  1548,  1464,  1147,  1149,
    1150,   520,  1471,  1374,   746,   492,   577,   492,   548,  1368,
     397,    35,  1503,  1508,  1348,  1464,    31,    80,   154,   404,
     426,   460,   519,  1614,   474,   650,  1145,     0,   156,   662,
     404,   176,   192,   392,  1392,  1456,  1464,   160,  1054,  1464,
     160,   712,   207,   712,   267,  1461,  1464,  1466,   820,   821,
     824,   847,  1464,   711,   548,   167,  1048,  1577,  1503,  1548,
    1125,   719,   658,   567,  1101,  1112,    17,  1549,   225,   927,
     927,   207,  1466,   822,   847,   711,   381,  1574,  1578,  1579,
    1580,  1581,  1582,   548,   925,   230,  1020,  1019,   230,   230,
     226,   286,   418,  1364,  1365,     7,    22,    28,    34,    36,
      37,    38,    40,    53,    54,    60,    61,    70,    73,    93,
      96,    97,   102,   104,   107,   108,   113,   114,   115,   120,
     122,   125,   171,   178,   179,   186,   192,   200,   202,   208,
     214,   221,   225,   237,   240,   264,   272,   283,   311,   316,
     327,   331,   333,   337,   338,   339,   340,   341,   348,   357,
     358,   359,   363,   364,   369,   388,   394,   399,   400,   402,
     416,   444,   445,   457,   459,   465,   466,   472,   527,   528,
     534,   538,   539,   544,   555,   560,   561,   562,   563,   580,
     581,   582,   586,   589,   604,   609,   610,   611,   612,   617,
     619,   623,   624,   639,   643,   644,   649,   650,   653,   654,
     657,   658,   977,  1164,  1165,  1166,  1167,  1171,  1174,  1175,
    1176,  1177,  1178,  1179,  1187,  1191,  1203,  1442,  1444,  1446,
    1447,  1448,  1452,  1454,  1459,  1464,   225,  1314,  1314,  1314,
    1314,  1464,   207,  1314,  1314,   847,  1314,   711,  1314,  1503,
     671,  1395,   135,  1520,  1464,   373,    68,   422,   658,  1466,
     128,   215,   286,  1325,  1464,  1164,   241,  1419,   191,   191,
    1502,  1503,    47,   874,   194,    19,    34,    59,   308,  1379,
    1412,  1464,   711,  1120,  1503,   128,   286,  1326,  1354,    59,
     308,   417,   492,  1406,  1407,   613,   743,   482,   748,  1517,
     567,  1549,  1148,    12,   140,   215,   508,   509,   510,   511,
     512,   513,   531,  1154,  1155,  1156,  1573,  1472,    60,    61,
     125,   204,   275,   344,   394,   479,   577,   657,   979,  1464,
    1474,  1486,  1490,  1492,    35,    60,    67,    73,    97,    99,
     109,   158,   163,   166,   195,   197,   204,   206,   229,   230,
     231,   254,   275,   308,   373,   398,   408,   409,   412,   413,
     433,   479,   492,   530,   548,   549,   559,   605,   622,   979,
    1015,  1375,  1379,  1380,  1382,  1487,   748,   436,   515,  1095,
    1096,  1097,   422,   628,  1087,  1088,  1089,  1095,  1367,  1464,
    1354,    36,   214,   555,  1443,  1462,  1613,  1613,  1613,  1613,
    1613,  1149,  1145,   651,   656,  1464,   160,  1389,  1388,   325,
     553,   588,  1044,   602,   104,  1466,  1467,  1046,   826,   848,
    1464,  1045,   375,     6,    57,   144,   358,   421,   423,   849,
    1050,  1467,  1456,   712,   514,  1583,  1584,  1047,  1109,  1126,
    1127,  1128,  1129,  1456,   650,   720,  1464,   678,  1309,  1310,
    1456,  1309,    56,   360,   360,   437,  1550,   357,   358,  1170,
    1464,  1464,   825,   848,   190,     6,  1467,  1536,  1537,   445,
      10,   409,   579,   698,  1160,  1576,  1584,  1596,  1600,  1601,
    1607,   698,  1160,  1575,  1584,  1596,  1601,  1607,  1577,  1582,
     927,  1464,  1464,  1464,   194,  1357,  1361,  1362,  1464,  1364,
     650,   650,   650,  1174,   650,   650,   650,  1164,  1206,   650,
     650,   650,   650,   650,   650,   650,   650,   650,  1163,  1163,
     650,   965,   650,   650,   650,   555,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,  1164,
     650,   650,   650,  1204,  1205,  1452,  1464,   650,   650,   650,
     650,   650,   650,   650,   650,   650,  1164,   965,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   965,   555,   650,   650,
     650,   555,   650,   650,   650,    36,   214,   555,   650,  1163,
     965,   965,   650,   650,   650,   650,   650,   650,  1174,  1174,
    1174,  1164,  1568,  1569,  1464,  1192,  1464,    16,    17,   378,
     381,   637,  1168,  1169,   160,   161,   198,   209,   249,   260,
     287,   351,  1172,    32,   141,   244,   268,   337,   431,   485,
     486,   498,   641,   642,   643,   644,   645,   646,   647,   648,
    1170,  1174,    72,   380,   652,  1462,   650,   658,   171,  1464,
    1464,   712,  1464,   370,   848,   712,  1466,   361,   621,   858,
     859,  1316,  1317,  1318,  1380,   712,  1467,  1535,  1308,  1314,
     608,   672,    34,    59,    67,   133,   158,   162,   199,   217,
     231,   280,   408,   417,   432,   450,   493,   524,   549,   559,
     605,  1396,  1401,  1402,  1503,    86,   657,   755,   756,   757,
     758,  1464,    12,    13,    99,   130,   144,   167,   170,   183,
     205,   230,   237,   278,   410,   414,   430,   438,   446,   474,
     487,   488,   540,   579,   601,   603,  1521,  1523,  1525,  1526,
      20,   160,  1258,  1259,  1510,  1464,  1080,   497,    49,    85,
     286,  1425,    29,    29,  1456,  1504,  1505,  1117,   270,   273,
     419,   875,   877,   657,   669,  1461,   280,    30,   280,  1121,
    1467,  1122,  1123,  1456,  1104,   241,  1311,  1327,  1328,  1456,
      49,  1408,   652,  1462,    55,    65,    77,    90,    91,    92,
     106,   326,   343,   470,   533,   551,   749,   751,    12,   414,
    1518,  1523,   468,  1551,  1550,   595,  1556,  1557,   645,  1158,
    1159,  1160,  1156,  1473,  1489,  1492,   482,   658,    34,   125,
     160,   483,   980,   981,  1338,  1466,   191,  1338,  1476,   657,
    1466,    34,   125,   983,   984,  1466,   658,  1477,  1475,  1338,
     166,   268,   626,  1386,  1386,   650,   108,   167,   197,   409,
     548,   579,   620,  1386,    12,   936,  1466,   269,  1277,  1279,
     194,   244,  1381,  1383,    71,   524,   191,  1386,   524,   545,
      71,   524,    12,    42,    94,    98,   248,   324,   387,   499,
     542,  1369,  1370,  1371,   166,   217,   524,   524,  1386,  1386,
    1386,  1277,  1386,  1383,   280,   157,    74,   411,   545,   578,
     524,   616,  1085,   652,   372,   633,    88,   652,  1310,  1080,
     652,   371,  1616,   541,  1617,   253,   453,  1615,   651,  1557,
    1559,  1561,  1562,   156,   663,  1466,  1143,  1319,  1322,  1347,
    1355,  1390,  1393,  1443,  1464,   125,   922,   923,   933,   934,
     988,   111,  1163,   657,   713,     6,   827,   713,   650,   110,
     844,   844,   844,     4,   652,   394,  1043,  1049,   473,   620,
    1584,  1309,   244,   652,   391,  1137,  1139,  1140,   721,   722,
    1164,   227,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   309,   310,   434,   435,   679,   680,   683,   176,   418,
     652,  1102,    58,   176,   180,   191,   323,   418,  1113,  1114,
    1115,    56,   437,   171,   650,   692,   827,   111,   844,   223,
     652,  1160,  1160,  1160,   167,   197,   197,  1584,  1456,  1023,
    1024,  1023,  1023,  1312,  1313,  1456,  1457,  1464,   652,  1359,
     658,  1363,  1164,  1164,    12,   140,  1199,  1260,  1199,  1199,
    1199,   625,  1208,  1164,  1164,  1203,  1203,  1164,  1164,  1164,
     140,  1199,  1260,   651,   364,   651,   651,  1164,  1164,  1164,
    1164,  1452,  1568,   116,   117,   118,   119,   120,   218,   219,
     220,   221,   327,   329,   330,   331,   338,   416,   471,   472,
     623,   638,   639,  1255,  1256,  1164,  1203,   112,   115,   560,
     563,  1257,   140,  1194,  1164,  1164,  1164,  1164,  1255,  1164,
    1203,  1205,     9,   652,   658,   140,  1199,  1164,  1164,   140,
    1199,  1164,  1164,  1203,  1203,  1203,  1164,  1164,  1164,  1203,
    1167,  1164,  1164,  1164,  1164,  1164,  1164,   651,  1164,  1199,
    1199,  1164,  1164,   140,  1199,  1164,  1256,  1256,  1164,    45,
     261,   576,  1164,  1164,   651,  1453,  1454,  1464,  1199,  1199,
    1164,  1164,  1164,   651,   652,   651,   474,   650,  1565,  1566,
    1164,   657,  1193,  1466,   658,  1164,  1164,  1164,  1166,   179,
     363,   581,   597,  1170,    12,    18,  1166,  1173,  1167,  1167,
     650,  1174,  1167,  1167,  1167,  1167,   268,  1167,  1167,   240,
    1167,   240,  1167,  1167,  1167,  1167,  1167,    32,   244,   268,
     431,  1466,  1174,  1164,  1180,  1464,   658,  1456,  1316,   652,
    1318,   158,   652,  1309,  1305,   657,   673,   674,   280,   280,
     280,   280,    49,   280,   280,   652,  1397,   115,   560,   563,
     750,   760,  1191,  1446,  1452,  1466,   652,   160,   408,  1524,
     462,   462,   546,   552,   604,   620,   376,  1528,   545,   370,
    1530,    66,   492,  1527,   109,   620,  1529,   370,   652,  1464,
     184,   354,  1464,  1511,  1512,  1327,  1461,  1132,   275,  1424,
    1259,   652,  1309,    74,   650,   882,   883,   882,   883,   392,
     885,   211,   256,  1466,    30,   567,  1414,   122,   186,   283,
     364,   586,  1286,  1287,  1288,    30,   567,  1413,   652,   567,
     652,   567,  1309,  1328,  1324,   391,  1222,  1223,    12,  1409,
    1407,   652,   160,  1524,   370,   370,  1464,    12,   140,  1564,
     652,  1151,  1164,  1450,  1464,   191,   652,  1338,  1464,    72,
     986,  1164,  1467,   369,   394,   555,  1498,   250,   422,  1493,
    1494,  1495,  1496,   204,   275,   479,  1488,  1338,  1464,   577,
    1478,  1489,   652,  1480,  1491,   244,  1384,  1461,  1164,   645,
     927,   712,   712,   712,  1456,   712,  1456,   280,   342,   524,
    1378,  1378,   283,   364,   586,  1280,  1281,  1444,  1464,  1386,
    1464,   712,  1386,  1467,  1381,   712,  1386,   247,   543,   181,
     191,  1372,   652,  1384,   525,   526,  1381,  1456,  1383,  1381,
    1381,  1386,  1386,   600,  1098,  1097,   495,  1089,   474,   650,
     654,  1209,  1210,  1211,  1212,  1213,  1224,  1225,  1239,  1443,
     395,  1618,   379,  1273,  1279,  1563,   923,    72,   979,   136,
    1466,    78,    93,   258,   335,   360,   420,   514,   715,   717,
     427,   590,   845,   846,   233,   841,   842,   843,   850,   858,
     859,   108,   216,   385,   394,   401,   496,   604,   696,   697,
    1461,    25,   315,   835,   836,   837,   850,   851,   852,   858,
     859,   828,   829,   835,  1467,   174,     6,    11,    13,    15,
      26,    27,    57,    62,    63,    70,    78,    87,    96,   111,
     129,   137,   138,   144,   152,   158,   169,   189,   228,   230,
     238,   255,   278,   314,   332,   336,   374,   379,   386,   391,
     394,   425,   439,   440,   441,   442,   464,   521,   522,   523,
     530,   546,   550,   582,   595,   869,   929,   931,   933,   934,
    1055,  1059,  1061,  1064,  1070,  1071,  1072,  1077,  1078,  1269,
     370,   706,  1051,   127,   243,  1456,   125,  1130,  1464,  1128,
    1456,   871,  1139,   230,   256,  1013,  1141,   651,   652,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   652,  1310,   602,  1114,   589,   694,  1191,
    1442,   921,   922,    78,   355,   428,   591,   838,   839,   840,
     850,   854,   855,   856,   857,   858,   859,   632,   607,   823,
      47,   628,  1537,   197,   712,   712,   927,   712,  1464,   685,
     584,   608,  1031,   370,   370,   370,   652,  1360,  1222,   658,
    1363,  1362,   194,   645,  1464,   652,   651,  1199,   651,  1200,
     651,   651,   651,  1164,   150,   625,  1207,    20,   651,   608,
     651,   651,   651,   652,   608,   652,  1188,   651,   645,   651,
     652,   652,   651,   651,   651,   651,   194,   652,   651,   652,
    1190,   651,   652,   652,   652,   644,   652,   651,   651,   650,
    1452,  1464,  1199,   651,   651,   651,  1199,   651,   652,   651,
     651,   651,   651,   651,   651,   652,   651,   244,   651,   652,
     652,   651,   652,   652,   651,   651,   651,   652,   194,   652,
    1199,   651,   651,   652,   652,   652,   651,   194,  1164,   194,
    1164,   194,  1164,   194,   651,   652,   651,   651,   651,   651,
     652,    20,   266,   652,  1003,   651,  1203,  1229,  1230,  1231,
     474,   650,  1146,  1560,  1561,   595,  1570,   655,  1488,   483,
    1464,   179,   363,   581,   597,   650,    17,  1164,  1568,   165,
    1265,  1167,  1164,  1164,  1167,   650,  1174,  1167,  1160,  1184,
    1185,  1186,   650,   658,  1464,  1306,  1318,  1338,  1339,  1467,
      51,   452,  1081,  1309,  1466,   652,  1402,  1309,  1403,   758,
     761,   762,   757,   365,   466,   759,   545,   650,  1538,  1467,
    1538,  1538,  1538,   197,   409,   548,  1522,  1526,   160,   184,
     198,   209,   259,   260,   287,   354,   406,  1513,  1515,   626,
    1261,  1321,  1133,  1134,  1135,  1136,  1456,   232,   286,   422,
     633,  1506,  1505,   650,  1160,   214,   283,   364,   586,  1284,
    1287,   537,   886,   876,    11,   878,  1164,  1461,  1164,  1461,
    1467,  1467,  1123,  1456,   176,   418,   606,  1105,  1106,  1107,
     474,   482,   612,   613,   650,   917,  1329,  1332,   650,   751,
     750,   652,  1467,   197,   409,  1522,  1558,  1159,   194,   241,
    1152,  1153,  1272,  1273,  1297,  1161,  1161,   658,   665,  1489,
      12,    34,   125,   370,  1164,  1499,   125,   985,   987,  1466,
    1338,   650,   650,   266,   372,   633,   652,   652,   658,   658,
     658,  1492,  1164,  1493,  1479,  1481,  1482,  1499,  1461,   194,
    1385,   651,  1464,   368,   652,  1386,   417,  1277,  1371,  1385,
    1386,  1381,  1456,  1386,  1386,   505,   506,   507,   683,  1099,
     604,  1090,  1091,   194,  1238,  1464,   100,   234,   253,   264,
     347,   459,   531,  1221,   482,   652,  1456,  1238,   652,   191,
    1619,    47,  1277,  1339,  1339,   345,  1461,   514,   514,   514,
     514,   514,   473,  1461,  1461,  1339,   652,   843,  1461,  1461,
    1461,  1461,   122,   186,   214,   283,   364,   586,  1283,  1461,
    1461,   651,   652,  1339,  1339,   652,   837,   830,   831,   850,
     851,   852,   394,    75,    89,   391,   945,   948,   949,  1011,
    1013,  1021,  1022,  1079,  1339,  1079,   391,  1339,  1339,  1079,
    1339,   391,   391,  1339,  1339,   567,   136,  1339,   254,   546,
     190,   391,   407,  1013,  1079,   254,  1339,   391,   546,   136,
    1339,  1339,  1339,  1339,  1339,  1079,   391,    47,  1339,   871,
    1339,   391,   393,    20,   160,   567,  1083,   391,   391,  1339,
    1339,  1339,  1339,   139,   324,  1464,  1339,   391,  1339,   929,
     652,   868,   869,  1059,   650,   658,   944,   950,  1455,  1464,
      82,   469,   440,  1052,  1585,  1138,   650,  1164,   650,  1283,
    1460,  1461,  1283,  1283,  1460,  1460,   122,   186,   283,   364,
     586,  1285,  1460,  1283,  1283,  1460,  1460,  1460,  1460,  1460,
    1460,  1460,  1283,  1283,  1460,  1447,  1460,  1283,   680,   651,
    1339,  1339,  1339,  1339,   652,   840,  1466,   279,   177,   832,
     833,   834,   850,   851,   852,   853,   856,   857,   858,   859,
     394,   555,  1466,  1464,  1608,     8,    30,   818,   712,   650,
     455,   268,   650,   861,   928,   930,   931,    46,   211,   467,
    1036,  1036,  1456,  1456,  1456,  1313,  1464,   608,  1358,  1464,
    1210,   658,  1363,   240,  1164,   651,  1164,   558,  1164,  1164,
     154,    34,    61,   112,   115,   123,   349,   490,   563,   599,
    1201,   980,  1164,   980,  1201,  1203,   651,   240,   240,  1164,
    1164,  1164,  1203,  1164,  1164,  1164,  1164,  1164,  1167,   651,
     651,  1164,  1164,  1164,  1164,  1164,  1164,  1203,   240,  1164,
    1164,  1164,   651,  1164,  1164,  1164,  1164,   194,  1164,   194,
    1164,   194,  1164,  1164,  1164,    34,    61,   998,   999,  1000,
    1001,  1002,  1284,  1283,   651,   651,  1571,  1572,  1573,  1230,
    1146,   651,  1564,  1466,  1164,  1568,  1166,   651,   652,   651,
    1174,  1255,  1255,    17,  1164,  1568,  1265,  1164,   651,   652,
    1202,  1203,  1464,  1307,   935,  1466,  1081,   674,  1398,   160,
     652,  1464,  1539,  1540,   567,   645,  1456,  1464,  1534,  1534,
    1534,  1514,  1262,  1278,  1279,  1329,   652,  1137,  1139,   555,
    1463,   633,   275,   879,   880,   881,  1464,   891,  1167,    47,
     650,   893,   883,   160,   650,   567,  1106,   918,  1330,   650,
    1335,  1340,  1335,   651,   917,  1331,  1449,  1450,  1453,  1464,
    1333,  1254,  1464,   160,   205,   194,  1534,  1534,  1534,  1144,
     145,  1210,  1298,   191,   278,  1157,  1297,  1278,  1153,    20,
    1162,  1461,  1464,   645,  1464,  1498,   555,   555,   422,   443,
     477,  1497,  1495,  1494,  1338,  1480,   652,  1484,  1486,  1490,
    1285,  1376,   163,   622,  1281,  1281,   364,  1377,  1261,  1381,
     160,   160,   652,   160,   394,  1092,   479,  1226,  1233,  1238,
    1209,   253,   253,   382,  1240,   253,   264,   459,  1240,  1224,
    1209,  1350,  1351,  1453,  1211,  1222,  1235,  1236,  1283,   328,
    1274,   987,   981,   111,   111,   127,   243,   860,  1286,  1459,
     843,   697,   860,   860,   837,   652,   831,   174,  1039,  1455,
    1118,    63,   190,   407,   947,  1012,  1017,  1039,  1013,  1014,
    1014,   125,  1464,  1455,  1118,  1285,  1283,  1455,  1283,    12,
    1060,  1068,  1069,  1464,  1118,  1461,  1461,   979,  1339,  1283,
     256,  1068,   256,  1455,  1455,   935,  1069,  1339,   184,   259,
     360,   938,  1283,   125,  1464,  1285,  1285,  1455,  1118,  1270,
    1271,  1453,   125,  1283,   870,  1461,  1118,   871,  1456,  1118,
    1118,    81,    83,   125,   148,   185,   429,   568,   569,   570,
     571,   572,   573,   574,   575,   937,   125,  1283,   125,  1283,
     125,  1283,  1283,  1060,   932,     6,   144,  1072,   941,   942,
     943,   944,   945,  1464,     8,   184,  1082,   430,   946,   947,
    1005,   951,   658,   358,   405,    24,   168,   700,   567,   137,
     152,   702,   650,  1586,   650,   407,  1251,  1252,  1253,  1464,
     681,   682,  1283,  1461,  1284,   860,   860,   840,   375,   207,
    1339,   652,   834,   555,    20,   455,   650,   130,   237,   601,
     819,   699,  1602,   123,   242,   424,   532,   940,  1456,   268,
     862,   867,   868,   941,   867,   652,   930,   686,   688,   690,
     658,  1210,  1261,  1363,  1261,  1164,   651,  1164,   558,   650,
     969,   970,   970,   650,   964,   650,   962,   963,   969,   970,
     242,   964,   242,   651,   651,   651,   651,   651,  1189,  1164,
    1164,   651,   651,   652,   651,   379,  1196,   652,   652,   651,
     652,   651,   244,  1181,  1182,   651,   651,   651,   651,   652,
     651,   651,  1164,   651,   191,   651,   651,   652,   651,   652,
     652,   651,  1164,   651,  1164,   651,  1164,   651,   651,   651,
     650,   993,   993,    21,   131,   457,   643,   995,   996,   997,
     652,   652,  1158,  1573,   651,  1567,   658,  1040,   651,  1203,
    1166,   651,   652,   651,  1161,  1186,   651,  1076,  1077,  1078,
     191,   628,  1399,    55,    65,    77,    90,    91,    92,   106,
     326,   343,   454,   470,   533,   551,   763,   762,   651,   652,
    1536,   658,   658,   567,   567,   567,   650,  1164,   370,  1345,
    1135,  1456,  1139,   226,  1142,  1420,   651,   652,  1161,   877,
     391,   894,   895,  1284,   879,  1467,  1154,  1336,  1337,  1453,
    1341,   652,   650,  1332,   651,   651,   652,   658,  1556,   651,
     652,   750,   376,  1536,   194,   194,   194,  1261,  1261,   146,
     383,  1293,  1294,  1299,   601,   244,  1461,  1464,   658,   651,
     651,    79,   587,   422,  1499,  1483,  1485,  1277,  1277,  1386,
    1461,  1461,   683,  1461,   160,   126,  1093,  1164,   595,   651,
    1560,  1234,   655,   253,  1224,  1240,  1240,   253,   370,   370,
     608,   652,  1349,  1338,  1259,  1154,  1164,  1275,  1451,   831,
    1062,   650,   256,   256,  1039,  1014,  1024,  1039,  1039,   144,
     482,  1060,  1073,  1057,   652,  1284,   981,  1461,  1455,  1081,
     628,  1461,  1074,  1060,   652,    21,   131,  1276,   874,  1060,
    1065,  1060,   650,   651,   652,  1464,  1456,    33,    34,    39,
      41,    43,    44,    61,   112,   115,   123,   142,   159,   185,
     187,   200,   201,   242,   272,   281,   282,   284,   320,   321,
     322,   339,   340,   341,   346,   349,   366,   367,   399,   400,
     424,   478,   482,   494,   556,   560,   563,   564,   565,   566,
     614,   615,   639,   952,   955,   956,   957,   958,   959,   960,
     961,  1464,   405,  1164,  1164,   370,   706,   712,   370,    78,
     707,  1464,  1587,    20,  1060,   651,   652,   651,   652,   650,
    1464,   860,   834,  1461,   940,  1609,   370,   370,   723,   724,
     726,  1464,   497,  1456,   917,   651,   226,   445,   864,  1426,
     930,   650,   650,   650,  1464,  1261,  1272,  1255,  1164,   122,
     283,   364,   586,    22,    34,    48,   593,   979,   989,   990,
     991,   364,   364,   651,  1255,  1255,  1164,    47,   476,  1195,
    1164,  1164,  1203,    43,   347,   651,   628,  1183,  1164,  1255,
    1164,  1164,  1164,  1164,   651,   651,   651,  1284,   651,  1003,
     998,   996,   998,   999,  1283,  1232,  1565,  1464,   651,  1203,
    1162,  1078,  1077,  1400,   422,  1540,   628,  1543,   645,   645,
    1536,  1536,  1536,   125,  1164,  1343,  1344,   147,  1142,   262,
    1426,   881,   651,   211,   256,   896,   651,   652,   651,  1158,
     652,  1338,  1342,  1343,  1340,  1334,  1332,  1449,  1464,   871,
    1464,   194,  1536,  1536,  1536,  1278,   207,  1266,  1463,  1463,
     657,  1295,  1296,  1466,   484,   645,  1484,  1489,  1461,   160,
     396,  1094,  1564,  1259,  1212,  1209,  1224,   253,   253,  1209,
    1224,  1215,  1214,  1216,  1351,  1261,  1344,  1249,  1250,  1158,
     652,  1276,   392,   650,  1063,  1164,  1039,  1024,   650,  1023,
    1023,   125,   125,   950,  1113,  1069,   986,   548,   952,  1056,
    1271,  1066,  1068,  1058,  1403,   943,   650,  1006,   969,   969,
     970,   964,   962,   403,   953,   962,   962,   991,    61,   614,
     956,   958,   991,   991,    61,   615,   615,   618,   962,   954,
     970,   964,   964,   991,   969,   970,    26,    72,    76,    78,
     125,   363,   370,   407,   478,   530,   972,   973,   974,  1004,
    1017,  1170,   618,   969,   991,    34,   969,   992,   969,   969,
     970,   650,   963,   971,   658,  1255,   492,  1461,   143,  1053,
     651,   652,  1588,  1589,   651,  1252,   682,   696,   497,   235,
     244,   384,   727,   728,   729,   730,  1160,   469,   651,   652,
     725,  1461,   651,   651,   928,    20,   920,  1037,  1038,  1464,
    1037,  1037,   269,  1282,   651,   651,   651,   651,   651,    34,
      22,   593,   979,    34,   980,   651,   652,   651,   651,   651,
    1197,  1443,   651,   651,   652,   651,   334,   258,   417,   651,
     651,   651,   651,   651,   651,   994,   651,   652,   939,  1153,
    1278,  1560,   651,   175,   278,   205,   447,  1541,  1541,  1541,
     651,   652,  1346,   241,   650,   884,   878,   897,  1464,   895,
     919,  1337,  1344,   651,  1559,  1536,    47,   212,  1263,  1300,
    1466,   652,   334,  1461,   160,  1227,   370,  1218,  1224,  1224,
     370,  1220,  1164,  1164,   650,  1272,  1247,  1248,  1237,  1451,
    1284,   894,   651,   650,   650,  1037,   650,   650,   115,   560,
     563,   643,   644,  1445,  1446,  1082,  1456,   972,  1118,  1067,
    1105,   651,  1007,  1464,   311,  1008,   490,   599,   640,   966,
     967,   968,   650,   966,   966,   991,   618,   966,   650,   991,
     966,   985,    83,   125,   148,   185,  1461,   977,   978,  1445,
     601,   125,   125,   139,   324,   974,   256,   256,   363,   991,
     992,   991,   992,   966,   364,   966,  1464,   701,   708,   709,
    1464,   474,   650,  1590,  1593,   651,  1461,   651,   652,   725,
    1597,   700,  1603,   726,   952,   976,   863,   867,   650,   917,
     651,   652,  1276,   650,   651,   651,  1281,   980,   992,   364,
    1198,  1451,  1164,   334,   173,   651,  1283,  1157,  1157,   376,
      64,   251,   356,   516,   535,   634,  1532,  1533,   628,  1542,
    1542,  1542,  1344,   256,   548,  1160,   887,   650,   612,   898,
     939,  1267,  1451,  1264,  1272,   979,   982,  1296,  1461,  1565,
    1217,   608,  1219,   608,  1254,  1282,   189,   226,   607,  1242,
    1243,  1246,   939,  1276,   651,  1037,  1037,   651,  1037,  1037,
    1447,  1447,   871,  1075,   241,   651,   652,   195,   390,   491,
     370,  1009,   968,  1041,  1443,  1041,   628,   975,   977,   613,
     518,   703,    53,    68,   182,   225,   252,   263,   373,   456,
     710,   768,   770,   771,   772,   774,   775,   776,   777,   778,
     779,   781,   789,   790,   793,   804,   807,   809,   810,  1459,
    1465,  1469,  1594,   650,  1592,  1593,   628,  1595,  1591,  1610,
     729,  1464,  1456,   705,   706,   455,   986,  1559,   864,   917,
     865,    78,   255,  1025,  1028,  1031,  1032,  1033,  1038,   364,
     628,  1026,  1030,  1032,  1035,  1027,  1029,  1032,  1034,   651,
     652,  1276,   651,   651,   555,   555,   555,    17,  1531,   205,
     312,   313,   317,   318,  1544,  1545,   601,  1456,   891,   536,
     892,   889,   890,  1464,   244,   265,    78,   111,   230,   314,
     332,   355,   546,   914,   915,   916,  1380,   629,   630,   652,
    1268,  1276,  1164,  1278,   981,  1301,  1228,  1164,   650,  1164,
     650,   651,  1013,  1013,  1243,   651,   651,  1025,   651,   651,
    1082,   650,  1464,   130,   601,   651,   652,   651,    84,  1164,
     155,   704,   791,   794,  1464,   194,   354,   782,   769,  1465,
    1465,  1464,   773,   665,   285,   444,   627,   813,    31,   811,
     659,  1149,  1592,   651,    52,    63,   275,  1556,   714,   976,
     191,   702,  1604,   651,  1556,  1461,  1339,   687,  1033,  1276,
     651,   389,   689,  1035,   691,  1034,  1451,  1532,   376,  1283,
    1283,  1283,  1283,  1545,  1352,  1353,  1453,  1222,  1161,  1284,
     651,   652,   900,   557,  1339,   136,   136,  1339,  1339,  1339,
    1339,   650,   909,   916,   158,  1451,   409,  1289,    74,  1427,
    1560,  1254,  1254,   191,  1241,  1241,  1005,  1025,  1026,  1027,
     894,    51,   360,   452,   482,  1010,  1010,   991,  1443,   991,
    1464,  1164,  1164,   625,   796,   800,   194,  1464,   784,   785,
    1164,   732,   767,   768,   770,   772,   774,   776,   777,   778,
     779,   781,   789,   804,   807,   809,   732,   814,   812,   805,
     808,   651,  1559,    63,   376,    63,   134,   715,   716,  1170,
    1611,  1160,   707,   976,   866,  1283,  1076,  1459,  1076,  1076,
    1276,   652,  1338,  1421,   651,   888,   890,   650,   902,   904,
     899,  1461,  1339,  1339,  1286,  1286,  1284,  1466,   537,   910,
     911,  1339,  1276,    14,   153,   164,   377,   554,  1428,  1429,
     271,  1430,   651,   651,   207,   253,   379,  1245,  1244,   651,
       5,   125,   363,   370,   370,   792,   801,   150,   800,   803,
     241,   154,  1164,   154,   767,   656,   600,  1164,   733,   813,
     811,   376,   376,   134,   767,  1598,   143,  1605,  1559,  1353,
    1344,   982,   892,   650,   903,   904,   905,   319,   901,   904,
    1461,  1461,   912,   651,   652,   935,  1290,    47,    47,   153,
      47,  1429,   517,   554,  1431,  1432,    47,    47,   650,   650,
     601,   130,   625,   795,   797,  1164,   732,   154,   780,   225,
     786,   285,   656,   816,   815,   124,   731,   734,   806,  1465,
     806,   149,   708,   714,  1422,   651,   652,   319,   907,   908,
    1167,   913,  1466,   911,   650,  1443,  1443,    47,  1443,    47,
      47,  1432,  1251,  1253,  1010,  1010,   798,   797,   803,   802,
      53,   783,  1464,   558,  1164,   143,    95,   172,   738,   764,
    1464,   154,   767,   656,   465,  1606,   463,  1433,   904,   652,
     906,   914,   364,  1291,  1292,  1443,  1443,  1443,   651,   651,
    1164,   154,   558,   652,   732,   817,   732,   210,   652,   735,
      86,   105,   656,  1599,   767,   223,  1427,   908,   651,   651,
     652,   799,    53,   732,  1464,   787,   154,   154,   191,  1464,
     976,   191,   191,   767,    47,  1430,  1292,   558,   150,   151,
     788,   444,   627,   736,   125,   765,   741,   742,  1283,   737,
    1443,   226,  1434,   732,   732,   784,   502,   504,   739,   740,
     741,   744,  1170,  1464,   766,  1143,   364,   650,  1436,   652,
     767,   193,  1164,   271,   463,  1435,   651,   657,  1437,  1438,
    1453,   482,  1439,   740,  1466,   651,   652,  1440,  1441,  1453,
    1438,   652,  1338,  1441,  1160,  1344,  1161
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1792 of yacc.c  */
#line 1996 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
/* Line 1792 of yacc.c  */
#line 2008 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
/* Line 1792 of yacc.c  */
#line 2033 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 62:
/* Line 1792 of yacc.c  */
#line 2107 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 65:
/* Line 1792 of yacc.c  */
#line 2122 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 2142 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 2149 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 2159 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 2166 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 2181 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 2193 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 2201 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 2212 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 2225 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 2235 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 2239 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 2243 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 2247 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 2252 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 2256 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 2260 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 2265 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              Lex_input_stream *lip= YYLIP;
              const char *start= lip->get_tok_start();
              const char *msg= YYTHD->strmake(start, lip->get_ptr() - start);
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       msg, MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 2278 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 2283 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 2287 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 2291 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 2295 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 2299 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 2303 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 2308 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 2312 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 2317 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 2348 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 2353 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 2370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 2384 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 2388 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 2404 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 2408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 2420 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_SHARED))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 2446 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 2465 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 2470 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 2474 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 2477 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 2482 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 2486 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 2489 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 2494 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 2498 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 2500 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 122:
/* Line 1792 of yacc.c  */
#line 2505 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 2512 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 2518 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 2520 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 126:
/* Line 1792 of yacc.c  */
#line 2524 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 127:
/* Line 1792 of yacc.c  */
#line 2528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 128:
/* Line 1792 of yacc.c  */
#line 2532 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 2537 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_COMPRESSION_DICTIONARY;
            Lex->create_info.options= (yyvsp[(3) - (7)].num);
            Lex->ident= (yyvsp[(4) - (7)].lex_str);
            Lex->default_value= (yyvsp[(6) - (7)].item);
          }
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 2550 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 131:
/* Line 1792 of yacc.c  */
#line 2552 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    CREATE COMPRESSION_DICTIONARY <dict>(@foo := expr)
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 2576 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (10)].lex_str).length == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "server name", "");
              MYSQL_YYABORT;
            }
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 2595 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 2599 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 2603 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 2607 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 2611 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 140:
/* Line 1792 of yacc.c  */
#line 2616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 2620 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 2627 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 2647 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 144:
/* Line 1792 of yacc.c  */
#line 2658 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 2665 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 2671 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 2673 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 2679 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 2685 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 2694 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 2701 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 2709 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 2715 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 2721 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 2727 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 2735 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 2737 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 2744 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 2787 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 2816 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 177:
/* Line 1792 of yacc.c  */
#line 2831 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 178:
/* Line 1792 of yacc.c  */
#line 2845 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 179:
/* Line 1792 of yacc.c  */
#line 2863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 2864 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 2868 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 2869 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 2875 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 2877 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 2879 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 2881 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 2883 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 2885 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 2887 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 2892 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 2893 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 2894 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 2899 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 2903 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 2910 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 2918 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 201:
/* Line 1792 of yacc.c  */
#line 2934 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 2938 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 2956 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 2976 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 3017 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 3045 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 3046 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 3047 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 3048 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 3052 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 3057 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 222:
/* Line 1792 of yacc.c  */
#line 3063 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 223:
/* Line 1792 of yacc.c  */
#line 3067 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 224:
/* Line 1792 of yacc.c  */
#line 3093 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 3104 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 3177 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 227:
/* Line 1792 of yacc.c  */
#line 3193 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 228:
/* Line 1792 of yacc.c  */
#line 3233 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 229:
/* Line 1792 of yacc.c  */
#line 3267 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 3276 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 3339 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 3340 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 3346 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 3348 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 3353 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 3376 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 3391 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 3412 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 3413 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 3418 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 3422 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 3435 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 3441 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 3447 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 3456 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 3471 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 3497 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 3502 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 3504 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 3509 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 3517 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 3526 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 255:
/* Line 1792 of yacc.c  */
#line 3545 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 3547 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 3565 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 258:
/* Line 1792 of yacc.c  */
#line 3571 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 3573 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 3575 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 3577 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 3579 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 3581 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 3583 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 3585 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 3587 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 3589 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 268:
/* Line 1792 of yacc.c  */
#line 3591 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 3593 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 3598 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 3614 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 272:
/* Line 1792 of yacc.c  */
#line 3629 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 3631 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 3636 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 3642 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 3651 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 3657 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 3666 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 3674 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 3703 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 3712 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 3714 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 3723 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 3728 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 3734 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 3743 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 3751 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 288:
/* Line 1792 of yacc.c  */
#line 3753 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 3755 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 3757 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 3759 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 292:
/* Line 1792 of yacc.c  */
#line 3761 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 3763 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 294:
/* Line 1792 of yacc.c  */
#line 3765 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 3767 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 296:
/* Line 1792 of yacc.c  */
#line 3769 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 297:
/* Line 1792 of yacc.c  */
#line 3771 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 298:
/* Line 1792 of yacc.c  */
#line 3773 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 299:
/* Line 1792 of yacc.c  */
#line 3775 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 3780 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 3800 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 3823 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 3825 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 3827 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 318:
/* Line 1792 of yacc.c  */
#line 3848 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 319:
/* Line 1792 of yacc.c  */
#line 3850 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 320:
/* Line 1792 of yacc.c  */
#line 3858 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 321:
/* Line 1792 of yacc.c  */
#line 3868 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 322:
/* Line 1792 of yacc.c  */
#line 3915 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 323:
/* Line 1792 of yacc.c  */
#line 3925 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 324:
/* Line 1792 of yacc.c  */
#line 3971 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 325:
/* Line 1792 of yacc.c  */
#line 3982 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 326:
/* Line 1792 of yacc.c  */
#line 3994 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:
/* Line 1792 of yacc.c  */
#line 4053 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 328:
/* Line 1792 of yacc.c  */
#line 4103 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 329:
/* Line 1792 of yacc.c  */
#line 4127 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 330:
/* Line 1792 of yacc.c  */
#line 4148 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 331:
/* Line 1792 of yacc.c  */
#line 4153 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 335:
/* Line 1792 of yacc.c  */
#line 4183 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 336:
/* Line 1792 of yacc.c  */
#line 4201 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 337:
/* Line 1792 of yacc.c  */
#line 4221 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 338:
/* Line 1792 of yacc.c  */
#line 4230 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 339:
/* Line 1792 of yacc.c  */
#line 4266 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 340:
/* Line 1792 of yacc.c  */
#line 4285 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 346:
/* Line 1792 of yacc.c  */
#line 4308 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 347:
/* Line 1792 of yacc.c  */
#line 4319 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 348:
/* Line 1792 of yacc.c  */
#line 4363 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 349:
/* Line 1792 of yacc.c  */
#line 4370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 350:
/* Line 1792 of yacc.c  */
#line 4377 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 355:
/* Line 1792 of yacc.c  */
#line 4394 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 356:
/* Line 1792 of yacc.c  */
#line 4403 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 357:
/* Line 1792 of yacc.c  */
#line 4444 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 358:
/* Line 1792 of yacc.c  */
#line 4452 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 359:
/* Line 1792 of yacc.c  */
#line 4461 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 360:
/* Line 1792 of yacc.c  */
#line 4497 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 361:
/* Line 1792 of yacc.c  */
#line 4505 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 363:
/* Line 1792 of yacc.c  */
#line 4523 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 364:
/* Line 1792 of yacc.c  */
#line 4541 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 365:
/* Line 1792 of yacc.c  */
#line 4560 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 366:
/* Line 1792 of yacc.c  */
#line 4561 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 367:
/* Line 1792 of yacc.c  */
#line 4566 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 368:
/* Line 1792 of yacc.c  */
#line 4582 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 369:
/* Line 1792 of yacc.c  */
#line 4599 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 370:
/* Line 1792 of yacc.c  */
#line 4610 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 371:
/* Line 1792 of yacc.c  */
#line 4618 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 372:
/* Line 1792 of yacc.c  */
#line 4633 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 373:
/* Line 1792 of yacc.c  */
#line 4669 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 374:
/* Line 1792 of yacc.c  */
#line 4684 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 375:
/* Line 1792 of yacc.c  */
#line 4693 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 376:
/* Line 1792 of yacc.c  */
#line 4731 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 377:
/* Line 1792 of yacc.c  */
#line 4747 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 378:
/* Line 1792 of yacc.c  */
#line 4756 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 380:
/* Line 1792 of yacc.c  */
#line 4797 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 381:
/* Line 1792 of yacc.c  */
#line 4799 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 382:
/* Line 1792 of yacc.c  */
#line 4804 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 383:
/* Line 1792 of yacc.c  */
#line 4806 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 384:
/* Line 1792 of yacc.c  */
#line 4808 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 388:
/* Line 1792 of yacc.c  */
#line 4842 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 389:
/* Line 1792 of yacc.c  */
#line 4844 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 390:
/* Line 1792 of yacc.c  */
#line 4854 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 391:
/* Line 1792 of yacc.c  */
#line 4860 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 396:
/* Line 1792 of yacc.c  */
#line 4883 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 447:
/* Line 1792 of yacc.c  */
#line 4981 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:
/* Line 1792 of yacc.c  */
#line 4989 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 449:
/* Line 1792 of yacc.c  */
#line 4997 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 450:
/* Line 1792 of yacc.c  */
#line 5005 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 451:
/* Line 1792 of yacc.c  */
#line 5017 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 452:
/* Line 1792 of yacc.c  */
#line 5029 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 453:
/* Line 1792 of yacc.c  */
#line 5034 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 454:
/* Line 1792 of yacc.c  */
#line 5039 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 455:
/* Line 1792 of yacc.c  */
#line 5047 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:
/* Line 1792 of yacc.c  */
#line 5055 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:
/* Line 1792 of yacc.c  */
#line 5063 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:
/* Line 1792 of yacc.c  */
#line 5071 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:
/* Line 1792 of yacc.c  */
#line 5079 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 460:
/* Line 1792 of yacc.c  */
#line 5087 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 461:
/* Line 1792 of yacc.c  */
#line 5095 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 462:
/* Line 1792 of yacc.c  */
#line 5108 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 463:
/* Line 1792 of yacc.c  */
#line 5121 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 464:
/* Line 1792 of yacc.c  */
#line 5135 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 465:
/* Line 1792 of yacc.c  */
#line 5140 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 466:
/* Line 1792 of yacc.c  */
#line 5152 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 467:
/* Line 1792 of yacc.c  */
#line 5154 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 468:
/* Line 1792 of yacc.c  */
#line 5204 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 469:
/* Line 1792 of yacc.c  */
#line 5207 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 470:
/* Line 1792 of yacc.c  */
#line 5209 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 471:
/* Line 1792 of yacc.c  */
#line 5224 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 472:
/* Line 1792 of yacc.c  */
#line 5243 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 473:
/* Line 1792 of yacc.c  */
#line 5246 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 474:
/* Line 1792 of yacc.c  */
#line 5247 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 475:
/* Line 1792 of yacc.c  */
#line 5251 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 476:
/* Line 1792 of yacc.c  */
#line 5253 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 477:
/* Line 1792 of yacc.c  */
#line 5254 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 478:
/* Line 1792 of yacc.c  */
#line 5256 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 479:
/* Line 1792 of yacc.c  */
#line 5257 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 480:
/* Line 1792 of yacc.c  */
#line 5262 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 481:
/* Line 1792 of yacc.c  */
#line 5298 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 483:
/* Line 1792 of yacc.c  */
#line 5304 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 5322 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 5341 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 5353 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 489:
/* Line 1792 of yacc.c  */
#line 5362 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 490:
/* Line 1792 of yacc.c  */
#line 5369 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 5370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 5372 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 5374 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 494:
/* Line 1792 of yacc.c  */
#line 5376 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 495:
/* Line 1792 of yacc.c  */
#line 5378 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 5382 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 5384 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 5389 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 499:
/* Line 1792 of yacc.c  */
#line 5391 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:
/* Line 1792 of yacc.c  */
#line 5407 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 5408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 5412 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 5413 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 5418 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 5437 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 5447 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 5458 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 508:
/* Line 1792 of yacc.c  */
#line 5466 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 509:
/* Line 1792 of yacc.c  */
#line 5468 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 5483 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 5485 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 5486 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 5489 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 5494 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 5498 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 5499 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 517:
/* Line 1792 of yacc.c  */
#line 5504 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 518:
/* Line 1792 of yacc.c  */
#line 5522 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 5537 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 5539 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 5554 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 522:
/* Line 1792 of yacc.c  */
#line 5570 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 523:
/* Line 1792 of yacc.c  */
#line 5591 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 5592 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 5597 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 5616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 527:
/* Line 1792 of yacc.c  */
#line 5621 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 528:
/* Line 1792 of yacc.c  */
#line 5630 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 5652 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 5667 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 5669 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 532:
/* Line 1792 of yacc.c  */
#line 5684 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 533:
/* Line 1792 of yacc.c  */
#line 5689 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 5710 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 5715 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 5744 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 5755 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 5756 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 5761 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 5772 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 5774 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 5797 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 5798 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 5803 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 5816 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 5836 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 5850 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 5875 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 5876 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 5881 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 5913 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 5918 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 5922 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 5923 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 5927 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 5928 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 5933 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 5935 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 5941 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 5943 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 5945 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 5947 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 5949 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 5951 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 5960 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 5975 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 567:
/* Line 1792 of yacc.c  */
#line 5979 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 568:
/* Line 1792 of yacc.c  */
#line 5989 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 5990 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 5994 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 5995 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 5999 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 6000 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 6004 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 6005 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 6009 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 6010 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 6014 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 6015 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 6019 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 6023 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 6024 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 590:
/* Line 1792 of yacc.c  */
#line 6045 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 591:
/* Line 1792 of yacc.c  */
#line 6050 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 592:
/* Line 1792 of yacc.c  */
#line 6055 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 593:
/* Line 1792 of yacc.c  */
#line 6060 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 594:
/* Line 1792 of yacc.c  */
#line 6065 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 595:
/* Line 1792 of yacc.c  */
#line 6070 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 596:
/* Line 1792 of yacc.c  */
#line 6075 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 597:
/* Line 1792 of yacc.c  */
#line 6080 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 598:
/* Line 1792 of yacc.c  */
#line 6095 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 599:
/* Line 1792 of yacc.c  */
#line 6101 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 600:
/* Line 1792 of yacc.c  */
#line 6116 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 601:
/* Line 1792 of yacc.c  */
#line 6121 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 602:
/* Line 1792 of yacc.c  */
#line 6136 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 603:
/* Line 1792 of yacc.c  */
#line 6142 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 604:
/* Line 1792 of yacc.c  */
#line 6160 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 605:
/* Line 1792 of yacc.c  */
#line 6165 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 606:
/* Line 1792 of yacc.c  */
#line 6170 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 607:
/* Line 1792 of yacc.c  */
#line 6175 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 608:
/* Line 1792 of yacc.c  */
#line 6180 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 609:
/* Line 1792 of yacc.c  */
#line 6185 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 610:
/* Line 1792 of yacc.c  */
#line 6189 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 613:
/* Line 1792 of yacc.c  */
#line 6213 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 614:
/* Line 1792 of yacc.c  */
#line 6218 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 615:
/* Line 1792 of yacc.c  */
#line 6223 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 616:
/* Line 1792 of yacc.c  */
#line 6228 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 617:
/* Line 1792 of yacc.c  */
#line 6230 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 618:
/* Line 1792 of yacc.c  */
#line 6232 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 619:
/* Line 1792 of yacc.c  */
#line 6234 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 620:
/* Line 1792 of yacc.c  */
#line 6240 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 621:
/* Line 1792 of yacc.c  */
#line 6248 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 622:
/* Line 1792 of yacc.c  */
#line 6266 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 623:
/* Line 1792 of yacc.c  */
#line 6283 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 624:
/* Line 1792 of yacc.c  */
#line 6309 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 625:
/* Line 1792 of yacc.c  */
#line 6326 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 626:
/* Line 1792 of yacc.c  */
#line 6327 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 627:
/* Line 1792 of yacc.c  */
#line 6328 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 628:
/* Line 1792 of yacc.c  */
#line 6329 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 629:
/* Line 1792 of yacc.c  */
#line 6330 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 630:
/* Line 1792 of yacc.c  */
#line 6331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 631:
/* Line 1792 of yacc.c  */
#line 6332 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_UNCOMPRESSED; }
    break;

  case 632:
/* Line 1792 of yacc.c  */
#line 6333 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_ZLIB; }
    break;

  case 633:
/* Line 1792 of yacc.c  */
#line 6334 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_SNAPPY; }
    break;

  case 634:
/* Line 1792 of yacc.c  */
#line 6335 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_QUICKLZ; }
    break;

  case 635:
/* Line 1792 of yacc.c  */
#line 6336 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_LZMA; }
    break;

  case 636:
/* Line 1792 of yacc.c  */
#line 6337 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_FAST; }
    break;

  case 637:
/* Line 1792 of yacc.c  */
#line 6338 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_SMALL; }
    break;

  case 638:
/* Line 1792 of yacc.c  */
#line 6339 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_DEFAULT; }
    break;

  case 639:
/* Line 1792 of yacc.c  */
#line 6343 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 640:
/* Line 1792 of yacc.c  */
#line 6344 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 641:
/* Line 1792 of yacc.c  */
#line 6345 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 642:
/* Line 1792 of yacc.c  */
#line 6349 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 644:
/* Line 1792 of yacc.c  */
#line 6354 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 645:
/* Line 1792 of yacc.c  */
#line 6355 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 646:
/* Line 1792 of yacc.c  */
#line 6356 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 647:
/* Line 1792 of yacc.c  */
#line 6357 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 648:
/* Line 1792 of yacc.c  */
#line 6363 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 654:
/* Line 1792 of yacc.c  */
#line 6381 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 655:
/* Line 1792 of yacc.c  */
#line 6388 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 656:
/* Line 1792 of yacc.c  */
#line 6394 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 657:
/* Line 1792 of yacc.c  */
#line 6400 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 658:
/* Line 1792 of yacc.c  */
#line 6406 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (((yyvsp[(1) - (8)].lex_str).length != 0)
                 && ((enum Key::Keytype)(yyvsp[(2) - (8)].key_type) == (Key::CLUSTERING | Key::MULTIPLE)))
            {
              /* Forbid "CONSTRAINT c CLUSTERING" */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 659:
/* Line 1792 of yacc.c  */
#line 6418 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 660:
/* Line 1792 of yacc.c  */
#line 6437 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 664:
/* Line 1792 of yacc.c  */
#line 6452 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 665:
/* Line 1792 of yacc.c  */
#line 6453 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 666:
/* Line 1792 of yacc.c  */
#line 6457 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 667:
/* Line 1792 of yacc.c  */
#line 6462 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
            lex->zip_dict_name=null_lex_cstr;
          }
    break;

  case 668:
/* Line 1792 of yacc.c  */
#line 6472 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type, &lex->zip_dict_name))
              MYSQL_YYABORT;
          }
    break;

  case 669:
/* Line 1792 of yacc.c  */
#line 6485 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 670:
/* Line 1792 of yacc.c  */
#line 6486 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 671:
/* Line 1792 of yacc.c  */
#line 6487 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 672:
/* Line 1792 of yacc.c  */
#line 6489 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 673:
/* Line 1792 of yacc.c  */
#line 6494 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 674:
/* Line 1792 of yacc.c  */
#line 6498 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 675:
/* Line 1792 of yacc.c  */
#line 6503 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 676:
/* Line 1792 of yacc.c  */
#line 6508 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 677:
/* Line 1792 of yacc.c  */
#line 6512 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 678:
/* Line 1792 of yacc.c  */
#line 6517 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 679:
/* Line 1792 of yacc.c  */
#line 6522 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 680:
/* Line 1792 of yacc.c  */
#line 6528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 681:
/* Line 1792 of yacc.c  */
#line 6533 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 682:
/* Line 1792 of yacc.c  */
#line 6539 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 683:
/* Line 1792 of yacc.c  */
#line 6543 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 684:
/* Line 1792 of yacc.c  */
#line 6548 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 685:
/* Line 1792 of yacc.c  */
#line 6553 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 686:
/* Line 1792 of yacc.c  */
#line 6571 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 687:
/* Line 1792 of yacc.c  */
#line 6573 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 688:
/* Line 1792 of yacc.c  */
#line 6575 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 689:
/* Line 1792 of yacc.c  */
#line 6591 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 690:
/* Line 1792 of yacc.c  */
#line 6593 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 691:
/* Line 1792 of yacc.c  */
#line 6598 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 692:
/* Line 1792 of yacc.c  */
#line 6603 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 693:
/* Line 1792 of yacc.c  */
#line 6615 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 694:
/* Line 1792 of yacc.c  */
#line 6620 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 695:
/* Line 1792 of yacc.c  */
#line 6625 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 696:
/* Line 1792 of yacc.c  */
#line 6630 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 697:
/* Line 1792 of yacc.c  */
#line 6632 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 698:
/* Line 1792 of yacc.c  */
#line 6634 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 699:
/* Line 1792 of yacc.c  */
#line 6636 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 700:
/* Line 1792 of yacc.c  */
#line 6638 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 701:
/* Line 1792 of yacc.c  */
#line 6640 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 702:
/* Line 1792 of yacc.c  */
#line 6642 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 703:
/* Line 1792 of yacc.c  */
#line 6644 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 704:
/* Line 1792 of yacc.c  */
#line 6646 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 705:
/* Line 1792 of yacc.c  */
#line 6648 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 706:
/* Line 1792 of yacc.c  */
#line 6650 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 707:
/* Line 1792 of yacc.c  */
#line 6652 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 708:
/* Line 1792 of yacc.c  */
#line 6654 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 709:
/* Line 1792 of yacc.c  */
#line 6656 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 710:
/* Line 1792 of yacc.c  */
#line 6664 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 711:
/* Line 1792 of yacc.c  */
#line 6665 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 712:
/* Line 1792 of yacc.c  */
#line 6667 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 713:
/* Line 1792 of yacc.c  */
#line 6672 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 714:
/* Line 1792 of yacc.c  */
#line 6673 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 715:
/* Line 1792 of yacc.c  */
#line 6674 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 716:
/* Line 1792 of yacc.c  */
#line 6675 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 717:
/* Line 1792 of yacc.c  */
#line 6676 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 718:
/* Line 1792 of yacc.c  */
#line 6680 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 719:
/* Line 1792 of yacc.c  */
#line 6684 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 720:
/* Line 1792 of yacc.c  */
#line 6685 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 721:
/* Line 1792 of yacc.c  */
#line 6689 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 722:
/* Line 1792 of yacc.c  */
#line 6690 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 723:
/* Line 1792 of yacc.c  */
#line 6694 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 724:
/* Line 1792 of yacc.c  */
#line 6695 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 725:
/* Line 1792 of yacc.c  */
#line 6696 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 726:
/* Line 1792 of yacc.c  */
#line 6697 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 727:
/* Line 1792 of yacc.c  */
#line 6698 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 728:
/* Line 1792 of yacc.c  */
#line 6702 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 729:
/* Line 1792 of yacc.c  */
#line 6703 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 730:
/* Line 1792 of yacc.c  */
#line 6704 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 731:
/* Line 1792 of yacc.c  */
#line 6705 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 732:
/* Line 1792 of yacc.c  */
#line 6706 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 733:
/* Line 1792 of yacc.c  */
#line 6711 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 734:
/* Line 1792 of yacc.c  */
#line 6716 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 735:
/* Line 1792 of yacc.c  */
#line 6718 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 736:
/* Line 1792 of yacc.c  */
#line 6723 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 737:
/* Line 1792 of yacc.c  */
#line 6725 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 738:
/* Line 1792 of yacc.c  */
#line 6727 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 739:
/* Line 1792 of yacc.c  */
#line 6732 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 740:
/* Line 1792 of yacc.c  */
#line 6741 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 741:
/* Line 1792 of yacc.c  */
#line 6742 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 742:
/* Line 1792 of yacc.c  */
#line 6746 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 743:
/* Line 1792 of yacc.c  */
#line 6747 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 744:
/* Line 1792 of yacc.c  */
#line 6749 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 745:
/* Line 1792 of yacc.c  */
#line 6756 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 746:
/* Line 1792 of yacc.c  */
#line 6757 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 747:
/* Line 1792 of yacc.c  */
#line 6761 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 748:
/* Line 1792 of yacc.c  */
#line 6762 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 749:
/* Line 1792 of yacc.c  */
#line 6766 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 750:
/* Line 1792 of yacc.c  */
#line 6767 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 751:
/* Line 1792 of yacc.c  */
#line 6768 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 752:
/* Line 1792 of yacc.c  */
#line 6772 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 753:
/* Line 1792 of yacc.c  */
#line 6773 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 754:
/* Line 1792 of yacc.c  */
#line 6774 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 755:
/* Line 1792 of yacc.c  */
#line 6775 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 756:
/* Line 1792 of yacc.c  */
#line 6778 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 757:
/* Line 1792 of yacc.c  */
#line 6779 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 758:
/* Line 1792 of yacc.c  */
#line 6783 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 759:
/* Line 1792 of yacc.c  */
#line 6784 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 760:
/* Line 1792 of yacc.c  */
#line 6788 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 761:
/* Line 1792 of yacc.c  */
#line 6789 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 762:
/* Line 1792 of yacc.c  */
#line 6793 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 764:
/* Line 1792 of yacc.c  */
#line 6798 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 765:
/* Line 1792 of yacc.c  */
#line 6799 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 766:
/* Line 1792 of yacc.c  */
#line 6800 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 767:
/* Line 1792 of yacc.c  */
#line 6801 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 768:
/* Line 1792 of yacc.c  */
#line 6802 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 769:
/* Line 1792 of yacc.c  */
#line 6804 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 770:
/* Line 1792 of yacc.c  */
#line 6810 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 771:
/* Line 1792 of yacc.c  */
#line 6816 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (1)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_FLAG; 
            if ((yyvsp[(1) - (1)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 772:
/* Line 1792 of yacc.c  */
#line 6825 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (2)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_KEY_FLAG; 
            if ((yyvsp[(1) - (2)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 773:
/* Line 1792 of yacc.c  */
#line 6833 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 774:
/* Line 1792 of yacc.c  */
#line 6835 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 775:
/* Line 1792 of yacc.c  */
#line 6848 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 776:
/* Line 1792 of yacc.c  */
#line 6854 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 777:
/* Line 1792 of yacc.c  */
#line 6860 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 778:
/* Line 1792 of yacc.c  */
#line 6866 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_COMPRESSED << FIELD_FLAGS_COLUMN_FORMAT);
            Lex->zip_dict_name= (yyvsp[(3) - (3)].lex_cstr);
          }
    break;

  case 779:
/* Line 1792 of yacc.c  */
#line 6873 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 780:
/* Line 1792 of yacc.c  */
#line 6878 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 781:
/* Line 1792 of yacc.c  */
#line 6883 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 782:
/* Line 1792 of yacc.c  */
#line 6890 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_cstr)= null_lex_cstr; }
    break;

  case 783:
/* Line 1792 of yacc.c  */
#line 6892 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              no single assignment because of
              LEX_STRING -> LEX_CSTRING conversion
            */
            (yyval.lex_cstr).str= (yyvsp[(3) - (3)].lex_str).str;
            (yyval.lex_cstr).length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 784:
/* Line 1792 of yacc.c  */
#line 6904 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 785:
/* Line 1792 of yacc.c  */
#line 6925 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 787:
/* Line 1792 of yacc.c  */
#line 6934 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 788:
/* Line 1792 of yacc.c  */
#line 6938 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 789:
/* Line 1792 of yacc.c  */
#line 6939 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 790:
/* Line 1792 of yacc.c  */
#line 6944 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 791:
/* Line 1792 of yacc.c  */
#line 6951 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 792:
/* Line 1792 of yacc.c  */
#line 6955 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 793:
/* Line 1792 of yacc.c  */
#line 6956 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 794:
/* Line 1792 of yacc.c  */
#line 6960 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 795:
/* Line 1792 of yacc.c  */
#line 6961 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 796:
/* Line 1792 of yacc.c  */
#line 6966 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 797:
/* Line 1792 of yacc.c  */
#line 6974 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 798:
/* Line 1792 of yacc.c  */
#line 6978 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 799:
/* Line 1792 of yacc.c  */
#line 6979 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 800:
/* Line 1792 of yacc.c  */
#line 6984 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 801:
/* Line 1792 of yacc.c  */
#line 6991 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 802:
/* Line 1792 of yacc.c  */
#line 6992 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 803:
/* Line 1792 of yacc.c  */
#line 6996 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 804:
/* Line 1792 of yacc.c  */
#line 6997 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 805:
/* Line 1792 of yacc.c  */
#line 7001 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 806:
/* Line 1792 of yacc.c  */
#line 7002 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 807:
/* Line 1792 of yacc.c  */
#line 7007 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 808:
/* Line 1792 of yacc.c  */
#line 7009 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 809:
/* Line 1792 of yacc.c  */
#line 7013 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 810:
/* Line 1792 of yacc.c  */
#line 7020 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 811:
/* Line 1792 of yacc.c  */
#line 7029 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 812:
/* Line 1792 of yacc.c  */
#line 7034 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 813:
/* Line 1792 of yacc.c  */
#line 7041 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 816:
/* Line 1792 of yacc.c  */
#line 7044 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 817:
/* Line 1792 of yacc.c  */
#line 7045 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 818:
/* Line 1792 of yacc.c  */
#line 7047 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 819:
/* Line 1792 of yacc.c  */
#line 7052 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 820:
/* Line 1792 of yacc.c  */
#line 7059 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 821:
/* Line 1792 of yacc.c  */
#line 7060 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 822:
/* Line 1792 of yacc.c  */
#line 7065 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 823:
/* Line 1792 of yacc.c  */
#line 7073 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 824:
/* Line 1792 of yacc.c  */
#line 7077 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 825:
/* Line 1792 of yacc.c  */
#line 7078 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 826:
/* Line 1792 of yacc.c  */
#line 7082 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 827:
/* Line 1792 of yacc.c  */
#line 7085 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 828:
/* Line 1792 of yacc.c  */
#line 7086 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 829:
/* Line 1792 of yacc.c  */
#line 7087 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 830:
/* Line 1792 of yacc.c  */
#line 7088 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 831:
/* Line 1792 of yacc.c  */
#line 7093 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 832:
/* Line 1792 of yacc.c  */
#line 7101 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 833:
/* Line 1792 of yacc.c  */
#line 7107 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 834:
/* Line 1792 of yacc.c  */
#line 7108 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 835:
/* Line 1792 of yacc.c  */
#line 7113 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 836:
/* Line 1792 of yacc.c  */
#line 7122 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 837:
/* Line 1792 of yacc.c  */
#line 7123 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 838:
/* Line 1792 of yacc.c  */
#line 7127 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 839:
/* Line 1792 of yacc.c  */
#line 7128 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 842:
/* Line 1792 of yacc.c  */
#line 7142 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 843:
/* Line 1792 of yacc.c  */
#line 7149 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 845:
/* Line 1792 of yacc.c  */
#line 7155 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 846:
/* Line 1792 of yacc.c  */
#line 7162 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 847:
/* Line 1792 of yacc.c  */
#line 7174 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 848:
/* Line 1792 of yacc.c  */
#line 7176 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 849:
/* Line 1792 of yacc.c  */
#line 7178 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 850:
/* Line 1792 of yacc.c  */
#line 7180 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 851:
/* Line 1792 of yacc.c  */
#line 7185 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 852:
/* Line 1792 of yacc.c  */
#line 7191 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 853:
/* Line 1792 of yacc.c  */
#line 7197 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 854:
/* Line 1792 of yacc.c  */
#line 7204 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 855:
/* Line 1792 of yacc.c  */
#line 7211 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 856:
/* Line 1792 of yacc.c  */
#line 7219 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 857:
/* Line 1792 of yacc.c  */
#line 7220 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 858:
/* Line 1792 of yacc.c  */
#line 7221 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 859:
/* Line 1792 of yacc.c  */
#line 7222 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 860:
/* Line 1792 of yacc.c  */
#line 7223 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 861:
/* Line 1792 of yacc.c  */
#line 7227 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 862:
/* Line 1792 of yacc.c  */
#line 7231 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 863:
/* Line 1792 of yacc.c  */
#line 7232 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= (yyvsp[(1) - (2)].key_type); }
    break;

  case 864:
/* Line 1792 of yacc.c  */
#line 7237 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 865:
/* Line 1792 of yacc.c  */
#line 7238 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 866:
/* Line 1792 of yacc.c  */
#line 7242 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 868:
/* Line 1792 of yacc.c  */
#line 7247 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 869:
/* Line 1792 of yacc.c  */
#line 7248 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 870:
/* Line 1792 of yacc.c  */
#line 7249 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 871:
/* Line 1792 of yacc.c  */
#line 7253 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 873:
/* Line 1792 of yacc.c  */
#line 7259 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (1)].key_type) | Key::MULTIPLE);
          }
    break;

  case 874:
/* Line 1792 of yacc.c  */
#line 7263 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type);
          }
    break;

  case 875:
/* Line 1792 of yacc.c  */
#line 7270 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type); 
          }
    break;

  case 876:
/* Line 1792 of yacc.c  */
#line 7274 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 877:
/* Line 1792 of yacc.c  */
#line 7278 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 878:
/* Line 1792 of yacc.c  */
#line 7284 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 879:
/* Line 1792 of yacc.c  */
#line 7288 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::CLUSTERING; }
    break;

  case 880:
/* Line 1792 of yacc.c  */
#line 7292 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 881:
/* Line 1792 of yacc.c  */
#line 7297 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 882:
/* Line 1792 of yacc.c  */
#line 7309 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 885:
/* Line 1792 of yacc.c  */
#line 7326 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 887:
/* Line 1792 of yacc.c  */
#line 7331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 889:
/* Line 1792 of yacc.c  */
#line 7336 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 897:
/* Line 1792 of yacc.c  */
#line 7356 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 898:
/* Line 1792 of yacc.c  */
#line 7357 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 899:
/* Line 1792 of yacc.c  */
#line 7362 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 900:
/* Line 1792 of yacc.c  */
#line 7363 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 905:
/* Line 1792 of yacc.c  */
#line 7378 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 906:
/* Line 1792 of yacc.c  */
#line 7390 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 907:
/* Line 1792 of yacc.c  */
#line 7391 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 908:
/* Line 1792 of yacc.c  */
#line 7392 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 909:
/* Line 1792 of yacc.c  */
#line 7396 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 910:
/* Line 1792 of yacc.c  */
#line 7397 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 911:
/* Line 1792 of yacc.c  */
#line 7402 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 912:
/* Line 1792 of yacc.c  */
#line 7408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 913:
/* Line 1792 of yacc.c  */
#line 7421 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 914:
/* Line 1792 of yacc.c  */
#line 7422 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 915:
/* Line 1792 of yacc.c  */
#line 7426 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 916:
/* Line 1792 of yacc.c  */
#line 7427 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 917:
/* Line 1792 of yacc.c  */
#line 7431 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 918:
/* Line 1792 of yacc.c  */
#line 7432 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 919:
/* Line 1792 of yacc.c  */
#line 7440 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 920:
/* Line 1792 of yacc.c  */
#line 7473 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 921:
/* Line 1792 of yacc.c  */
#line 7485 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 922:
/* Line 1792 of yacc.c  */
#line 7490 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 923:
/* Line 1792 of yacc.c  */
#line 7499 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 924:
/* Line 1792 of yacc.c  */
#line 7510 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 925:
/* Line 1792 of yacc.c  */
#line 7521 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 926:
/* Line 1792 of yacc.c  */
#line 7528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 927:
/* Line 1792 of yacc.c  */
#line 7539 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 928:
/* Line 1792 of yacc.c  */
#line 7546 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 929:
/* Line 1792 of yacc.c  */
#line 7557 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 930:
/* Line 1792 of yacc.c  */
#line 7564 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 931:
/* Line 1792 of yacc.c  */
#line 7576 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 932:
/* Line 1792 of yacc.c  */
#line 7578 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 933:
/* Line 1792 of yacc.c  */
#line 7598 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 934:
/* Line 1792 of yacc.c  */
#line 7611 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 935:
/* Line 1792 of yacc.c  */
#line 7616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 936:
/* Line 1792 of yacc.c  */
#line 7621 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 937:
/* Line 1792 of yacc.c  */
#line 7626 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 938:
/* Line 1792 of yacc.c  */
#line 7631 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 939:
/* Line 1792 of yacc.c  */
#line 7638 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 940:
/* Line 1792 of yacc.c  */
#line 7645 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 941:
/* Line 1792 of yacc.c  */
#line 7650 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 942:
/* Line 1792 of yacc.c  */
#line 7657 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 943:
/* Line 1792 of yacc.c  */
#line 7658 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 944:
/* Line 1792 of yacc.c  */
#line 7659 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 945:
/* Line 1792 of yacc.c  */
#line 7660 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 946:
/* Line 1792 of yacc.c  */
#line 7664 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 947:
/* Line 1792 of yacc.c  */
#line 7666 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 948:
/* Line 1792 of yacc.c  */
#line 7677 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 949:
/* Line 1792 of yacc.c  */
#line 7678 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 950:
/* Line 1792 of yacc.c  */
#line 7682 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 951:
/* Line 1792 of yacc.c  */
#line 7683 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 953:
/* Line 1792 of yacc.c  */
#line 7689 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 954:
/* Line 1792 of yacc.c  */
#line 7697 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 960:
/* Line 1792 of yacc.c  */
#line 7719 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 961:
/* Line 1792 of yacc.c  */
#line 7724 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 962:
/* Line 1792 of yacc.c  */
#line 7731 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 964:
/* Line 1792 of yacc.c  */
#line 7745 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 965:
/* Line 1792 of yacc.c  */
#line 7757 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 967:
/* Line 1792 of yacc.c  */
#line 7770 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 969:
/* Line 1792 of yacc.c  */
#line 7783 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 970:
/* Line 1792 of yacc.c  */
#line 7790 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 972:
/* Line 1792 of yacc.c  */
#line 7803 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 973:
/* Line 1792 of yacc.c  */
#line 7830 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 974:
/* Line 1792 of yacc.c  */
#line 7837 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 976:
/* Line 1792 of yacc.c  */
#line 7845 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 977:
/* Line 1792 of yacc.c  */
#line 7857 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 979:
/* Line 1792 of yacc.c  */
#line 7863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 980:
/* Line 1792 of yacc.c  */
#line 7868 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 981:
/* Line 1792 of yacc.c  */
#line 7875 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 983:
/* Line 1792 of yacc.c  */
#line 7890 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 984:
/* Line 1792 of yacc.c  */
#line 7894 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 985:
/* Line 1792 of yacc.c  */
#line 7898 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 986:
/* Line 1792 of yacc.c  */
#line 7905 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 987:
/* Line 1792 of yacc.c  */
#line 7906 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 988:
/* Line 1792 of yacc.c  */
#line 7911 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 991:
/* Line 1792 of yacc.c  */
#line 7931 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 992:
/* Line 1792 of yacc.c  */
#line 7940 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 993:
/* Line 1792 of yacc.c  */
#line 7944 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 994:
/* Line 1792 of yacc.c  */
#line 7949 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 995:
/* Line 1792 of yacc.c  */
#line 7954 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 996:
/* Line 1792 of yacc.c  */
#line 7960 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 997:
/* Line 1792 of yacc.c  */
#line 7964 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->zip_dict_name= null_lex_cstr;
          }
    break;

  case 998:
/* Line 1792 of yacc.c  */
#line 7974 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type, &lex->zip_dict_name))
              MYSQL_YYABORT;
          }
    break;

  case 999:
/* Line 1792 of yacc.c  */
#line 7986 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1000:
/* Line 1792 of yacc.c  */
#line 7990 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1001:
/* Line 1792 of yacc.c  */
#line 7999 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1002:
/* Line 1792 of yacc.c  */
#line 8008 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1003:
/* Line 1792 of yacc.c  */
#line 8017 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1004:
/* Line 1792 of yacc.c  */
#line 8026 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1005:
/* Line 1792 of yacc.c  */
#line 8032 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1006:
/* Line 1792 of yacc.c  */
#line 8038 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1007:
/* Line 1792 of yacc.c  */
#line 8047 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1008:
/* Line 1792 of yacc.c  */
#line 8056 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1009:
/* Line 1792 of yacc.c  */
#line 8084 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
    break;

  case 1010:
/* Line 1792 of yacc.c  */
#line 8105 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1011:
/* Line 1792 of yacc.c  */
#line 8115 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1012:
/* Line 1792 of yacc.c  */
#line 8119 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1020:
/* Line 1792 of yacc.c  */
#line 8136 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1021:
/* Line 1792 of yacc.c  */
#line 8141 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1022:
/* Line 1792 of yacc.c  */
#line 8152 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1023:
/* Line 1792 of yacc.c  */
#line 8157 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1024:
/* Line 1792 of yacc.c  */
#line 8167 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1025:
/* Line 1792 of yacc.c  */
#line 8168 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1026:
/* Line 1792 of yacc.c  */
#line 8172 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1027:
/* Line 1792 of yacc.c  */
#line 8173 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1028:
/* Line 1792 of yacc.c  */
#line 8177 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1029:
/* Line 1792 of yacc.c  */
#line 8178 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1030:
/* Line 1792 of yacc.c  */
#line 8179 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1031:
/* Line 1792 of yacc.c  */
#line 8183 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1032:
/* Line 1792 of yacc.c  */
#line 8185 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1033:
/* Line 1792 of yacc.c  */
#line 8190 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1034:
/* Line 1792 of yacc.c  */
#line 8197 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1035:
/* Line 1792 of yacc.c  */
#line 8198 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1036:
/* Line 1792 of yacc.c  */
#line 8199 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1037:
/* Line 1792 of yacc.c  */
#line 8200 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1038:
/* Line 1792 of yacc.c  */
#line 8205 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1039:
/* Line 1792 of yacc.c  */
#line 8217 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1040:
/* Line 1792 of yacc.c  */
#line 8234 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1041:
/* Line 1792 of yacc.c  */
#line 8244 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1042:
/* Line 1792 of yacc.c  */
#line 8260 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1043:
/* Line 1792 of yacc.c  */
#line 8264 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1044:
/* Line 1792 of yacc.c  */
#line 8271 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1045:
/* Line 1792 of yacc.c  */
#line 8275 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1046:
/* Line 1792 of yacc.c  */
#line 8282 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1047:
/* Line 1792 of yacc.c  */
#line 8286 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
            Lex->value_list.empty();
            Lex->value_list.push_front((yyvsp[(6) - (6)].item));
          }
    break;

  case 1048:
/* Line 1792 of yacc.c  */
#line 8292 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1049:
/* Line 1792 of yacc.c  */
#line 8296 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1051:
/* Line 1792 of yacc.c  */
#line 8307 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1052:
/* Line 1792 of yacc.c  */
#line 8311 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1053:
/* Line 1792 of yacc.c  */
#line 8317 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1054:
/* Line 1792 of yacc.c  */
#line 8321 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 1055:
/* Line 1792 of yacc.c  */
#line 8327 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1056:
/* Line 1792 of yacc.c  */
#line 8331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1057:
/* Line 1792 of yacc.c  */
#line 8337 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1058:
/* Line 1792 of yacc.c  */
#line 8341 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1059:
/* Line 1792 of yacc.c  */
#line 8348 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1060:
/* Line 1792 of yacc.c  */
#line 8352 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1061:
/* Line 1792 of yacc.c  */
#line 8359 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1062:
/* Line 1792 of yacc.c  */
#line 8363 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1063:
/* Line 1792 of yacc.c  */
#line 8370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1064:
/* Line 1792 of yacc.c  */
#line 8374 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1065:
/* Line 1792 of yacc.c  */
#line 8380 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1066:
/* Line 1792 of yacc.c  */
#line 8382 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1069:
/* Line 1792 of yacc.c  */
#line 8409 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1070:
/* Line 1792 of yacc.c  */
#line 8414 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1071:
/* Line 1792 of yacc.c  */
#line 8419 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1072:
/* Line 1792 of yacc.c  */
#line 8426 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1073:
/* Line 1792 of yacc.c  */
#line 8433 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1074:
/* Line 1792 of yacc.c  */
#line 8437 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1075:
/* Line 1792 of yacc.c  */
#line 8438 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1076:
/* Line 1792 of yacc.c  */
#line 8439 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1077:
/* Line 1792 of yacc.c  */
#line 8444 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1078:
/* Line 1792 of yacc.c  */
#line 8454 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1079:
/* Line 1792 of yacc.c  */
#line 8465 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1080:
/* Line 1792 of yacc.c  */
#line 8466 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1081:
/* Line 1792 of yacc.c  */
#line 8470 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1082:
/* Line 1792 of yacc.c  */
#line 8471 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1083:
/* Line 1792 of yacc.c  */
#line 8475 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1084:
/* Line 1792 of yacc.c  */
#line 8476 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1085:
/* Line 1792 of yacc.c  */
#line 8477 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1086:
/* Line 1792 of yacc.c  */
#line 8482 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1087:
/* Line 1792 of yacc.c  */
#line 8492 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:
/* Line 1792 of yacc.c  */
#line 8504 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1089:
/* Line 1792 of yacc.c  */
#line 8512 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1090:
/* Line 1792 of yacc.c  */
#line 8527 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:
/* Line 1792 of yacc.c  */
#line 8538 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1092:
/* Line 1792 of yacc.c  */
#line 8539 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1093:
/* Line 1792 of yacc.c  */
#line 8543 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1094:
/* Line 1792 of yacc.c  */
#line 8544 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1095:
/* Line 1792 of yacc.c  */
#line 8548 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1096:
/* Line 1792 of yacc.c  */
#line 8549 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1097:
/* Line 1792 of yacc.c  */
#line 8550 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1098:
/* Line 1792 of yacc.c  */
#line 8551 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1099:
/* Line 1792 of yacc.c  */
#line 8552 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1100:
/* Line 1792 of yacc.c  */
#line 8553 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1101:
/* Line 1792 of yacc.c  */
#line 8558 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1102:
/* Line 1792 of yacc.c  */
#line 8568 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:
/* Line 1792 of yacc.c  */
#line 8579 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1104:
/* Line 1792 of yacc.c  */
#line 8580 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1105:
/* Line 1792 of yacc.c  */
#line 8581 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1106:
/* Line 1792 of yacc.c  */
#line 8586 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1107:
/* Line 1792 of yacc.c  */
#line 8590 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1108:
/* Line 1792 of yacc.c  */
#line 8592 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1109:
/* Line 1792 of yacc.c  */
#line 8599 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1110:
/* Line 1792 of yacc.c  */
#line 8604 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1113:
/* Line 1792 of yacc.c  */
#line 8617 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1114:
/* Line 1792 of yacc.c  */
#line 8630 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1115:
/* Line 1792 of yacc.c  */
#line 8634 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1120:
/* Line 1792 of yacc.c  */
#line 8653 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1121:
/* Line 1792 of yacc.c  */
#line 8663 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1122:
/* Line 1792 of yacc.c  */
#line 8672 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1123:
/* Line 1792 of yacc.c  */
#line 8673 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1124:
/* Line 1792 of yacc.c  */
#line 8678 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1125:
/* Line 1792 of yacc.c  */
#line 8684 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1130:
/* Line 1792 of yacc.c  */
#line 8699 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1131:
/* Line 1792 of yacc.c  */
#line 8709 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1132:
/* Line 1792 of yacc.c  */
#line 8719 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1134:
/* Line 1792 of yacc.c  */
#line 8726 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1136:
/* Line 1792 of yacc.c  */
#line 8737 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 1138:
/* Line 1792 of yacc.c  */
#line 8743 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1139:
/* Line 1792 of yacc.c  */
#line 8744 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1140:
/* Line 1792 of yacc.c  */
#line 8754 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1143:
/* Line 1792 of yacc.c  */
#line 8768 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1145:
/* Line 1792 of yacc.c  */
#line 8778 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1147:
/* Line 1792 of yacc.c  */
#line 8787 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1149:
/* Line 1792 of yacc.c  */
#line 8806 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1150:
/* Line 1792 of yacc.c  */
#line 8814 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1152:
/* Line 1792 of yacc.c  */
#line 8821 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1157:
/* Line 1792 of yacc.c  */
#line 8831 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1160:
/* Line 1792 of yacc.c  */
#line 8846 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1164:
/* Line 1792 of yacc.c  */
#line 8863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1165:
/* Line 1792 of yacc.c  */
#line 8891 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1167:
/* Line 1792 of yacc.c  */
#line 8923 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->current_select->set_lock_for_tables(TL_WRITE);
              lex->safe_to_cache_query=0;
            }
          }
    break;

  case 1168:
/* Line 1792 of yacc.c  */
#line 8932 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->current_select->
                set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
              lex->safe_to_cache_query=0;
            }
          }
    break;

  case 1171:
/* Line 1792 of yacc.c  */
#line 8947 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1172:
/* Line 1792 of yacc.c  */
#line 8962 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1173:
/* Line 1792 of yacc.c  */
#line 8969 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1174:
/* Line 1792 of yacc.c  */
#line 8993 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1175:
/* Line 1792 of yacc.c  */
#line 8999 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1176:
/* Line 1792 of yacc.c  */
#line 9005 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1177:
/* Line 1792 of yacc.c  */
#line 9006 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1178:
/* Line 1792 of yacc.c  */
#line 9007 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1179:
/* Line 1792 of yacc.c  */
#line 9008 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1180:
/* Line 1792 of yacc.c  */
#line 9009 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1181:
/* Line 1792 of yacc.c  */
#line 9013 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1182:
/* Line 1792 of yacc.c  */
#line 9014 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1183:
/* Line 1792 of yacc.c  */
#line 9020 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1184:
/* Line 1792 of yacc.c  */
#line 9071 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:
/* Line 1792 of yacc.c  */
#line 9078 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1186:
/* Line 1792 of yacc.c  */
#line 9121 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:
/* Line 1792 of yacc.c  */
#line 9127 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:
/* Line 1792 of yacc.c  */
#line 9133 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:
/* Line 1792 of yacc.c  */
#line 9139 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:
/* Line 1792 of yacc.c  */
#line 9145 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:
/* Line 1792 of yacc.c  */
#line 9151 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:
/* Line 1792 of yacc.c  */
#line 9157 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:
/* Line 1792 of yacc.c  */
#line 9167 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:
/* Line 1792 of yacc.c  */
#line 9173 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:
/* Line 1792 of yacc.c  */
#line 9179 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:
/* Line 1792 of yacc.c  */
#line 9185 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:
/* Line 1792 of yacc.c  */
#line 9191 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:
/* Line 1792 of yacc.c  */
#line 9201 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:
/* Line 1792 of yacc.c  */
#line 9207 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:
/* Line 1792 of yacc.c  */
#line 9217 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:
/* Line 1792 of yacc.c  */
#line 9223 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:
/* Line 1792 of yacc.c  */
#line 9231 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:
/* Line 1792 of yacc.c  */
#line 9237 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1206:
/* Line 1792 of yacc.c  */
#line 9247 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:
/* Line 1792 of yacc.c  */
#line 9253 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1208:
/* Line 1792 of yacc.c  */
#line 9262 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:
/* Line 1792 of yacc.c  */
#line 9272 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:
/* Line 1792 of yacc.c  */
#line 9278 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:
/* Line 1792 of yacc.c  */
#line 9288 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:
/* Line 1792 of yacc.c  */
#line 9294 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:
/* Line 1792 of yacc.c  */
#line 9307 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:
/* Line 1792 of yacc.c  */
#line 9313 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:
/* Line 1792 of yacc.c  */
#line 9319 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:
/* Line 1792 of yacc.c  */
#line 9325 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:
/* Line 1792 of yacc.c  */
#line 9331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:
/* Line 1792 of yacc.c  */
#line 9337 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:
/* Line 1792 of yacc.c  */
#line 9343 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:
/* Line 1792 of yacc.c  */
#line 9349 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:
/* Line 1792 of yacc.c  */
#line 9355 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:
/* Line 1792 of yacc.c  */
#line 9361 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:
/* Line 1792 of yacc.c  */
#line 9367 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:
/* Line 1792 of yacc.c  */
#line 9373 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:
/* Line 1792 of yacc.c  */
#line 9379 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:
/* Line 1792 of yacc.c  */
#line 9385 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:
/* Line 1792 of yacc.c  */
#line 9414 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1238:
/* Line 1792 of yacc.c  */
#line 9415 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1239:
/* Line 1792 of yacc.c  */
#line 9416 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1240:
/* Line 1792 of yacc.c  */
#line 9417 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1241:
/* Line 1792 of yacc.c  */
#line 9418 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1242:
/* Line 1792 of yacc.c  */
#line 9419 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1243:
/* Line 1792 of yacc.c  */
#line 9423 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1244:
/* Line 1792 of yacc.c  */
#line 9424 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1250:
/* Line 1792 of yacc.c  */
#line 9434 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:
/* Line 1792 of yacc.c  */
#line 9450 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:
/* Line 1792 of yacc.c  */
#line 9456 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1257:
/* Line 1792 of yacc.c  */
#line 9460 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:
/* Line 1792 of yacc.c  */
#line 9466 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:
/* Line 1792 of yacc.c  */
#line 9472 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:
/* Line 1792 of yacc.c  */
#line 9478 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:
/* Line 1792 of yacc.c  */
#line 9484 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1262:
/* Line 1792 of yacc.c  */
#line 9486 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:
/* Line 1792 of yacc.c  */
#line 9493 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:
/* Line 1792 of yacc.c  */
#line 9500 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:
/* Line 1792 of yacc.c  */
#line 9506 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1266:
/* Line 1792 of yacc.c  */
#line 9547 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1267:
/* Line 1792 of yacc.c  */
#line 9556 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:
/* Line 1792 of yacc.c  */
#line 9563 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:
/* Line 1792 of yacc.c  */
#line 9571 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:
/* Line 1792 of yacc.c  */
#line 9577 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:
/* Line 1792 of yacc.c  */
#line 9584 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:
/* Line 1792 of yacc.c  */
#line 9590 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:
/* Line 1792 of yacc.c  */
#line 9604 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:
/* Line 1792 of yacc.c  */
#line 9612 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:
/* Line 1792 of yacc.c  */
#line 9627 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:
/* Line 1792 of yacc.c  */
#line 9633 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:
/* Line 1792 of yacc.c  */
#line 9639 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1278:
/* Line 1792 of yacc.c  */
#line 9647 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:
/* Line 1792 of yacc.c  */
#line 9653 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:
/* Line 1792 of yacc.c  */
#line 9659 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:
/* Line 1792 of yacc.c  */
#line 9665 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:
/* Line 1792 of yacc.c  */
#line 9671 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:
/* Line 1792 of yacc.c  */
#line 9686 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:
/* Line 1792 of yacc.c  */
#line 9698 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:
/* Line 1792 of yacc.c  */
#line 9704 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:
/* Line 1792 of yacc.c  */
#line 9710 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:
/* Line 1792 of yacc.c  */
#line 9716 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:
/* Line 1792 of yacc.c  */
#line 9722 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:
/* Line 1792 of yacc.c  */
#line 9728 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:
/* Line 1792 of yacc.c  */
#line 9734 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:
/* Line 1792 of yacc.c  */
#line 9740 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:
/* Line 1792 of yacc.c  */
#line 9746 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:
/* Line 1792 of yacc.c  */
#line 9752 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:
/* Line 1792 of yacc.c  */
#line 9758 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:
/* Line 1792 of yacc.c  */
#line 9764 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:
/* Line 1792 of yacc.c  */
#line 9770 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:
/* Line 1792 of yacc.c  */
#line 9776 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:
/* Line 1792 of yacc.c  */
#line 9782 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:
/* Line 1792 of yacc.c  */
#line 9788 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:
/* Line 1792 of yacc.c  */
#line 9794 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1301:
/* Line 1792 of yacc.c  */
#line 9802 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:
/* Line 1792 of yacc.c  */
#line 9823 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:
/* Line 1792 of yacc.c  */
#line 9830 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:
/* Line 1792 of yacc.c  */
#line 9836 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1305:
/* Line 1792 of yacc.c  */
#line 9843 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1306:
/* Line 1792 of yacc.c  */
#line 9851 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:
/* Line 1792 of yacc.c  */
#line 9858 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:
/* Line 1792 of yacc.c  */
#line 9864 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:
/* Line 1792 of yacc.c  */
#line 9870 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:
/* Line 1792 of yacc.c  */
#line 9876 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1311:
/* Line 1792 of yacc.c  */
#line 9881 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:
/* Line 1792 of yacc.c  */
#line 9887 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:
/* Line 1792 of yacc.c  */
#line 9894 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:
/* Line 1792 of yacc.c  */
#line 9900 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:
/* Line 1792 of yacc.c  */
#line 9906 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:
/* Line 1792 of yacc.c  */
#line 9912 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:
/* Line 1792 of yacc.c  */
#line 9918 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:
/* Line 1792 of yacc.c  */
#line 9924 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1319:
/* Line 1792 of yacc.c  */
#line 9942 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:
/* Line 1792 of yacc.c  */
#line 9948 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:
/* Line 1792 of yacc.c  */
#line 9954 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1322:
/* Line 1792 of yacc.c  */
#line 9961 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1323:
/* Line 1792 of yacc.c  */
#line 9968 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1324:
/* Line 1792 of yacc.c  */
#line 9983 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:
/* Line 1792 of yacc.c  */
#line 9989 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:
/* Line 1792 of yacc.c  */
#line 9995 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:
/* Line 1792 of yacc.c  */
#line 10001 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:
/* Line 1792 of yacc.c  */
#line 10007 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1329:
/* Line 1792 of yacc.c  */
#line 10014 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:
/* Line 1792 of yacc.c  */
#line 10020 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:
/* Line 1792 of yacc.c  */
#line 10026 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:
/* Line 1792 of yacc.c  */
#line 10032 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:
/* Line 1792 of yacc.c  */
#line 10038 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:
/* Line 1792 of yacc.c  */
#line 10044 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:
/* Line 1792 of yacc.c  */
#line 10052 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1336:
/* Line 1792 of yacc.c  */
#line 10065 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:
/* Line 1792 of yacc.c  */
#line 10071 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:
/* Line 1792 of yacc.c  */
#line 10077 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:
/* Line 1792 of yacc.c  */
#line 10083 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:
/* Line 1792 of yacc.c  */
#line 10089 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1341:
/* Line 1792 of yacc.c  */
#line 10097 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:
/* Line 1792 of yacc.c  */
#line 10103 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:
/* Line 1792 of yacc.c  */
#line 10115 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:
/* Line 1792 of yacc.c  */
#line 10121 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:
/* Line 1792 of yacc.c  */
#line 10127 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:
/* Line 1792 of yacc.c  */
#line 10135 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:
/* Line 1792 of yacc.c  */
#line 10145 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:
/* Line 1792 of yacc.c  */
#line 10151 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1349:
/* Line 1792 of yacc.c  */
#line 10167 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1350:
/* Line 1792 of yacc.c  */
#line 10173 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1351:
/* Line 1792 of yacc.c  */
#line 10180 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1352:
/* Line 1792 of yacc.c  */
#line 10187 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1353:
/* Line 1792 of yacc.c  */
#line 10194 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1354:
/* Line 1792 of yacc.c  */
#line 10201 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1355:
/* Line 1792 of yacc.c  */
#line 10208 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1356:
/* Line 1792 of yacc.c  */
#line 10212 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1357:
/* Line 1792 of yacc.c  */
#line 10231 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1358:
/* Line 1792 of yacc.c  */
#line 10250 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1359:
/* Line 1792 of yacc.c  */
#line 10304 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1360:
/* Line 1792 of yacc.c  */
#line 10344 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1361:
/* Line 1792 of yacc.c  */
#line 10346 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1362:
/* Line 1792 of yacc.c  */
#line 10350 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1363:
/* Line 1792 of yacc.c  */
#line 10351 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1364:
/* Line 1792 of yacc.c  */
#line 10355 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1365:
/* Line 1792 of yacc.c  */
#line 10356 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1366:
/* Line 1792 of yacc.c  */
#line 10360 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1367:
/* Line 1792 of yacc.c  */
#line 10361 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1368:
/* Line 1792 of yacc.c  */
#line 10366 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1369:
/* Line 1792 of yacc.c  */
#line 10373 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1370:
/* Line 1792 of yacc.c  */
#line 10381 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1371:
/* Line 1792 of yacc.c  */
#line 10407 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:
/* Line 1792 of yacc.c  */
#line 10413 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:
/* Line 1792 of yacc.c  */
#line 10419 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:
/* Line 1792 of yacc.c  */
#line 10425 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:
/* Line 1792 of yacc.c  */
#line 10431 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:
/* Line 1792 of yacc.c  */
#line 10437 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:
/* Line 1792 of yacc.c  */
#line 10446 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:
/* Line 1792 of yacc.c  */
#line 10452 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1379:
/* Line 1792 of yacc.c  */
#line 10454 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1380:
/* Line 1792 of yacc.c  */
#line 10456 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:
/* Line 1792 of yacc.c  */
#line 10462 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:
/* Line 1792 of yacc.c  */
#line 10473 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:
/* Line 1792 of yacc.c  */
#line 10479 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1384:
/* Line 1792 of yacc.c  */
#line 10485 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1385:
/* Line 1792 of yacc.c  */
#line 10491 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:
/* Line 1792 of yacc.c  */
#line 10497 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:
/* Line 1792 of yacc.c  */
#line 10503 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1388:
/* Line 1792 of yacc.c  */
#line 10509 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:
/* Line 1792 of yacc.c  */
#line 10515 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:
/* Line 1792 of yacc.c  */
#line 10521 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1391:
/* Line 1792 of yacc.c  */
#line 10527 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1392:
/* Line 1792 of yacc.c  */
#line 10531 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1393:
/* Line 1792 of yacc.c  */
#line 10546 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1394:
/* Line 1792 of yacc.c  */
#line 10554 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1395:
/* Line 1792 of yacc.c  */
#line 10561 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1396:
/* Line 1792 of yacc.c  */
#line 10572 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1397:
/* Line 1792 of yacc.c  */
#line 10580 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1398:
/* Line 1792 of yacc.c  */
#line 10595 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1399:
/* Line 1792 of yacc.c  */
#line 10596 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1400:
/* Line 1792 of yacc.c  */
#line 10601 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:
/* Line 1792 of yacc.c  */
#line 10606 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1403:
/* Line 1792 of yacc.c  */
#line 10612 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1405:
/* Line 1792 of yacc.c  */
#line 10629 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1406:
/* Line 1792 of yacc.c  */
#line 10631 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1407:
/* Line 1792 of yacc.c  */
#line 10636 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1408:
/* Line 1792 of yacc.c  */
#line 10645 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1409:
/* Line 1792 of yacc.c  */
#line 10653 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1410:
/* Line 1792 of yacc.c  */
#line 10655 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1411:
/* Line 1792 of yacc.c  */
#line 10657 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1412:
/* Line 1792 of yacc.c  */
#line 10659 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1413:
/* Line 1792 of yacc.c  */
#line 10661 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1414:
/* Line 1792 of yacc.c  */
#line 10663 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1415:
/* Line 1792 of yacc.c  */
#line 10665 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1416:
/* Line 1792 of yacc.c  */
#line 10667 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1417:
/* Line 1792 of yacc.c  */
#line 10669 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1418:
/* Line 1792 of yacc.c  */
#line 10671 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1419:
/* Line 1792 of yacc.c  */
#line 10673 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1420:
/* Line 1792 of yacc.c  */
#line 10677 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1421:
/* Line 1792 of yacc.c  */
#line 10678 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1422:
/* Line 1792 of yacc.c  */
#line 10683 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1423:
/* Line 1792 of yacc.c  */
#line 10690 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1424:
/* Line 1792 of yacc.c  */
#line 10697 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1425:
/* Line 1792 of yacc.c  */
#line 10698 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1426:
/* Line 1792 of yacc.c  */
#line 10703 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1427:
/* Line 1792 of yacc.c  */
#line 10710 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1428:
/* Line 1792 of yacc.c  */
#line 10717 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1429:
/* Line 1792 of yacc.c  */
#line 10718 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1430:
/* Line 1792 of yacc.c  */
#line 10722 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1431:
/* Line 1792 of yacc.c  */
#line 10723 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1432:
/* Line 1792 of yacc.c  */
#line 10728 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1433:
/* Line 1792 of yacc.c  */
#line 10736 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1434:
/* Line 1792 of yacc.c  */
#line 10746 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1435:
/* Line 1792 of yacc.c  */
#line 10748 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1436:
/* Line 1792 of yacc.c  */
#line 10756 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1437:
/* Line 1792 of yacc.c  */
#line 10767 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1438:
/* Line 1792 of yacc.c  */
#line 10768 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1439:
/* Line 1792 of yacc.c  */
#line 10774 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1440:
/* Line 1792 of yacc.c  */
#line 10776 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1441:
/* Line 1792 of yacc.c  */
#line 10796 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1442:
/* Line 1792 of yacc.c  */
#line 10798 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1443:
/* Line 1792 of yacc.c  */
#line 10801 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1444:
/* Line 1792 of yacc.c  */
#line 10809 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1445:
/* Line 1792 of yacc.c  */
#line 10816 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1446:
/* Line 1792 of yacc.c  */
#line 10824 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1447:
/* Line 1792 of yacc.c  */
#line 10832 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1448:
/* Line 1792 of yacc.c  */
#line 10836 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1449:
/* Line 1792 of yacc.c  */
#line 10838 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1450:
/* Line 1792 of yacc.c  */
#line 10846 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1451:
/* Line 1792 of yacc.c  */
#line 10854 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1452:
/* Line 1792 of yacc.c  */
#line 10862 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1453:
/* Line 1792 of yacc.c  */
#line 10866 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1454:
/* Line 1792 of yacc.c  */
#line 10872 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1455:
/* Line 1792 of yacc.c  */
#line 10882 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1456:
/* Line 1792 of yacc.c  */
#line 10890 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1457:
/* Line 1792 of yacc.c  */
#line 10899 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1458:
/* Line 1792 of yacc.c  */
#line 10903 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1459:
/* Line 1792 of yacc.c  */
#line 10910 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1460:
/* Line 1792 of yacc.c  */
#line 10920 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1461:
/* Line 1792 of yacc.c  */
#line 10921 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1462:
/* Line 1792 of yacc.c  */
#line 10922 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1463:
/* Line 1792 of yacc.c  */
#line 10930 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1465:
/* Line 1792 of yacc.c  */
#line 10936 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1466:
/* Line 1792 of yacc.c  */
#line 10950 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1467:
/* Line 1792 of yacc.c  */
#line 10955 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1468:
/* Line 1792 of yacc.c  */
#line 10966 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1469:
/* Line 1792 of yacc.c  */
#line 11006 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1470:
/* Line 1792 of yacc.c  */
#line 11079 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1471:
/* Line 1792 of yacc.c  */
#line 11089 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1472:
/* Line 1792 of yacc.c  */
#line 11094 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1473:
/* Line 1792 of yacc.c  */
#line 11102 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1474:
/* Line 1792 of yacc.c  */
#line 11114 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1475:
/* Line 1792 of yacc.c  */
#line 11133 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1476:
/* Line 1792 of yacc.c  */
#line 11141 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1478:
/* Line 1792 of yacc.c  */
#line 11150 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1479:
/* Line 1792 of yacc.c  */
#line 11156 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1480:
/* Line 1792 of yacc.c  */
#line 11172 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1481:
/* Line 1792 of yacc.c  */
#line 11189 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1483:
/* Line 1792 of yacc.c  */
#line 11196 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1484:
/* Line 1792 of yacc.c  */
#line 11201 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1485:
/* Line 1792 of yacc.c  */
#line 11226 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1486:
/* Line 1792 of yacc.c  */
#line 11227 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1487:
/* Line 1792 of yacc.c  */
#line 11232 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1488:
/* Line 1792 of yacc.c  */
#line 11235 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1489:
/* Line 1792 of yacc.c  */
#line 11236 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1490:
/* Line 1792 of yacc.c  */
#line 11237 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1491:
/* Line 1792 of yacc.c  */
#line 11241 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1492:
/* Line 1792 of yacc.c  */
#line 11242 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1493:
/* Line 1792 of yacc.c  */
#line 11247 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1495:
/* Line 1792 of yacc.c  */
#line 11252 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1500:
/* Line 1792 of yacc.c  */
#line 11265 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1502:
/* Line 1792 of yacc.c  */
#line 11269 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1504:
/* Line 1792 of yacc.c  */
#line 11274 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1505:
/* Line 1792 of yacc.c  */
#line 11275 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1506:
/* Line 1792 of yacc.c  */
#line 11280 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1507:
/* Line 1792 of yacc.c  */
#line 11282 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1510:
/* Line 1792 of yacc.c  */
#line 11292 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1511:
/* Line 1792 of yacc.c  */
#line 11303 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1512:
/* Line 1792 of yacc.c  */
#line 11315 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1513:
/* Line 1792 of yacc.c  */
#line 11316 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1514:
/* Line 1792 of yacc.c  */
#line 11317 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1515:
/* Line 1792 of yacc.c  */
#line 11318 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1516:
/* Line 1792 of yacc.c  */
#line 11319 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1517:
/* Line 1792 of yacc.c  */
#line 11320 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1518:
/* Line 1792 of yacc.c  */
#line 11321 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1519:
/* Line 1792 of yacc.c  */
#line 11322 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1520:
/* Line 1792 of yacc.c  */
#line 11323 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1521:
/* Line 1792 of yacc.c  */
#line 11324 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1522:
/* Line 1792 of yacc.c  */
#line 11325 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1523:
/* Line 1792 of yacc.c  */
#line 11326 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1524:
/* Line 1792 of yacc.c  */
#line 11330 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1525:
/* Line 1792 of yacc.c  */
#line 11331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1526:
/* Line 1792 of yacc.c  */
#line 11332 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1527:
/* Line 1792 of yacc.c  */
#line 11333 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1528:
/* Line 1792 of yacc.c  */
#line 11334 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1529:
/* Line 1792 of yacc.c  */
#line 11335 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1530:
/* Line 1792 of yacc.c  */
#line 11336 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1531:
/* Line 1792 of yacc.c  */
#line 11337 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1532:
/* Line 1792 of yacc.c  */
#line 11338 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1533:
/* Line 1792 of yacc.c  */
#line 11342 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1534:
/* Line 1792 of yacc.c  */
#line 11343 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1535:
/* Line 1792 of yacc.c  */
#line 11344 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1536:
/* Line 1792 of yacc.c  */
#line 11345 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1540:
/* Line 1792 of yacc.c  */
#line 11355 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1541:
/* Line 1792 of yacc.c  */
#line 11357 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1544:
/* Line 1792 of yacc.c  */
#line 11370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1545:
/* Line 1792 of yacc.c  */
#line 11372 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1546:
/* Line 1792 of yacc.c  */
#line 11376 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1548:
/* Line 1792 of yacc.c  */
#line 11388 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1549:
/* Line 1792 of yacc.c  */
#line 11392 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1550:
/* Line 1792 of yacc.c  */
#line 11403 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1551:
/* Line 1792 of yacc.c  */
#line 11408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1554:
/* Line 1792 of yacc.c  */
#line 11430 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1555:
/* Line 1792 of yacc.c  */
#line 11432 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1556:
/* Line 1792 of yacc.c  */
#line 11436 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1557:
/* Line 1792 of yacc.c  */
#line 11438 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1558:
/* Line 1792 of yacc.c  */
#line 11458 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1562:
/* Line 1792 of yacc.c  */
#line 11498 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1565:
/* Line 1792 of yacc.c  */
#line 11517 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1567:
/* Line 1792 of yacc.c  */
#line 11552 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1568:
/* Line 1792 of yacc.c  */
#line 11554 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1569:
/* Line 1792 of yacc.c  */
#line 11558 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1570:
/* Line 1792 of yacc.c  */
#line 11559 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1571:
/* Line 1792 of yacc.c  */
#line 11560 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1572:
/* Line 1792 of yacc.c  */
#line 11565 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1573:
/* Line 1792 of yacc.c  */
#line 11571 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1574:
/* Line 1792 of yacc.c  */
#line 11575 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1575:
/* Line 1792 of yacc.c  */
#line 11576 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1576:
/* Line 1792 of yacc.c  */
#line 11581 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
          }
    break;

  case 1577:
/* Line 1792 of yacc.c  */
#line 11592 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1578:
/* Line 1792 of yacc.c  */
#line 11599 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1579:
/* Line 1792 of yacc.c  */
#line 11606 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1580:
/* Line 1792 of yacc.c  */
#line 11616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1581:
/* Line 1792 of yacc.c  */
#line 11643 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1582:
/* Line 1792 of yacc.c  */
#line 11647 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1583:
/* Line 1792 of yacc.c  */
#line 11653 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1584:
/* Line 1792 of yacc.c  */
#line 11659 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1585:
/* Line 1792 of yacc.c  */
#line 11668 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1586:
/* Line 1792 of yacc.c  */
#line 11673 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
            sel->explicit_limit= 1;
          }
    break;

  case 1587:
/* Line 1792 of yacc.c  */
#line 11686 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1588:
/* Line 1792 of yacc.c  */
#line 11687 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1589:
/* Line 1792 of yacc.c  */
#line 11688 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1590:
/* Line 1792 of yacc.c  */
#line 11689 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1591:
/* Line 1792 of yacc.c  */
#line 11690 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1592:
/* Line 1792 of yacc.c  */
#line 11691 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1593:
/* Line 1792 of yacc.c  */
#line 11695 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1594:
/* Line 1792 of yacc.c  */
#line 11696 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1595:
/* Line 1792 of yacc.c  */
#line 11697 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1596:
/* Line 1792 of yacc.c  */
#line 11698 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1597:
/* Line 1792 of yacc.c  */
#line 11699 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1598:
/* Line 1792 of yacc.c  */
#line 11703 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1599:
/* Line 1792 of yacc.c  */
#line 11704 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1600:
/* Line 1792 of yacc.c  */
#line 11705 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1601:
/* Line 1792 of yacc.c  */
#line 11706 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1602:
/* Line 1792 of yacc.c  */
#line 11707 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1603:
/* Line 1792 of yacc.c  */
#line 11711 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1604:
/* Line 1792 of yacc.c  */
#line 11712 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1605:
/* Line 1792 of yacc.c  */
#line 11713 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1606:
/* Line 1792 of yacc.c  */
#line 11714 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1607:
/* Line 1792 of yacc.c  */
#line 11719 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1611:
/* Line 1792 of yacc.c  */
#line 11730 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1613:
/* Line 1792 of yacc.c  */
#line 11763 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1614:
/* Line 1792 of yacc.c  */
#line 11765 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1615:
/* Line 1792 of yacc.c  */
#line 11769 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1616:
/* Line 1792 of yacc.c  */
#line 11777 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1617:
/* Line 1792 of yacc.c  */
#line 11789 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1618:
/* Line 1792 of yacc.c  */
#line 11795 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1620:
/* Line 1792 of yacc.c  */
#line 11800 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1621:
/* Line 1792 of yacc.c  */
#line 11805 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1622:
/* Line 1792 of yacc.c  */
#line 11824 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1623:
/* Line 1792 of yacc.c  */
#line 11863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1625:
/* Line 1792 of yacc.c  */
#line 11875 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1626:
/* Line 1792 of yacc.c  */
#line 11883 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1628:
/* Line 1792 of yacc.c  */
#line 11886 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1629:
/* Line 1792 of yacc.c  */
#line 11898 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1630:
/* Line 1792 of yacc.c  */
#line 11909 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1631:
/* Line 1792 of yacc.c  */
#line 11915 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1632:
/* Line 1792 of yacc.c  */
#line 11926 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1633:
/* Line 1792 of yacc.c  */
#line 11935 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1634:
/* Line 1792 of yacc.c  */
#line 11936 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1635:
/* Line 1792 of yacc.c  */
#line 11937 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1636:
/* Line 1792 of yacc.c  */
#line 11952 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1637:
/* Line 1792 of yacc.c  */
#line 11954 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1638:
/* Line 1792 of yacc.c  */
#line 11961 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1639:
/* Line 1792 of yacc.c  */
#line 11982 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1640:
/* Line 1792 of yacc.c  */
#line 12003 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1641:
/* Line 1792 of yacc.c  */
#line 12015 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1642:
/* Line 1792 of yacc.c  */
#line 12019 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1643:
/* Line 1792 of yacc.c  */
#line 12027 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1644:
/* Line 1792 of yacc.c  */
#line 12029 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1645:
/* Line 1792 of yacc.c  */
#line 12035 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1646:
/* Line 1792 of yacc.c  */
#line 12042 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1647:
/* Line 1792 of yacc.c  */
#line 12047 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1648:
/* Line 1792 of yacc.c  */
#line 12052 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1649:
/* Line 1792 of yacc.c  */
#line 12059 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_DROP_COMPRESSION_DICTIONARY;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->ident= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1652:
/* Line 1792 of yacc.c  */
#line 12073 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1653:
/* Line 1792 of yacc.c  */
#line 12084 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1656:
/* Line 1792 of yacc.c  */
#line 12102 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1657:
/* Line 1792 of yacc.c  */
#line 12112 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1658:
/* Line 1792 of yacc.c  */
#line 12113 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1659:
/* Line 1792 of yacc.c  */
#line 12117 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1660:
/* Line 1792 of yacc.c  */
#line 12118 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1668:
/* Line 1792 of yacc.c  */
#line 12141 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1669:
/* Line 1792 of yacc.c  */
#line 12149 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1670:
/* Line 1792 of yacc.c  */
#line 12154 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1671:
/* Line 1792 of yacc.c  */
#line 12159 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1672:
/* Line 1792 of yacc.c  */
#line 12166 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1673:
/* Line 1792 of yacc.c  */
#line 12171 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1674:
/* Line 1792 of yacc.c  */
#line 12176 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1675:
/* Line 1792 of yacc.c  */
#line 12188 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1676:
/* Line 1792 of yacc.c  */
#line 12190 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1677:
/* Line 1792 of yacc.c  */
#line 12202 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1678:
/* Line 1792 of yacc.c  */
#line 12206 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1679:
/* Line 1792 of yacc.c  */
#line 12208 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1680:
/* Line 1792 of yacc.c  */
#line 12223 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1681:
/* Line 1792 of yacc.c  */
#line 12224 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1682:
/* Line 1792 of yacc.c  */
#line 12229 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1683:
/* Line 1792 of yacc.c  */
#line 12237 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1684:
/* Line 1792 of yacc.c  */
#line 12238 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1685:
/* Line 1792 of yacc.c  */
#line 12239 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1686:
/* Line 1792 of yacc.c  */
#line 12241 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1688:
/* Line 1792 of yacc.c  */
#line 12251 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1689:
/* Line 1792 of yacc.c  */
#line 12252 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1690:
/* Line 1792 of yacc.c  */
#line 12256 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1691:
/* Line 1792 of yacc.c  */
#line 12257 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1692:
/* Line 1792 of yacc.c  */
#line 12259 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1693:
/* Line 1792 of yacc.c  */
#line 12260 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1694:
/* Line 1792 of yacc.c  */
#line 12262 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1695:
/* Line 1792 of yacc.c  */
#line 12263 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1700:
/* Line 1792 of yacc.c  */
#line 12278 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1701:
/* Line 1792 of yacc.c  */
#line 12287 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1702:
/* Line 1792 of yacc.c  */
#line 12288 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1703:
/* Line 1792 of yacc.c  */
#line 12292 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1704:
/* Line 1792 of yacc.c  */
#line 12293 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1705:
/* Line 1792 of yacc.c  */
#line 12298 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1706:
/* Line 1792 of yacc.c  */
#line 12303 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1707:
/* Line 1792 of yacc.c  */
#line 12311 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1709:
/* Line 1792 of yacc.c  */
#line 12317 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1710:
/* Line 1792 of yacc.c  */
#line 12322 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1711:
/* Line 1792 of yacc.c  */
#line 12329 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1712:
/* Line 1792 of yacc.c  */
#line 12331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1714:
/* Line 1792 of yacc.c  */
#line 12340 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1716:
/* Line 1792 of yacc.c  */
#line 12348 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1717:
/* Line 1792 of yacc.c  */
#line 12356 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1718:
/* Line 1792 of yacc.c  */
#line 12374 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1721:
/* Line 1792 of yacc.c  */
#line 12384 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1724:
/* Line 1792 of yacc.c  */
#line 12397 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1725:
/* Line 1792 of yacc.c  */
#line 12406 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1726:
/* Line 1792 of yacc.c  */
#line 12407 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1727:
/* Line 1792 of yacc.c  */
#line 12414 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1729:
/* Line 1792 of yacc.c  */
#line 12429 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1730:
/* Line 1792 of yacc.c  */
#line 12440 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1731:
/* Line 1792 of yacc.c  */
#line 12442 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1732:
/* Line 1792 of yacc.c  */
#line 12448 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1733:
/* Line 1792 of yacc.c  */
#line 12453 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1734:
/* Line 1792 of yacc.c  */
#line 12459 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1737:
/* Line 1792 of yacc.c  */
#line 12472 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1738:
/* Line 1792 of yacc.c  */
#line 12485 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1739:
/* Line 1792 of yacc.c  */
#line 12500 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1740:
/* Line 1792 of yacc.c  */
#line 12501 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1741:
/* Line 1792 of yacc.c  */
#line 12505 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1742:
/* Line 1792 of yacc.c  */
#line 12506 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1743:
/* Line 1792 of yacc.c  */
#line 12510 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1744:
/* Line 1792 of yacc.c  */
#line 12511 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1745:
/* Line 1792 of yacc.c  */
#line 12512 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1746:
/* Line 1792 of yacc.c  */
#line 12517 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1747:
/* Line 1792 of yacc.c  */
#line 12528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1754:
/* Line 1792 of yacc.c  */
#line 12553 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1755:
/* Line 1792 of yacc.c  */
#line 12557 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1756:
/* Line 1792 of yacc.c  */
#line 12561 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1757:
/* Line 1792 of yacc.c  */
#line 12565 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1758:
/* Line 1792 of yacc.c  */
#line 12569 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1759:
/* Line 1792 of yacc.c  */
#line 12573 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1760:
/* Line 1792 of yacc.c  */
#line 12577 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1761:
/* Line 1792 of yacc.c  */
#line 12581 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1762:
/* Line 1792 of yacc.c  */
#line 12585 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1763:
/* Line 1792 of yacc.c  */
#line 12592 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1764:
/* Line 1792 of yacc.c  */
#line 12596 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1765:
/* Line 1792 of yacc.c  */
#line 12605 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1766:
/* Line 1792 of yacc.c  */
#line 12613 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1767:
/* Line 1792 of yacc.c  */
#line 12620 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1768:
/* Line 1792 of yacc.c  */
#line 12627 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1769:
/* Line 1792 of yacc.c  */
#line 12635 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1770:
/* Line 1792 of yacc.c  */
#line 12643 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1771:
/* Line 1792 of yacc.c  */
#line 12651 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1772:
/* Line 1792 of yacc.c  */
#line 12659 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1773:
/* Line 1792 of yacc.c  */
#line 12667 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1774:
/* Line 1792 of yacc.c  */
#line 12674 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1775:
/* Line 1792 of yacc.c  */
#line 12676 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1776:
/* Line 1792 of yacc.c  */
#line 12678 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1777:
/* Line 1792 of yacc.c  */
#line 12687 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1778:
/* Line 1792 of yacc.c  */
#line 12691 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1779:
/* Line 1792 of yacc.c  */
#line 12695 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1781:
/* Line 1792 of yacc.c  */
#line 12700 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1783:
/* Line 1792 of yacc.c  */
#line 12705 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1784:
/* Line 1792 of yacc.c  */
#line 12714 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1785:
/* Line 1792 of yacc.c  */
#line 12721 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1786:
/* Line 1792 of yacc.c  */
#line 12726 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1787:
/* Line 1792 of yacc.c  */
#line 12728 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1788:
/* Line 1792 of yacc.c  */
#line 12730 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1789:
/* Line 1792 of yacc.c  */
#line 12732 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1790:
/* Line 1792 of yacc.c  */
#line 12734 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1791:
/* Line 1792 of yacc.c  */
#line 12742 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1792:
/* Line 1792 of yacc.c  */
#line 12753 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1793:
/* Line 1792 of yacc.c  */
#line 12761 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1794:
/* Line 1792 of yacc.c  */
#line 12763 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1795:
/* Line 1792 of yacc.c  */
#line 12771 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1796:
/* Line 1792 of yacc.c  */
#line 12778 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1797:
/* Line 1792 of yacc.c  */
#line 12785 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1798:
/* Line 1792 of yacc.c  */
#line 12795 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1799:
/* Line 1792 of yacc.c  */
#line 12802 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1800:
/* Line 1792 of yacc.c  */
#line 12808 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1801:
/* Line 1792 of yacc.c  */
#line 12817 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1802:
/* Line 1792 of yacc.c  */
#line 12825 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1803:
/* Line 1792 of yacc.c  */
#line 12829 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1804:
/* Line 1792 of yacc.c  */
#line 12834 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1805:
/* Line 1792 of yacc.c  */
#line 12838 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1806:
/* Line 1792 of yacc.c  */
#line 12842 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1807:
/* Line 1792 of yacc.c  */
#line 12849 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1808:
/* Line 1792 of yacc.c  */
#line 12856 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_THREAD_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1809:
/* Line 1792 of yacc.c  */
#line 12863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1810:
/* Line 1792 of yacc.c  */
#line 12870 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1811:
/* Line 1792 of yacc.c  */
#line 12877 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1812:
/* Line 1792 of yacc.c  */
#line 12884 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1813:
/* Line 1792 of yacc.c  */
#line 12891 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1814:
/* Line 1792 of yacc.c  */
#line 12897 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1815:
/* Line 1792 of yacc.c  */
#line 12904 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1816:
/* Line 1792 of yacc.c  */
#line 12911 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1817:
/* Line 1792 of yacc.c  */
#line 12916 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1818:
/* Line 1792 of yacc.c  */
#line 12921 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1819:
/* Line 1792 of yacc.c  */
#line 12929 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1820:
/* Line 1792 of yacc.c  */
#line 12931 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1821:
/* Line 1792 of yacc.c  */
#line 12933 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1826:
/* Line 1792 of yacc.c  */
#line 12947 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1827:
/* Line 1792 of yacc.c  */
#line 12948 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1828:
/* Line 1792 of yacc.c  */
#line 12952 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1829:
/* Line 1792 of yacc.c  */
#line 12953 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1832:
/* Line 1792 of yacc.c  */
#line 12962 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1833:
/* Line 1792 of yacc.c  */
#line 12963 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1834:
/* Line 1792 of yacc.c  */
#line 12967 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1835:
/* Line 1792 of yacc.c  */
#line 12968 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1837:
/* Line 1792 of yacc.c  */
#line 12974 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1838:
/* Line 1792 of yacc.c  */
#line 12981 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1839:
/* Line 1792 of yacc.c  */
#line 12991 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1840:
/* Line 1792 of yacc.c  */
#line 13002 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1841:
/* Line 1792 of yacc.c  */
#line 13006 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1842:
/* Line 1792 of yacc.c  */
#line 13008 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1850:
/* Line 1792 of yacc.c  */
#line 13026 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1851:
/* Line 1792 of yacc.c  */
#line 13031 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1852:
/* Line 1792 of yacc.c  */
#line 13037 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1853:
/* Line 1792 of yacc.c  */
#line 13043 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1854:
/* Line 1792 of yacc.c  */
#line 13064 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1855:
/* Line 1792 of yacc.c  */
#line 13065 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1856:
/* Line 1792 of yacc.c  */
#line 13067 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1857:
/* Line 1792 of yacc.c  */
#line 13081 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1858:
/* Line 1792 of yacc.c  */
#line 13088 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1859:
/* Line 1792 of yacc.c  */
#line 13093 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1860:
/* Line 1792 of yacc.c  */
#line 13102 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1861:
/* Line 1792 of yacc.c  */
#line 13103 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1863:
/* Line 1792 of yacc.c  */
#line 13108 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1864:
/* Line 1792 of yacc.c  */
#line 13110 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1865:
/* Line 1792 of yacc.c  */
#line 13121 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1866:
/* Line 1792 of yacc.c  */
#line 13129 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1868:
/* Line 1792 of yacc.c  */
#line 13144 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1869:
/* Line 1792 of yacc.c  */
#line 13149 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1870:
/* Line 1792 of yacc.c  */
#line 13151 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1871:
/* Line 1792 of yacc.c  */
#line 13153 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1872:
/* Line 1792 of yacc.c  */
#line 13155 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1873:
/* Line 1792 of yacc.c  */
#line 13157 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1874:
/* Line 1792 of yacc.c  */
#line 13159 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1875:
/* Line 1792 of yacc.c  */
#line 13161 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1876:
/* Line 1792 of yacc.c  */
#line 13163 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1877:
/* Line 1792 of yacc.c  */
#line 13165 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1878:
/* Line 1792 of yacc.c  */
#line 13167 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1879:
/* Line 1792 of yacc.c  */
#line 13169 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1880:
/* Line 1792 of yacc.c  */
#line 13171 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1881:
/* Line 1792 of yacc.c  */
#line 13173 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1882:
/* Line 1792 of yacc.c  */
#line 13175 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_THREAD_STATS; }
    break;

  case 1883:
/* Line 1792 of yacc.c  */
#line 13177 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1884:
/* Line 1792 of yacc.c  */
#line 13179 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1885:
/* Line 1792 of yacc.c  */
#line 13181 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1886:
/* Line 1792 of yacc.c  */
#line 13183 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1887:
/* Line 1792 of yacc.c  */
#line 13185 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_FLUSH_PAGE_BITMAPS; }
    break;

  case 1888:
/* Line 1792 of yacc.c  */
#line 13189 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1889:
/* Line 1792 of yacc.c  */
#line 13190 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1890:
/* Line 1792 of yacc.c  */
#line 13195 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1891:
/* Line 1792 of yacc.c  */
#line 13200 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1894:
/* Line 1792 of yacc.c  */
#line 13209 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1895:
/* Line 1792 of yacc.c  */
#line 13210 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 1896:
/* Line 1792 of yacc.c  */
#line 13211 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1897:
/* Line 1792 of yacc.c  */
#line 13212 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1898:
/* Line 1792 of yacc.c  */
#line 13214 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type |= REFRESH_RESET_PAGE_BITMAPS; }
    break;

  case 1899:
/* Line 1792 of yacc.c  */
#line 13218 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1900:
/* Line 1792 of yacc.c  */
#line 13219 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1901:
/* Line 1792 of yacc.c  */
#line 13224 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1902:
/* Line 1792 of yacc.c  */
#line 13230 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1904:
/* Line 1792 of yacc.c  */
#line 13236 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front(new Item_uint((yyvsp[(3) - (3)].ulonglong_number)));
            lex->type= PURGE_BITMAPS_TO_LSN;
          }
    break;

  case 1906:
/* Line 1792 of yacc.c  */
#line 13247 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1907:
/* Line 1792 of yacc.c  */
#line 13251 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1908:
/* Line 1792 of yacc.c  */
#line 13261 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
            Lex->sql_command= SQLCOM_PURGE_ARCHIVE;
          }
    break;

  case 1909:
/* Line 1792 of yacc.c  */
#line 13266 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_ARCHIVE_BEFORE;
          }
    break;

  case 1910:
/* Line 1792 of yacc.c  */
#line 13278 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1911:
/* Line 1792 of yacc.c  */
#line 13287 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1912:
/* Line 1792 of yacc.c  */
#line 13288 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1913:
/* Line 1792 of yacc.c  */
#line 13289 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1914:
/* Line 1792 of yacc.c  */
#line 13296 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1915:
/* Line 1792 of yacc.c  */
#line 13307 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1916:
/* Line 1792 of yacc.c  */
#line 13319 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1917:
/* Line 1792 of yacc.c  */
#line 13329 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1918:
/* Line 1792 of yacc.c  */
#line 13339 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1919:
/* Line 1792 of yacc.c  */
#line 13343 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1920:
/* Line 1792 of yacc.c  */
#line 13347 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1921:
/* Line 1792 of yacc.c  */
#line 13348 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1922:
/* Line 1792 of yacc.c  */
#line 13352 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1923:
/* Line 1792 of yacc.c  */
#line 13353 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1924:
/* Line 1792 of yacc.c  */
#line 13357 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1925:
/* Line 1792 of yacc.c  */
#line 13359 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1926:
/* Line 1792 of yacc.c  */
#line 13370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1927:
/* Line 1792 of yacc.c  */
#line 13374 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1928:
/* Line 1792 of yacc.c  */
#line 13375 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1929:
/* Line 1792 of yacc.c  */
#line 13376 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1934:
/* Line 1792 of yacc.c  */
#line 13391 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1935:
/* Line 1792 of yacc.c  */
#line 13396 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1936:
/* Line 1792 of yacc.c  */
#line 13403 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1937:
/* Line 1792 of yacc.c  */
#line 13408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1942:
/* Line 1792 of yacc.c  */
#line 13426 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1943:
/* Line 1792 of yacc.c  */
#line 13431 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1944:
/* Line 1792 of yacc.c  */
#line 13438 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 1945:
/* Line 1792 of yacc.c  */
#line 13440 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1947:
/* Line 1792 of yacc.c  */
#line 13445 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1948:
/* Line 1792 of yacc.c  */
#line 13452 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 1949:
/* Line 1792 of yacc.c  */
#line 13454 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { }
    break;

  case 1950:
/* Line 1792 of yacc.c  */
#line 13458 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1951:
/* Line 1792 of yacc.c  */
#line 13459 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1952:
/* Line 1792 of yacc.c  */
#line 13460 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1953:
/* Line 1792 of yacc.c  */
#line 13465 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1954:
/* Line 1792 of yacc.c  */
#line 13467 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1955:
/* Line 1792 of yacc.c  */
#line 13471 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1956:
/* Line 1792 of yacc.c  */
#line 13473 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1957:
/* Line 1792 of yacc.c  */
#line 13481 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1958:
/* Line 1792 of yacc.c  */
#line 13482 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 1961:
/* Line 1792 of yacc.c  */
#line 13492 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1962:
/* Line 1792 of yacc.c  */
#line 13512 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1963:
/* Line 1792 of yacc.c  */
#line 13536 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1964:
/* Line 1792 of yacc.c  */
#line 13548 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1965:
/* Line 1792 of yacc.c  */
#line 13559 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1966:
/* Line 1792 of yacc.c  */
#line 13578 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1967:
/* Line 1792 of yacc.c  */
#line 13586 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1968:
/* Line 1792 of yacc.c  */
#line 13598 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1969:
/* Line 1792 of yacc.c  */
#line 13613 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1970:
/* Line 1792 of yacc.c  */
#line 13633 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1971:
/* Line 1792 of yacc.c  */
#line 13634 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1972:
/* Line 1792 of yacc.c  */
#line 13636 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1973:
/* Line 1792 of yacc.c  */
#line 13644 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1974:
/* Line 1792 of yacc.c  */
#line 13645 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1975:
/* Line 1792 of yacc.c  */
#line 13646 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1976:
/* Line 1792 of yacc.c  */
#line 13648 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= YYLIP;
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            lip->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1977:
/* Line 1792 of yacc.c  */
#line 13663 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1978:
/* Line 1792 of yacc.c  */
#line 13669 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1979:
/* Line 1792 of yacc.c  */
#line 13675 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1980:
/* Line 1792 of yacc.c  */
#line 13681 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1981:
/* Line 1792 of yacc.c  */
#line 13687 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value,
                                                    true, //send error
                                                    true))  //truncate
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1982:
/* Line 1792 of yacc.c  */
#line 13718 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value,
                                                    true, //send error
                                                    true)) //truncate
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1983:
/* Line 1792 of yacc.c  */
#line 13751 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1984:
/* Line 1792 of yacc.c  */
#line 13761 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1985:
/* Line 1792 of yacc.c  */
#line 13771 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1986:
/* Line 1792 of yacc.c  */
#line 13777 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1987:
/* Line 1792 of yacc.c  */
#line 13786 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1988:
/* Line 1792 of yacc.c  */
#line 13798 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1989:
/* Line 1792 of yacc.c  */
#line 13804 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1990:
/* Line 1792 of yacc.c  */
#line 13810 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1991:
/* Line 1792 of yacc.c  */
#line 13825 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1992:
/* Line 1792 of yacc.c  */
#line 13826 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1993:
/* Line 1792 of yacc.c  */
#line 13831 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1994:
/* Line 1792 of yacc.c  */
#line 13840 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1995:
/* Line 1792 of yacc.c  */
#line 13855 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1996:
/* Line 1792 of yacc.c  */
#line 13860 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1997:
/* Line 1792 of yacc.c  */
#line 13910 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1998:
/* Line 1792 of yacc.c  */
#line 13915 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1999:
/* Line 1792 of yacc.c  */
#line 13932 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2000:
/* Line 1792 of yacc.c  */
#line 13937 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_cur_instr_trig_field_items.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2001:
/* Line 1792 of yacc.c  */
#line 14017 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2002:
/* Line 1792 of yacc.c  */
#line 14042 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2003:
/* Line 1792 of yacc.c  */
#line 14072 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2004:
/* Line 1792 of yacc.c  */
#line 14074 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2005:
/* Line 1792 of yacc.c  */
#line 14090 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2006:
/* Line 1792 of yacc.c  */
#line 14099 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2007:
/* Line 1792 of yacc.c  */
#line 14104 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2008:
/* Line 1792 of yacc.c  */
#line 14110 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2009:
/* Line 1792 of yacc.c  */
#line 14116 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2010:
/* Line 1792 of yacc.c  */
#line 14126 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2011:
/* Line 1792 of yacc.c  */
#line 14132 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2012:
/* Line 1792 of yacc.c  */
#line 14141 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2013:
/* Line 1792 of yacc.c  */
#line 14150 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2014:
/* Line 1792 of yacc.c  */
#line 14152 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2015:
/* Line 1792 of yacc.c  */
#line 14182 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 2016:
/* Line 1792 of yacc.c  */
#line 14195 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2017:
/* Line 1792 of yacc.c  */
#line 14211 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2018:
/* Line 1792 of yacc.c  */
#line 14227 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2019:
/* Line 1792 of yacc.c  */
#line 14243 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2020:
/* Line 1792 of yacc.c  */
#line 14245 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2021:
/* Line 1792 of yacc.c  */
#line 14255 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2022:
/* Line 1792 of yacc.c  */
#line 14257 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2023:
/* Line 1792 of yacc.c  */
#line 14267 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2024:
/* Line 1792 of yacc.c  */
#line 14268 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2025:
/* Line 1792 of yacc.c  */
#line 14269 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2026:
/* Line 1792 of yacc.c  */
#line 14274 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2027:
/* Line 1792 of yacc.c  */
#line 14301 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 2028:
/* Line 1792 of yacc.c  */
#line 14334 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 2029:
/* Line 1792 of yacc.c  */
#line 14348 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2030:
/* Line 1792 of yacc.c  */
#line 14349 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2031:
/* Line 1792 of yacc.c  */
#line 14350 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2032:
/* Line 1792 of yacc.c  */
#line 14351 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2033:
/* Line 1792 of yacc.c  */
#line 14352 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2034:
/* Line 1792 of yacc.c  */
#line 14353 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2035:
/* Line 1792 of yacc.c  */
#line 14354 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2036:
/* Line 1792 of yacc.c  */
#line 14355 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2037:
/* Line 1792 of yacc.c  */
#line 14356 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2038:
/* Line 1792 of yacc.c  */
#line 14357 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2039:
/* Line 1792 of yacc.c  */
#line 14358 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2040:
/* Line 1792 of yacc.c  */
#line 14359 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2041:
/* Line 1792 of yacc.c  */
#line 14360 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2042:
/* Line 1792 of yacc.c  */
#line 14361 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2043:
/* Line 1792 of yacc.c  */
#line 14362 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2044:
/* Line 1792 of yacc.c  */
#line 14363 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2045:
/* Line 1792 of yacc.c  */
#line 14364 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2046:
/* Line 1792 of yacc.c  */
#line 14365 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2047:
/* Line 1792 of yacc.c  */
#line 14366 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2048:
/* Line 1792 of yacc.c  */
#line 14367 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2049:
/* Line 1792 of yacc.c  */
#line 14368 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2050:
/* Line 1792 of yacc.c  */
#line 14369 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2051:
/* Line 1792 of yacc.c  */
#line 14370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2052:
/* Line 1792 of yacc.c  */
#line 14371 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2053:
/* Line 1792 of yacc.c  */
#line 14372 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2054:
/* Line 1792 of yacc.c  */
#line 14373 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2055:
/* Line 1792 of yacc.c  */
#line 14374 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2056:
/* Line 1792 of yacc.c  */
#line 14375 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2057:
/* Line 1792 of yacc.c  */
#line 14376 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2058:
/* Line 1792 of yacc.c  */
#line 14377 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2059:
/* Line 1792 of yacc.c  */
#line 14378 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2060:
/* Line 1792 of yacc.c  */
#line 14379 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2061:
/* Line 1792 of yacc.c  */
#line 14380 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2062:
/* Line 1792 of yacc.c  */
#line 14381 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2063:
/* Line 1792 of yacc.c  */
#line 14382 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2064:
/* Line 1792 of yacc.c  */
#line 14383 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2065:
/* Line 1792 of yacc.c  */
#line 14384 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2066:
/* Line 1792 of yacc.c  */
#line 14385 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2067:
/* Line 1792 of yacc.c  */
#line 14386 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2068:
/* Line 1792 of yacc.c  */
#line 14387 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2069:
/* Line 1792 of yacc.c  */
#line 14388 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2070:
/* Line 1792 of yacc.c  */
#line 14389 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2071:
/* Line 1792 of yacc.c  */
#line 14390 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2072:
/* Line 1792 of yacc.c  */
#line 14391 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2073:
/* Line 1792 of yacc.c  */
#line 14392 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2074:
/* Line 1792 of yacc.c  */
#line 14393 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2075:
/* Line 1792 of yacc.c  */
#line 14394 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2076:
/* Line 1792 of yacc.c  */
#line 14395 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2077:
/* Line 1792 of yacc.c  */
#line 14396 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2078:
/* Line 1792 of yacc.c  */
#line 14397 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2079:
/* Line 1792 of yacc.c  */
#line 14407 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2080:
/* Line 1792 of yacc.c  */
#line 14408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2081:
/* Line 1792 of yacc.c  */
#line 14409 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2082:
/* Line 1792 of yacc.c  */
#line 14410 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2083:
/* Line 1792 of yacc.c  */
#line 14411 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2084:
/* Line 1792 of yacc.c  */
#line 14412 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2085:
/* Line 1792 of yacc.c  */
#line 14413 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2086:
/* Line 1792 of yacc.c  */
#line 14414 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2087:
/* Line 1792 of yacc.c  */
#line 14415 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2088:
/* Line 1792 of yacc.c  */
#line 14416 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2089:
/* Line 1792 of yacc.c  */
#line 14417 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2090:
/* Line 1792 of yacc.c  */
#line 14418 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2091:
/* Line 1792 of yacc.c  */
#line 14419 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2092:
/* Line 1792 of yacc.c  */
#line 14420 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2093:
/* Line 1792 of yacc.c  */
#line 14421 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2094:
/* Line 1792 of yacc.c  */
#line 14422 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2095:
/* Line 1792 of yacc.c  */
#line 14423 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2096:
/* Line 1792 of yacc.c  */
#line 14424 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2097:
/* Line 1792 of yacc.c  */
#line 14425 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2098:
/* Line 1792 of yacc.c  */
#line 14426 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2099:
/* Line 1792 of yacc.c  */
#line 14427 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2100:
/* Line 1792 of yacc.c  */
#line 14428 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2101:
/* Line 1792 of yacc.c  */
#line 14429 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2102:
/* Line 1792 of yacc.c  */
#line 14430 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2103:
/* Line 1792 of yacc.c  */
#line 14431 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2104:
/* Line 1792 of yacc.c  */
#line 14432 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2105:
/* Line 1792 of yacc.c  */
#line 14433 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2106:
/* Line 1792 of yacc.c  */
#line 14434 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2107:
/* Line 1792 of yacc.c  */
#line 14435 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2108:
/* Line 1792 of yacc.c  */
#line 14436 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2109:
/* Line 1792 of yacc.c  */
#line 14437 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2110:
/* Line 1792 of yacc.c  */
#line 14438 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2111:
/* Line 1792 of yacc.c  */
#line 14439 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2112:
/* Line 1792 of yacc.c  */
#line 14440 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2113:
/* Line 1792 of yacc.c  */
#line 14441 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2114:
/* Line 1792 of yacc.c  */
#line 14442 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2115:
/* Line 1792 of yacc.c  */
#line 14443 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2116:
/* Line 1792 of yacc.c  */
#line 14444 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2117:
/* Line 1792 of yacc.c  */
#line 14445 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2118:
/* Line 1792 of yacc.c  */
#line 14446 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2119:
/* Line 1792 of yacc.c  */
#line 14447 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2120:
/* Line 1792 of yacc.c  */
#line 14448 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2121:
/* Line 1792 of yacc.c  */
#line 14449 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2122:
/* Line 1792 of yacc.c  */
#line 14450 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2123:
/* Line 1792 of yacc.c  */
#line 14451 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2124:
/* Line 1792 of yacc.c  */
#line 14452 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2125:
/* Line 1792 of yacc.c  */
#line 14453 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2126:
/* Line 1792 of yacc.c  */
#line 14454 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2127:
/* Line 1792 of yacc.c  */
#line 14455 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2128:
/* Line 1792 of yacc.c  */
#line 14460 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2129:
/* Line 1792 of yacc.c  */
#line 14461 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2130:
/* Line 1792 of yacc.c  */
#line 14462 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2131:
/* Line 1792 of yacc.c  */
#line 14463 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2132:
/* Line 1792 of yacc.c  */
#line 14464 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2133:
/* Line 1792 of yacc.c  */
#line 14465 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2134:
/* Line 1792 of yacc.c  */
#line 14466 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2135:
/* Line 1792 of yacc.c  */
#line 14467 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2136:
/* Line 1792 of yacc.c  */
#line 14468 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2137:
/* Line 1792 of yacc.c  */
#line 14469 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2138:
/* Line 1792 of yacc.c  */
#line 14470 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2139:
/* Line 1792 of yacc.c  */
#line 14471 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2140:
/* Line 1792 of yacc.c  */
#line 14472 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2141:
/* Line 1792 of yacc.c  */
#line 14473 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2142:
/* Line 1792 of yacc.c  */
#line 14474 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2143:
/* Line 1792 of yacc.c  */
#line 14475 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2144:
/* Line 1792 of yacc.c  */
#line 14476 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2145:
/* Line 1792 of yacc.c  */
#line 14477 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2146:
/* Line 1792 of yacc.c  */
#line 14478 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2147:
/* Line 1792 of yacc.c  */
#line 14479 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2148:
/* Line 1792 of yacc.c  */
#line 14480 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2149:
/* Line 1792 of yacc.c  */
#line 14481 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2150:
/* Line 1792 of yacc.c  */
#line 14482 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2151:
/* Line 1792 of yacc.c  */
#line 14483 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2152:
/* Line 1792 of yacc.c  */
#line 14484 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2153:
/* Line 1792 of yacc.c  */
#line 14485 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2154:
/* Line 1792 of yacc.c  */
#line 14486 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2155:
/* Line 1792 of yacc.c  */
#line 14487 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2156:
/* Line 1792 of yacc.c  */
#line 14488 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2157:
/* Line 1792 of yacc.c  */
#line 14489 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2158:
/* Line 1792 of yacc.c  */
#line 14490 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2159:
/* Line 1792 of yacc.c  */
#line 14491 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2160:
/* Line 1792 of yacc.c  */
#line 14492 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2161:
/* Line 1792 of yacc.c  */
#line 14493 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2162:
/* Line 1792 of yacc.c  */
#line 14494 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2163:
/* Line 1792 of yacc.c  */
#line 14495 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2164:
/* Line 1792 of yacc.c  */
#line 14496 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2165:
/* Line 1792 of yacc.c  */
#line 14497 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2166:
/* Line 1792 of yacc.c  */
#line 14498 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2167:
/* Line 1792 of yacc.c  */
#line 14499 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2168:
/* Line 1792 of yacc.c  */
#line 14500 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2169:
/* Line 1792 of yacc.c  */
#line 14501 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2170:
/* Line 1792 of yacc.c  */
#line 14502 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2171:
/* Line 1792 of yacc.c  */
#line 14503 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2172:
/* Line 1792 of yacc.c  */
#line 14504 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2173:
/* Line 1792 of yacc.c  */
#line 14505 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2174:
/* Line 1792 of yacc.c  */
#line 14506 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2175:
/* Line 1792 of yacc.c  */
#line 14507 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2176:
/* Line 1792 of yacc.c  */
#line 14508 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2177:
/* Line 1792 of yacc.c  */
#line 14509 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2178:
/* Line 1792 of yacc.c  */
#line 14510 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2179:
/* Line 1792 of yacc.c  */
#line 14511 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2180:
/* Line 1792 of yacc.c  */
#line 14512 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2181:
/* Line 1792 of yacc.c  */
#line 14513 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2182:
/* Line 1792 of yacc.c  */
#line 14514 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2183:
/* Line 1792 of yacc.c  */
#line 14515 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2184:
/* Line 1792 of yacc.c  */
#line 14516 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2185:
/* Line 1792 of yacc.c  */
#line 14517 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2186:
/* Line 1792 of yacc.c  */
#line 14518 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2187:
/* Line 1792 of yacc.c  */
#line 14519 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2188:
/* Line 1792 of yacc.c  */
#line 14520 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2189:
/* Line 1792 of yacc.c  */
#line 14521 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2190:
/* Line 1792 of yacc.c  */
#line 14522 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2191:
/* Line 1792 of yacc.c  */
#line 14523 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2192:
/* Line 1792 of yacc.c  */
#line 14524 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2193:
/* Line 1792 of yacc.c  */
#line 14525 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2194:
/* Line 1792 of yacc.c  */
#line 14526 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2195:
/* Line 1792 of yacc.c  */
#line 14527 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2196:
/* Line 1792 of yacc.c  */
#line 14528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2197:
/* Line 1792 of yacc.c  */
#line 14529 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2198:
/* Line 1792 of yacc.c  */
#line 14530 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2199:
/* Line 1792 of yacc.c  */
#line 14531 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2200:
/* Line 1792 of yacc.c  */
#line 14532 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2201:
/* Line 1792 of yacc.c  */
#line 14533 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2202:
/* Line 1792 of yacc.c  */
#line 14534 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2203:
/* Line 1792 of yacc.c  */
#line 14535 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2204:
/* Line 1792 of yacc.c  */
#line 14536 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2205:
/* Line 1792 of yacc.c  */
#line 14537 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2206:
/* Line 1792 of yacc.c  */
#line 14538 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2207:
/* Line 1792 of yacc.c  */
#line 14539 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2208:
/* Line 1792 of yacc.c  */
#line 14540 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2209:
/* Line 1792 of yacc.c  */
#line 14541 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2210:
/* Line 1792 of yacc.c  */
#line 14542 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2211:
/* Line 1792 of yacc.c  */
#line 14543 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2212:
/* Line 1792 of yacc.c  */
#line 14544 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2213:
/* Line 1792 of yacc.c  */
#line 14545 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2214:
/* Line 1792 of yacc.c  */
#line 14546 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2215:
/* Line 1792 of yacc.c  */
#line 14547 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2216:
/* Line 1792 of yacc.c  */
#line 14548 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2217:
/* Line 1792 of yacc.c  */
#line 14549 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2218:
/* Line 1792 of yacc.c  */
#line 14550 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2219:
/* Line 1792 of yacc.c  */
#line 14551 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2220:
/* Line 1792 of yacc.c  */
#line 14552 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2221:
/* Line 1792 of yacc.c  */
#line 14553 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2222:
/* Line 1792 of yacc.c  */
#line 14554 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2223:
/* Line 1792 of yacc.c  */
#line 14555 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2224:
/* Line 1792 of yacc.c  */
#line 14556 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2225:
/* Line 1792 of yacc.c  */
#line 14557 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2226:
/* Line 1792 of yacc.c  */
#line 14558 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2227:
/* Line 1792 of yacc.c  */
#line 14559 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2228:
/* Line 1792 of yacc.c  */
#line 14560 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2229:
/* Line 1792 of yacc.c  */
#line 14561 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2230:
/* Line 1792 of yacc.c  */
#line 14562 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2231:
/* Line 1792 of yacc.c  */
#line 14563 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2232:
/* Line 1792 of yacc.c  */
#line 14564 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2233:
/* Line 1792 of yacc.c  */
#line 14565 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2234:
/* Line 1792 of yacc.c  */
#line 14566 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2235:
/* Line 1792 of yacc.c  */
#line 14567 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2236:
/* Line 1792 of yacc.c  */
#line 14568 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2237:
/* Line 1792 of yacc.c  */
#line 14569 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2238:
/* Line 1792 of yacc.c  */
#line 14570 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2239:
/* Line 1792 of yacc.c  */
#line 14571 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2240:
/* Line 1792 of yacc.c  */
#line 14572 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2241:
/* Line 1792 of yacc.c  */
#line 14573 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2242:
/* Line 1792 of yacc.c  */
#line 14574 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2243:
/* Line 1792 of yacc.c  */
#line 14575 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2244:
/* Line 1792 of yacc.c  */
#line 14576 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2245:
/* Line 1792 of yacc.c  */
#line 14577 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2246:
/* Line 1792 of yacc.c  */
#line 14578 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2247:
/* Line 1792 of yacc.c  */
#line 14579 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2248:
/* Line 1792 of yacc.c  */
#line 14580 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2249:
/* Line 1792 of yacc.c  */
#line 14581 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2250:
/* Line 1792 of yacc.c  */
#line 14582 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2251:
/* Line 1792 of yacc.c  */
#line 14583 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2252:
/* Line 1792 of yacc.c  */
#line 14584 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2253:
/* Line 1792 of yacc.c  */
#line 14585 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2254:
/* Line 1792 of yacc.c  */
#line 14586 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2255:
/* Line 1792 of yacc.c  */
#line 14587 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2256:
/* Line 1792 of yacc.c  */
#line 14588 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2257:
/* Line 1792 of yacc.c  */
#line 14589 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2258:
/* Line 1792 of yacc.c  */
#line 14590 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2259:
/* Line 1792 of yacc.c  */
#line 14591 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2260:
/* Line 1792 of yacc.c  */
#line 14592 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2261:
/* Line 1792 of yacc.c  */
#line 14593 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2262:
/* Line 1792 of yacc.c  */
#line 14594 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2263:
/* Line 1792 of yacc.c  */
#line 14595 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2264:
/* Line 1792 of yacc.c  */
#line 14596 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2265:
/* Line 1792 of yacc.c  */
#line 14597 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2266:
/* Line 1792 of yacc.c  */
#line 14598 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2267:
/* Line 1792 of yacc.c  */
#line 14599 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2268:
/* Line 1792 of yacc.c  */
#line 14600 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2269:
/* Line 1792 of yacc.c  */
#line 14601 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2270:
/* Line 1792 of yacc.c  */
#line 14602 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2271:
/* Line 1792 of yacc.c  */
#line 14603 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2272:
/* Line 1792 of yacc.c  */
#line 14604 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2273:
/* Line 1792 of yacc.c  */
#line 14605 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2274:
/* Line 1792 of yacc.c  */
#line 14606 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2275:
/* Line 1792 of yacc.c  */
#line 14607 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2276:
/* Line 1792 of yacc.c  */
#line 14608 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2277:
/* Line 1792 of yacc.c  */
#line 14609 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2278:
/* Line 1792 of yacc.c  */
#line 14610 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2279:
/* Line 1792 of yacc.c  */
#line 14611 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2280:
/* Line 1792 of yacc.c  */
#line 14612 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2281:
/* Line 1792 of yacc.c  */
#line 14613 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2282:
/* Line 1792 of yacc.c  */
#line 14614 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2283:
/* Line 1792 of yacc.c  */
#line 14615 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2284:
/* Line 1792 of yacc.c  */
#line 14616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2285:
/* Line 1792 of yacc.c  */
#line 14617 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2286:
/* Line 1792 of yacc.c  */
#line 14618 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2287:
/* Line 1792 of yacc.c  */
#line 14619 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2288:
/* Line 1792 of yacc.c  */
#line 14620 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2289:
/* Line 1792 of yacc.c  */
#line 14621 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2290:
/* Line 1792 of yacc.c  */
#line 14622 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2291:
/* Line 1792 of yacc.c  */
#line 14623 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2292:
/* Line 1792 of yacc.c  */
#line 14624 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2293:
/* Line 1792 of yacc.c  */
#line 14625 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2294:
/* Line 1792 of yacc.c  */
#line 14626 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2295:
/* Line 1792 of yacc.c  */
#line 14627 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2296:
/* Line 1792 of yacc.c  */
#line 14628 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2297:
/* Line 1792 of yacc.c  */
#line 14629 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2298:
/* Line 1792 of yacc.c  */
#line 14630 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2299:
/* Line 1792 of yacc.c  */
#line 14631 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2300:
/* Line 1792 of yacc.c  */
#line 14632 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2301:
/* Line 1792 of yacc.c  */
#line 14633 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2302:
/* Line 1792 of yacc.c  */
#line 14634 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2303:
/* Line 1792 of yacc.c  */
#line 14635 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2304:
/* Line 1792 of yacc.c  */
#line 14636 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2305:
/* Line 1792 of yacc.c  */
#line 14637 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2306:
/* Line 1792 of yacc.c  */
#line 14638 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2307:
/* Line 1792 of yacc.c  */
#line 14639 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2308:
/* Line 1792 of yacc.c  */
#line 14640 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2309:
/* Line 1792 of yacc.c  */
#line 14641 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2310:
/* Line 1792 of yacc.c  */
#line 14642 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2311:
/* Line 1792 of yacc.c  */
#line 14643 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2312:
/* Line 1792 of yacc.c  */
#line 14644 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2313:
/* Line 1792 of yacc.c  */
#line 14645 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2314:
/* Line 1792 of yacc.c  */
#line 14646 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2315:
/* Line 1792 of yacc.c  */
#line 14647 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2316:
/* Line 1792 of yacc.c  */
#line 14648 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2317:
/* Line 1792 of yacc.c  */
#line 14649 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2318:
/* Line 1792 of yacc.c  */
#line 14650 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2319:
/* Line 1792 of yacc.c  */
#line 14651 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2320:
/* Line 1792 of yacc.c  */
#line 14652 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2321:
/* Line 1792 of yacc.c  */
#line 14653 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2322:
/* Line 1792 of yacc.c  */
#line 14654 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2323:
/* Line 1792 of yacc.c  */
#line 14655 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2324:
/* Line 1792 of yacc.c  */
#line 14656 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2325:
/* Line 1792 of yacc.c  */
#line 14657 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2326:
/* Line 1792 of yacc.c  */
#line 14658 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2327:
/* Line 1792 of yacc.c  */
#line 14659 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2328:
/* Line 1792 of yacc.c  */
#line 14660 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2329:
/* Line 1792 of yacc.c  */
#line 14661 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2330:
/* Line 1792 of yacc.c  */
#line 14662 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2331:
/* Line 1792 of yacc.c  */
#line 14663 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2332:
/* Line 1792 of yacc.c  */
#line 14664 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2333:
/* Line 1792 of yacc.c  */
#line 14665 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2334:
/* Line 1792 of yacc.c  */
#line 14666 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2335:
/* Line 1792 of yacc.c  */
#line 14667 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2336:
/* Line 1792 of yacc.c  */
#line 14668 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2337:
/* Line 1792 of yacc.c  */
#line 14669 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2338:
/* Line 1792 of yacc.c  */
#line 14670 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2339:
/* Line 1792 of yacc.c  */
#line 14671 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2340:
/* Line 1792 of yacc.c  */
#line 14672 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2341:
/* Line 1792 of yacc.c  */
#line 14673 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2342:
/* Line 1792 of yacc.c  */
#line 14674 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2343:
/* Line 1792 of yacc.c  */
#line 14675 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2344:
/* Line 1792 of yacc.c  */
#line 14676 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2345:
/* Line 1792 of yacc.c  */
#line 14677 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2346:
/* Line 1792 of yacc.c  */
#line 14678 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2347:
/* Line 1792 of yacc.c  */
#line 14679 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2348:
/* Line 1792 of yacc.c  */
#line 14680 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2349:
/* Line 1792 of yacc.c  */
#line 14681 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2350:
/* Line 1792 of yacc.c  */
#line 14682 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2351:
/* Line 1792 of yacc.c  */
#line 14683 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2352:
/* Line 1792 of yacc.c  */
#line 14684 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2353:
/* Line 1792 of yacc.c  */
#line 14685 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2354:
/* Line 1792 of yacc.c  */
#line 14686 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2355:
/* Line 1792 of yacc.c  */
#line 14687 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2356:
/* Line 1792 of yacc.c  */
#line 14688 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2357:
/* Line 1792 of yacc.c  */
#line 14689 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2358:
/* Line 1792 of yacc.c  */
#line 14690 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2359:
/* Line 1792 of yacc.c  */
#line 14691 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2360:
/* Line 1792 of yacc.c  */
#line 14692 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2361:
/* Line 1792 of yacc.c  */
#line 14693 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2362:
/* Line 1792 of yacc.c  */
#line 14694 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2363:
/* Line 1792 of yacc.c  */
#line 14695 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2364:
/* Line 1792 of yacc.c  */
#line 14696 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2365:
/* Line 1792 of yacc.c  */
#line 14697 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2366:
/* Line 1792 of yacc.c  */
#line 14698 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2367:
/* Line 1792 of yacc.c  */
#line 14699 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2368:
/* Line 1792 of yacc.c  */
#line 14700 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2369:
/* Line 1792 of yacc.c  */
#line 14701 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2370:
/* Line 1792 of yacc.c  */
#line 14702 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2371:
/* Line 1792 of yacc.c  */
#line 14703 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2372:
/* Line 1792 of yacc.c  */
#line 14704 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2373:
/* Line 1792 of yacc.c  */
#line 14705 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2374:
/* Line 1792 of yacc.c  */
#line 14706 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2375:
/* Line 1792 of yacc.c  */
#line 14707 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2376:
/* Line 1792 of yacc.c  */
#line 14708 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2377:
/* Line 1792 of yacc.c  */
#line 14709 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2378:
/* Line 1792 of yacc.c  */
#line 14710 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2379:
/* Line 1792 of yacc.c  */
#line 14711 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2380:
/* Line 1792 of yacc.c  */
#line 14712 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2381:
/* Line 1792 of yacc.c  */
#line 14713 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2382:
/* Line 1792 of yacc.c  */
#line 14714 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2383:
/* Line 1792 of yacc.c  */
#line 14715 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2384:
/* Line 1792 of yacc.c  */
#line 14716 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2385:
/* Line 1792 of yacc.c  */
#line 14717 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2386:
/* Line 1792 of yacc.c  */
#line 14718 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2387:
/* Line 1792 of yacc.c  */
#line 14719 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2388:
/* Line 1792 of yacc.c  */
#line 14720 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2389:
/* Line 1792 of yacc.c  */
#line 14721 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2390:
/* Line 1792 of yacc.c  */
#line 14722 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2391:
/* Line 1792 of yacc.c  */
#line 14723 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2392:
/* Line 1792 of yacc.c  */
#line 14724 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2393:
/* Line 1792 of yacc.c  */
#line 14725 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2394:
/* Line 1792 of yacc.c  */
#line 14726 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2395:
/* Line 1792 of yacc.c  */
#line 14727 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2396:
/* Line 1792 of yacc.c  */
#line 14728 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2397:
/* Line 1792 of yacc.c  */
#line 14740 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2398:
/* Line 1792 of yacc.c  */
#line 14752 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2399:
/* Line 1792 of yacc.c  */
#line 14754 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
	    /* Don't clear var_list in the case of recursive statement */
	    if (!lex->set_statement)
              lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            lex->set_statement= true;
            sp_head *sp= lex->sphead;
            if (sp && !sp->is_invoked())
            {
              sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_START);
              sp->m_parser_data.set_option_start_ptr(YY_TOKEN_END);
            }
          }
    break;

  case 2400:
/* Line 1792 of yacc.c  */
#line 14772 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2403:
/* Line 1792 of yacc.c  */
#line 14787 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2405:
/* Line 1792 of yacc.c  */
#line 14793 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2406:
/* Line 1792 of yacc.c  */
#line 14797 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2407:
/* Line 1792 of yacc.c  */
#line 14802 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2409:
/* Line 1792 of yacc.c  */
#line 14812 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2411:
/* Line 1792 of yacc.c  */
#line 14818 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2414:
/* Line 1792 of yacc.c  */
#line 14832 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2415:
/* Line 1792 of yacc.c  */
#line 14836 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2416:
/* Line 1792 of yacc.c  */
#line 14841 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2417:
/* Line 1792 of yacc.c  */
#line 14845 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2418:
/* Line 1792 of yacc.c  */
#line 14854 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2421:
/* Line 1792 of yacc.c  */
#line 14862 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2422:
/* Line 1792 of yacc.c  */
#line 14863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2423:
/* Line 1792 of yacc.c  */
#line 14864 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2424:
/* Line 1792 of yacc.c  */
#line 14868 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2425:
/* Line 1792 of yacc.c  */
#line 14869 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2426:
/* Line 1792 of yacc.c  */
#line 14870 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2427:
/* Line 1792 of yacc.c  */
#line 14871 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2428:
/* Line 1792 of yacc.c  */
#line 14875 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2429:
/* Line 1792 of yacc.c  */
#line 14876 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2430:
/* Line 1792 of yacc.c  */
#line 14877 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2431:
/* Line 1792 of yacc.c  */
#line 14878 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2432:
/* Line 1792 of yacc.c  */
#line 14884 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            /*
              Ignore SET STATEMENT variables list on slaves because system
              variables are not replicated except certain variables set the
              values of whose are written to binlog event header and nothing
              additional is required to set them.
	    */
            if (!thd->slave_thread || !lex->set_statement)
	    {
              if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
              {
                /* It is a system variable. */
                if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                  MYSQL_YYABORT;
              }
              else
              {
                /*
                  Not in trigger assigning value to new row,
                  and option_type preceeding local variable is illegal.
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
	  }
    break;

  case 2433:
/* Line 1792 of yacc.c  */
#line 14917 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2434:
/* Line 1792 of yacc.c  */
#line 14924 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2435:
/* Line 1792 of yacc.c  */
#line 15017 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2436:
/* Line 1792 of yacc.c  */
#line 15028 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2437:
/* Line 1792 of yacc.c  */
#line 15041 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2438:
/* Line 1792 of yacc.c  */
#line 15057 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2439:
/* Line 1792 of yacc.c  */
#line 15070 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2440:
/* Line 1792 of yacc.c  */
#line 15092 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2441:
/* Line 1792 of yacc.c  */
#line 15127 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2442:
/* Line 1792 of yacc.c  */
#line 15169 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2443:
/* Line 1792 of yacc.c  */
#line 15197 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2444:
/* Line 1792 of yacc.c  */
#line 15243 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2449:
/* Line 1792 of yacc.c  */
#line 15264 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2450:
/* Line 1792 of yacc.c  */
#line 15282 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2451:
/* Line 1792 of yacc.c  */
#line 15299 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2452:
/* Line 1792 of yacc.c  */
#line 15300 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2453:
/* Line 1792 of yacc.c  */
#line 15304 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2454:
/* Line 1792 of yacc.c  */
#line 15305 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2455:
/* Line 1792 of yacc.c  */
#line 15306 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2456:
/* Line 1792 of yacc.c  */
#line 15307 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2457:
/* Line 1792 of yacc.c  */
#line 15311 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2458:
/* Line 1792 of yacc.c  */
#line 15313 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2459:
/* Line 1792 of yacc.c  */
#line 15331 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
		    WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2460:
/* Line 1792 of yacc.c  */
#line 15344 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2461:
/* Line 1792 of yacc.c  */
#line 15345 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2462:
/* Line 1792 of yacc.c  */
#line 15347 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2463:
/* Line 1792 of yacc.c  */
#line 15353 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2464:
/* Line 1792 of yacc.c  */
#line 15359 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2465:
/* Line 1792 of yacc.c  */
#line 15370 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2466:
/* Line 1792 of yacc.c  */
#line 15381 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_BINLOG_FOR_BACKUP;
          }
    break;

  case 2467:
/* Line 1792 of yacc.c  */
#line 15385 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_TABLES_FOR_BACKUP;
          }
    break;

  case 2468:
/* Line 1792 of yacc.c  */
#line 15389 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2469:
/* Line 1792 of yacc.c  */
#line 15393 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2474:
/* Line 1792 of yacc.c  */
#line 15408 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2475:
/* Line 1792 of yacc.c  */
#line 15420 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2476:
/* Line 1792 of yacc.c  */
#line 15421 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2477:
/* Line 1792 of yacc.c  */
#line 15423 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2478:
/* Line 1792 of yacc.c  */
#line 15427 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2479:
/* Line 1792 of yacc.c  */
#line 15432 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2480:
/* Line 1792 of yacc.c  */
#line 15443 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_UNLOCK_BINLOG;
          }
    break;

  case 2481:
/* Line 1792 of yacc.c  */
#line 15447 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2482:
/* Line 1792 of yacc.c  */
#line 15458 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2483:
/* Line 1792 of yacc.c  */
#line 15474 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2484:
/* Line 1792 of yacc.c  */
#line 15490 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2485:
/* Line 1792 of yacc.c  */
#line 15508 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2486:
/* Line 1792 of yacc.c  */
#line 15528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2487:
/* Line 1792 of yacc.c  */
#line 15529 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2488:
/* Line 1792 of yacc.c  */
#line 15533 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2489:
/* Line 1792 of yacc.c  */
#line 15534 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2490:
/* Line 1792 of yacc.c  */
#line 15538 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2491:
/* Line 1792 of yacc.c  */
#line 15539 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2492:
/* Line 1792 of yacc.c  */
#line 15540 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2493:
/* Line 1792 of yacc.c  */
#line 15541 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2494:
/* Line 1792 of yacc.c  */
#line 15543 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2495:
/* Line 1792 of yacc.c  */
#line 15550 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2496:
/* Line 1792 of yacc.c  */
#line 15556 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2497:
/* Line 1792 of yacc.c  */
#line 15557 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2498:
/* Line 1792 of yacc.c  */
#line 15558 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2499:
/* Line 1792 of yacc.c  */
#line 15559 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2500:
/* Line 1792 of yacc.c  */
#line 15560 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2501:
/* Line 1792 of yacc.c  */
#line 15566 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2502:
/* Line 1792 of yacc.c  */
#line 15567 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2503:
/* Line 1792 of yacc.c  */
#line 15572 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2504:
/* Line 1792 of yacc.c  */
#line 15577 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2505:
/* Line 1792 of yacc.c  */
#line 15587 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2506:
/* Line 1792 of yacc.c  */
#line 15597 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2507:
/* Line 1792 of yacc.c  */
#line 15601 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2508:
/* Line 1792 of yacc.c  */
#line 15609 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2509:
/* Line 1792 of yacc.c  */
#line 15610 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2510:
/* Line 1792 of yacc.c  */
#line 15616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2511:
/* Line 1792 of yacc.c  */
#line 15622 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2512:
/* Line 1792 of yacc.c  */
#line 15633 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2513:
/* Line 1792 of yacc.c  */
#line 15643 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2516:
/* Line 1792 of yacc.c  */
#line 15657 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2517:
/* Line 1792 of yacc.c  */
#line 15664 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2522:
/* Line 1792 of yacc.c  */
#line 15682 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2523:
/* Line 1792 of yacc.c  */
#line 15683 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2524:
/* Line 1792 of yacc.c  */
#line 15685 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2525:
/* Line 1792 of yacc.c  */
#line 15686 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2526:
/* Line 1792 of yacc.c  */
#line 15688 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2527:
/* Line 1792 of yacc.c  */
#line 15689 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2528:
/* Line 1792 of yacc.c  */
#line 15691 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2529:
/* Line 1792 of yacc.c  */
#line 15692 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2530:
/* Line 1792 of yacc.c  */
#line 15693 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2531:
/* Line 1792 of yacc.c  */
#line 15694 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2532:
/* Line 1792 of yacc.c  */
#line 15695 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2533:
/* Line 1792 of yacc.c  */
#line 15696 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2534:
/* Line 1792 of yacc.c  */
#line 15697 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2535:
/* Line 1792 of yacc.c  */
#line 15698 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2536:
/* Line 1792 of yacc.c  */
#line 15699 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2537:
/* Line 1792 of yacc.c  */
#line 15700 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2538:
/* Line 1792 of yacc.c  */
#line 15701 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2539:
/* Line 1792 of yacc.c  */
#line 15702 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2540:
/* Line 1792 of yacc.c  */
#line 15703 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2541:
/* Line 1792 of yacc.c  */
#line 15704 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2542:
/* Line 1792 of yacc.c  */
#line 15705 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2543:
/* Line 1792 of yacc.c  */
#line 15706 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2544:
/* Line 1792 of yacc.c  */
#line 15707 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2545:
/* Line 1792 of yacc.c  */
#line 15708 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2546:
/* Line 1792 of yacc.c  */
#line 15709 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2547:
/* Line 1792 of yacc.c  */
#line 15710 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2548:
/* Line 1792 of yacc.c  */
#line 15711 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2549:
/* Line 1792 of yacc.c  */
#line 15712 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2550:
/* Line 1792 of yacc.c  */
#line 15713 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2551:
/* Line 1792 of yacc.c  */
#line 15714 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2552:
/* Line 1792 of yacc.c  */
#line 15715 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2553:
/* Line 1792 of yacc.c  */
#line 15716 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2554:
/* Line 1792 of yacc.c  */
#line 15717 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2555:
/* Line 1792 of yacc.c  */
#line 15718 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2556:
/* Line 1792 of yacc.c  */
#line 15722 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2557:
/* Line 1792 of yacc.c  */
#line 15723 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2560:
/* Line 1792 of yacc.c  */
#line 15733 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2561:
/* Line 1792 of yacc.c  */
#line 15743 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2562:
/* Line 1792 of yacc.c  */
#line 15753 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2563:
/* Line 1792 of yacc.c  */
#line 15766 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2564:
/* Line 1792 of yacc.c  */
#line 15781 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2565:
/* Line 1792 of yacc.c  */
#line 15794 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2566:
/* Line 1792 of yacc.c  */
#line 15807 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2567:
/* Line 1792 of yacc.c  */
#line 15819 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2568:
/* Line 1792 of yacc.c  */
#line 15824 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2569:
/* Line 1792 of yacc.c  */
#line 15832 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2570:
/* Line 1792 of yacc.c  */
#line 15837 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2571:
/* Line 1792 of yacc.c  */
#line 15845 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2572:
/* Line 1792 of yacc.c  */
#line 15863 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            if (!strcmp((yyvsp[(5) - (5)].lex_str).str, ""))
            {
              String *password= new (YYTHD->mem_root) String ((const char *)"",
                                     YYTHD->variables.character_set_client);
              check_password_policy(password);
            }
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2573:
/* Line 1792 of yacc.c  */
#line 15883 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2574:
/* Line 1792 of yacc.c  */
#line 15895 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2575:
/* Line 1792 of yacc.c  */
#line 15908 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2576:
/* Line 1792 of yacc.c  */
#line 15916 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2580:
/* Line 1792 of yacc.c  */
#line 15930 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2582:
/* Line 1792 of yacc.c  */
#line 15959 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2583:
/* Line 1792 of yacc.c  */
#line 15963 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2584:
/* Line 1792 of yacc.c  */
#line 15967 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2585:
/* Line 1792 of yacc.c  */
#line 15971 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2586:
/* Line 1792 of yacc.c  */
#line 15977 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2588:
/* Line 1792 of yacc.c  */
#line 15982 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2589:
/* Line 1792 of yacc.c  */
#line 15983 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2590:
/* Line 1792 of yacc.c  */
#line 15987 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2591:
/* Line 1792 of yacc.c  */
#line 15988 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2592:
/* Line 1792 of yacc.c  */
#line 15992 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2593:
/* Line 1792 of yacc.c  */
#line 15994 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2594:
/* Line 1792 of yacc.c  */
#line 16000 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2595:
/* Line 1792 of yacc.c  */
#line 16006 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2596:
/* Line 1792 of yacc.c  */
#line 16012 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2597:
/* Line 1792 of yacc.c  */
#line 16021 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2598:
/* Line 1792 of yacc.c  */
#line 16026 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2599:
/* Line 1792 of yacc.c  */
#line 16030 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2600:
/* Line 1792 of yacc.c  */
#line 16031 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2601:
/* Line 1792 of yacc.c  */
#line 16036 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2602:
/* Line 1792 of yacc.c  */
#line 16037 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2603:
/* Line 1792 of yacc.c  */
#line 16038 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2604:
/* Line 1792 of yacc.c  */
#line 16043 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2605:
/* Line 1792 of yacc.c  */
#line 16044 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2606:
/* Line 1792 of yacc.c  */
#line 16045 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2607:
/* Line 1792 of yacc.c  */
#line 16049 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2608:
/* Line 1792 of yacc.c  */
#line 16050 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2609:
/* Line 1792 of yacc.c  */
#line 16055 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2610:
/* Line 1792 of yacc.c  */
#line 16067 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2611:
/* Line 1792 of yacc.c  */
#line 16077 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2612:
/* Line 1792 of yacc.c  */
#line 16086 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2613:
/* Line 1792 of yacc.c  */
#line 16095 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2614:
/* Line 1792 of yacc.c  */
#line 16108 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2616:
/* Line 1792 of yacc.c  */
#line 16114 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2617:
/* Line 1792 of yacc.c  */
#line 16119 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2618:
/* Line 1792 of yacc.c  */
#line 16129 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2619:
/* Line 1792 of yacc.c  */
#line 16130 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2620:
/* Line 1792 of yacc.c  */
#line 16131 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2621:
/* Line 1792 of yacc.c  */
#line 16135 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2622:
/* Line 1792 of yacc.c  */
#line 16136 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2623:
/* Line 1792 of yacc.c  */
#line 16140 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2624:
/* Line 1792 of yacc.c  */
#line 16156 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2627:
/* Line 1792 of yacc.c  */
#line 16169 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2628:
/* Line 1792 of yacc.c  */
#line 16170 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2629:
/* Line 1792 of yacc.c  */
#line 16171 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2630:
/* Line 1792 of yacc.c  */
#line 16176 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2631:
/* Line 1792 of yacc.c  */
#line 16180 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2633:
/* Line 1792 of yacc.c  */
#line 16189 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2634:
/* Line 1792 of yacc.c  */
#line 16195 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2635:
/* Line 1792 of yacc.c  */
#line 16204 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2636:
/* Line 1792 of yacc.c  */
#line 16210 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2637:
/* Line 1792 of yacc.c  */
#line 16231 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2642:
/* Line 1792 of yacc.c  */
#line 16266 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2643:
/* Line 1792 of yacc.c  */
#line 16268 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2644:
/* Line 1792 of yacc.c  */
#line 16275 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2645:
/* Line 1792 of yacc.c  */
#line 16276 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2646:
/* Line 1792 of yacc.c  */
#line 16277 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2647:
/* Line 1792 of yacc.c  */
#line 16279 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2648:
/* Line 1792 of yacc.c  */
#line 16285 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2649:
/* Line 1792 of yacc.c  */
#line 16290 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2650:
/* Line 1792 of yacc.c  */
#line 16301 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2651:
/* Line 1792 of yacc.c  */
#line 16303 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2652:
/* Line 1792 of yacc.c  */
#line 16305 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2666:
/* Line 1792 of yacc.c  */
#line 16338 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2667:
/* Line 1792 of yacc.c  */
#line 16352 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2668:
/* Line 1792 of yacc.c  */
#line 16365 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2669:
/* Line 1792 of yacc.c  */
#line 16367 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2670:
/* Line 1792 of yacc.c  */
#line 16369 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2671:
/* Line 1792 of yacc.c  */
#line 16374 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2672:
/* Line 1792 of yacc.c  */
#line 16379 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2673:
/* Line 1792 of yacc.c  */
#line 16381 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2674:
/* Line 1792 of yacc.c  */
#line 16383 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2675:
/* Line 1792 of yacc.c  */
#line 16388 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2676:
/* Line 1792 of yacc.c  */
#line 16390 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2677:
/* Line 1792 of yacc.c  */
#line 16392 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2678:
/* Line 1792 of yacc.c  */
#line 16397 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2680:
/* Line 1792 of yacc.c  */
#line 16414 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2682:
/* Line 1792 of yacc.c  */
#line 16420 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2683:
/* Line 1792 of yacc.c  */
#line 16425 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2684:
/* Line 1792 of yacc.c  */
#line 16432 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2685:
/* Line 1792 of yacc.c  */
#line 16441 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2686:
/* Line 1792 of yacc.c  */
#line 16458 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2689:
/* Line 1792 of yacc.c  */
#line 16479 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2691:
/* Line 1792 of yacc.c  */
#line 16488 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2692:
/* Line 1792 of yacc.c  */
#line 16492 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2693:
/* Line 1792 of yacc.c  */
#line 16499 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2694:
/* Line 1792 of yacc.c  */
#line 16501 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2695:
/* Line 1792 of yacc.c  */
#line 16503 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2696:
/* Line 1792 of yacc.c  */
#line 16505 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2697:
/* Line 1792 of yacc.c  */
#line 16522 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2698:
/* Line 1792 of yacc.c  */
#line 16528 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2699:
/* Line 1792 of yacc.c  */
#line 16533 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2700:
/* Line 1792 of yacc.c  */
#line 16563 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2701:
/* Line 1792 of yacc.c  */
#line 16598 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2702:
/* Line 1792 of yacc.c  */
#line 16616 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2703:
/* Line 1792 of yacc.c  */
#line 16639 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2704:
/* Line 1792 of yacc.c  */
#line 16671 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2705:
/* Line 1792 of yacc.c  */
#line 16676 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2706:
/* Line 1792 of yacc.c  */
#line 16684 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2707:
/* Line 1792 of yacc.c  */
#line 16707 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2708:
/* Line 1792 of yacc.c  */
#line 16715 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2709:
/* Line 1792 of yacc.c  */
#line 16773 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2710:
/* Line 1792 of yacc.c  */
#line 16793 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2711:
/* Line 1792 of yacc.c  */
#line 16806 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2712:
/* Line 1792 of yacc.c  */
#line 16816 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2713:
/* Line 1792 of yacc.c  */
#line 16824 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2714:
/* Line 1792 of yacc.c  */
#line 16838 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2715:
/* Line 1792 of yacc.c  */
#line 16842 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2716:
/* Line 1792 of yacc.c  */
#line 16846 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2717:
/* Line 1792 of yacc.c  */
#line 16850 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2718:
/* Line 1792 of yacc.c  */
#line 16854 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2719:
/* Line 1792 of yacc.c  */
#line 16858 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2720:
/* Line 1792 of yacc.c  */
#line 16865 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2721:
/* Line 1792 of yacc.c  */
#line 16872 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2722:
/* Line 1792 of yacc.c  */
#line 16879 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2723:
/* Line 1792 of yacc.c  */
#line 16888 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2724:
/* Line 1792 of yacc.c  */
#line 16889 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2725:
/* Line 1792 of yacc.c  */
#line 16893 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2726:
/* Line 1792 of yacc.c  */
#line 16894 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2727:
/* Line 1792 of yacc.c  */
#line 16895 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2728:
/* Line 1792 of yacc.c  */
#line 16899 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2729:
/* Line 1792 of yacc.c  */
#line 16900 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2730:
/* Line 1792 of yacc.c  */
#line 16905 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2731:
/* Line 1792 of yacc.c  */
#line 16907 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2733:
/* Line 1792 of yacc.c  */
#line 16912 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {}
    break;

  case 2734:
/* Line 1792 of yacc.c  */
#line 16913 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2735:
/* Line 1792 of yacc.c  */
#line 16918 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2736:
/* Line 1792 of yacc.c  */
#line 16928 "/home/jiamin/percona-server/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1792 of yacc.c  */
#line 40861 "/home/jiamin/percona-server/build/5.6-debug/sql/sql_yacc.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (YYTHD, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, YYTHD);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


